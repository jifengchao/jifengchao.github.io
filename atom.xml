<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhisheng的博客</title>
  <subtitle>永远不要跟别人比幸运，我从来没想过我比别人幸运，我也许比他们更有毅力，在最困难的时候，他们熬不住了，我可以多熬一秒钟、两秒钟。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-09T04:59:12.775Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhisheng Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>全文搜索引擎 Elasticsearch 集群搭建入门教程</title>
    <link href="http://yoursite.com/2017/09/09/Elasticsearch-install/"/>
    <id>http://yoursite.com/2017/09/09/Elasticsearch-install/</id>
    <published>2017-09-09T03:56:42.374Z</published>
    <updated>2017-09-09T04:59:12.775Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。基百科、Stack Overflow、Github 都采用它。</p>
<p>本文从零开始，讲解如何使用 Elasticsearch 搭建自己的全文搜索引擎。每一步都有详细的说明，大家跟着做就能学会。<br><a id="more"></a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>1、VMware</p>
<p>2、Centos 6.6</p>
<p>3、Elasticsearch 5.5.2</p>
<p>4、JDK 1.8</p>
<p>VMware 安装以及在 VMware 中安装 Centos 这个就不说了，环境配置直接默认就好，不过分配给机器的内存最好设置大点（建议 2G），</p>
<p>使用 dhclient 命令来自动获取 IP 地址，查看获取的 IP 地址则使用命令 ip addr 或者 ifconfig ，则会看到网卡信息和 lo 卡信息。</p>
<p>给虚拟机额中的 linux 设置固定的  ip（因为后面发现每次机器重启后又要重新使用 dhclient 命令来自动获取 IP 地址）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim  /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">onboot=yes</div><div class="line">bootproto=static</div></pre></td></tr></table></figure>
<p>增加：（下面可设置可不设置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">IPADDR=192.168.1.113            网卡IP地址</div><div class="line">GATEWAY=192.168.1.1</div><div class="line">NETMASK=255.255.255.0</div></pre></td></tr></table></figure>
<p>设置好之后，把网络服务重启一下， <code>service network restart</code></p>
<p>修改 ip 地址参考： <a href="http://jingyan.baidu.com/article/e4d08ffdd417660fd3f60d70.html" target="_blank" rel="external">http://jingyan.baidu.com/article/e4d08ffdd417660fd3f60d70.html</a></p>
<p>大环境都准备好了，下面开始安装步骤：</p>
<h3 id="安装-JDK-1-8"><a href="#安装-JDK-1-8" class="headerlink" title="安装 JDK 1.8"></a>安装 JDK 1.8</h3><p>先卸载自带的 openjdk，查找  openjdk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep java</div></pre></td></tr></table></figure>
<p>卸载 openjdk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y remove  java-1.7.0-openjdk-1.7.0.65-2.5.1.2.el65.x8664</div><div class="line">yum -y remove java-1.6.0-openjdk-1.6.0.0-11.1.13.4.el6.x86_64</div></pre></td></tr></table></figure>
<p><strong>解压 JDK 安装包：</strong></p>
<p>附上jdk1.8的下载地址：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>解压完成后配置一下环境变量就 ok</p>
<p>1、在/usr/local/下创建Java文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/                                    进入目录</div><div class="line">mkdir java                                     新建java目录</div></pre></td></tr></table></figure>
<p>2、文件夹创建完毕，把安装包拷贝到 Java 目录中，然后解压 jdk 到当前目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp /usr/jdk-8u144-linux-x64.tar.gz /usr/local/java/    **注意匹配你自己的文件名**  拷贝到java目录</div><div class="line">tar -zxvf jdk-8u144-linux-x64.tar.gz       解压到当前目录（Java目录）</div></pre></td></tr></table></figure>
<p>3、解压完之后，Java目录中会出现一个jdk1.8.0_144的目录，这就解压完成了。之后配置一下环境变量。<br>编辑/etc/下的profile文件，配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">vi /etc/profile                  进入profile文件的编辑模式</div><div class="line"></div><div class="line">在最后边追加一下内容(**配置的时候一定要根据自己的目录情况而定哦！**)</div><div class="line"></div><div class="line"> JAVA_HOME=/usr/local/java/jdk1.8.0_144</div><div class="line"> CLASSPATH=$JAVA_HOME/lib/</div><div class="line"> PATH=$PATH:$JAVA_HOME/bin</div><div class="line"> export PATH JAVA_HOME CLASSPATH</div></pre></td></tr></table></figure>
<p>之后保存并退出文件之后。</p>
<p>让文件生效：<code>source /etc/profile</code></p>
<p>在控制台输入Java 和 Java -version 看有没有信息输出，如下： <code>java -version</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version &quot;1.8.0_144&quot;</div><div class="line"> Java(TM) SE Runtime Environment (build 1.8.0_60-b27)</div><div class="line"> Java HotSpot(TM) Client VM (build 25.60-b23, mixed mode)</div></pre></td></tr></table></figure>
<p>能显示以上信息，就说明 JDK 安装成功啦</p>
<hr>
<h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><p>因为后面可能会用到 maven ，先装上这个。</p>
<p>1、下载 maven</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirrors.hust.edu.cn/apache/maven/maven-3/3.2.5/binaries/apache-maven-3.2.5-bin.tar.gz</div></pre></td></tr></table></figure>
<p>2、解压至 /usr/local 目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf apache-maven-3.2.5-bin.tar.gz</div></pre></td></tr></table></figure>
<p>3、配置公司给的配置</p>
<p>替换成公司给的 setting.xml 文件，修改关于本地仓库的位置, 默认位置: ${user.home}/.m2/repository</p>
<p>4、配置环境变量etc/profile 最后添加以下两行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export MAVEN_HOME=/usr/local/apache-maven-3.2.5</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</div></pre></td></tr></table></figure>
<p>5、测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# mvn -v</div><div class="line">Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T09:29:23-08:00)</div><div class="line">Maven home: /usr/local/apache-maven-3.2.5</div></pre></td></tr></table></figure>
<p>VMware 虚拟机里面的三台机器 IP 分别是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.153.133</div><div class="line">192.168.153.134</div><div class="line">192.168.153.132</div></pre></td></tr></table></figure>
<h3 id="配置-hosts"><a href="#配置-hosts" class="headerlink" title="配置 hosts"></a>配置 hosts</h3><p>在 /etc/hosts下面编写：ip  node 节点的名字（域名解析）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim  /etc/hosts</div></pre></td></tr></table></figure>
<p>新增：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">192.168.153.133  es1</div><div class="line">192.168.153.134  es2</div><div class="line">192.168.153.132  es3</div></pre></td></tr></table></figure>
<h3 id="设置-SSH-免密码登录"><a href="#设置-SSH-免密码登录" class="headerlink" title="设置 SSH 免密码登录"></a>设置 SSH 免密码登录</h3><p>安装expect命令 ： yum -y install expect</p>
<p>将 ssh_p2p.jar 随便解压到任何目录下： (这个 jar 包可以去网上下载)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip ssh_p2p.zip</div></pre></td></tr></table></figure>
<p>修改 resource 的 ip 值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /ssh_p2p/deploy_data/resource  （各个节点和账户名，密码，free代表相互都可以无密码登陆）</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#设置为你每台虚拟机的ip地址，用户名，密码</div><div class="line">address=(</div><div class="line">&quot;192.168.153.133,root,123456,free&quot;</div><div class="line">&quot;192.168.153,134,root,123456,free&quot;</div><div class="line">&quot;192.168.153.132,root,123456,free&quot;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>修改 start.sh 的运行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x start.sh</div></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./start.sh</div></pre></td></tr></table></figure>
<p>测试：</p>
<p>ssh ip地址  （测试是否可以登录）</p>
<h3 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h3><p>下载地址： <a href="https://www.elastic.co/downloads/elasticsearch" target="_blank" rel="external">https://www.elastic.co/downloads/elasticsearch</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.tar.gz</div><div class="line">cd /usr/local</div><div class="line">tar -zxvf   elasticsearch-5.5.2.tar.gz</div></pre></td></tr></table></figure>
<p><code>su tzs</code>  切换到 tzs 用户下 ( 默认不支持 root 用户)</p>
<p><code>sh /usr/local/elasticsearch/bin/elasticsearch -d</code>  其中 -d 表示后台启动</p>
<p>在 vmware 上测试是否成功：curl <a href="http://localhost:9200/" target="_blank" rel="external">http://localhost:9200/</a></p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/test.jpg-1" alt="test"></p>
<p>出现如上图这样的效果，就代表已经装好了。</p>
<p>elasticsearch 默认 restful-api 的端口是 9200 不支持 IP 地址，也就是说无法从主机访问虚拟机中的服务，只能在本机用 <a href="http://localhost:9200" target="_blank" rel="external">http://localhost:9200</a> 来访问。如果需要改变，需要修改配置文件 /usr/local/elasticsearch/config/elasticsearch.yml 文件，加入以下两行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">network.bind_host: 0.0.0.0</div><div class="line">network.publish_host: _nonloopback:ipv4</div></pre></td></tr></table></figure>
<p>或去除 network.host 和 http.port 之前的注释，并将 network.host 的 IP 地址修改为本机外网 IP。然后重启，Elasticsearch</p>
<p>关闭方法（输入命令：<code>ps -ef | grep elasticsearch</code> ，找到进程，然后 kill 掉就行了。</p>
<p>如果外网还是不能访问，则有可能是防火墙设置导致的 ( 关闭防火墙：<code>service iptables stop</code> )</p>
<p>修改配置文件：<code>vim config/elasticsearch.yml</code></p>
<p>cluster.name : my-app  (集群的名字，名字相同的就是一个集群)</p>
<p>node.name : es1  （节点的名字, 和前面配置的 hosts 中的 name 要一致）</p>
<p>path.data: /data/elasticsearch/data  （数据的路径。没有要创建（<code>mkdir -p /data/elasticsearch/{data,logs}</code>），并且给执行用户权限 <code>chown tzs /data/elasticsearch/{data,logs} -R</code> ）<br>path.logs: /data/elasticsearch/logs    （数据 log 信息的路径，同上）<br>network.host: 0.0.0.0    //允许外网访问，也可以是自己的ip地址<br>http.port: 9200        //访问的端口<br>discovery.zen.ping.unicast.hosts: [“192.168.153.133”, “192.168.153.134”, “192.168.153.132”]   //各个节点的ip地址</p>
<p>记得需要添加上：（这个是安装 head 插件要用的， 目前不需要）<br>http.cors.enabled: true<br>http.cors.allow-origin: “*”</p>
<p>最后在外部浏览器的效果如下图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/test-on-bro.jpg-1" alt="test-on-bro"></p>
<h3 id="安装-IK-中文分词"><a href="#安装-IK-中文分词" class="headerlink" title="安装 IK 中文分词"></a>安装 IK 中文分词</h3><p>可以自己下载源码使用 maven 编译，当然如果怕麻烦可以直接下载编译好的</p>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.2" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.2</a></p>
<p>注意下载对应的版本放在 plugins 目录下</p>
<p>解压</p>
<p><code>unzip elasticsearch-analysis-ik-5.5.2.zip</code></p>
<p>在 es 的 plugins 下新建 ik 目录</p>
<p><code>mkdir ik</code></p>
<p>将刚才解压的复制到ik目录下</p>
<p><code>cp -r elasticsearch/* ik</code></p>
<p>删除刚才解压后的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -rf elasticsearch</div><div class="line">rm -rf elasticsearch-analysis-ik-5.5.2.zip</div></pre></td></tr></table></figure>
<h4 id="IK-带有两个分词器"><a href="#IK-带有两个分词器" class="headerlink" title="IK 带有两个分词器"></a>IK 带有两个分词器</h4><p><strong>ik_max_word</strong> ：会将文本做最细粒度的拆分；尽可能多的拆分出词语</p>
<p><strong>ik_smart</strong>：会做最粗粒度的拆分；已被分出的词语将不会再次被其它词语占有</p>
<p>安装完 IK 中文分词器后（当然不止这种中文分词器，还有其他的，可以参考我的文章  <a href="http://www.54tianzhisheng.cn/2017/09/07/Elasticsearch-analyzers/" target="_blank" rel="external">Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</a>），测试区别如下：</p>
<h5 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h5><p>curl -XGET ‘<a href="http://192.168.153.134:9200/_analyze?pretty&amp;analyzer=ik_max_word" target="_blank" rel="external">http://192.168.153.134:9200/_analyze?pretty&amp;analyzer=ik_max_word</a>‘ -d ‘联想是全球最大的笔记本厂商’</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 10,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;本厂&quot;,</div><div class="line">      &quot;start_offset&quot; : 10,</div><div class="line">      &quot;end_offset&quot; : 12,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 7</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 8</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h5><p>curl -XGET ‘<a href="http://localhost:9200/_analyze?pretty&amp;analyzer=ik_smart" target="_blank" rel="external">http://localhost:9200/_analyze?pretty&amp;analyzer=ik_smart</a>‘ -d ‘联想是全球最大的笔记本厂商’</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="安装-head-插件"><a href="#安装-head-插件" class="headerlink" title="安装 head 插件"></a>安装 head 插件</h3><p>elasticsearch-head 是一个 elasticsearch 的集群管理工具，它是完全由 html5 编写的独立网页程序，你可以通过插件把它集成到 es。</p>
<p>效果如下图：（图片来自网络）</p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353133910_8134.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353133911_9624.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353134135_7264.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353134135_5729.jpg" alt=""></p>
<p><img src="http://img.my.csdn.net/uploads/201211/17/1353133911_8912.jpg" alt=""></p>
<h4 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum remove git</div><div class="line">yum install git</div><div class="line">git clone git://github.com/mobz/elasticsearch-head.git   拉取 head 插件到本地，或者直接在 GitHub 下载 压缩包下来</div></pre></td></tr></table></figure>
<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>先去官网下载 node-v8.4.0-linux-x64.tar.xz</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -Jxv -f  node-v8.4.0-linux-x64.tar.xz</div><div class="line">mv node-v8.4.0-linux-x64  node</div></pre></td></tr></table></figure>
<p>环境变量设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim  /etc/profile</div></pre></td></tr></table></figure>
<p>新增：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export NODE_HOME=/opt/node</div><div class="line">export PATH=$PATH:$NODE_HOME/bin</div><div class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</div></pre></td></tr></table></figure>
<p>使配置文件生效（这步很重要，自己要多注意这步）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p>测试是否全局可用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mv elasticsearch-head head</div><div class="line">cd head/</div><div class="line">npm install -g grunt-cli</div><div class="line">npm install</div><div class="line">grunt server</div></pre></td></tr></table></figure>
<p>再 es 的配置文件中加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>
<p>在浏览器打开 <code>http://192.168.153.133:9100/</code>  就可以看到效果了，</p>
<h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>把坑都走了一遍，防止以后再次入坑，特此记录下来</p>
<p><strong>1、ERROR Could not register mbeans java.security.AccessControlException: access denied (“javax.management.MBeanTrustPermission” “register”)</strong></p>
<p>改变 elasticsearch 文件夹所有者到当前用户</p>
<p>sudo chown -R noroot:noroot elasticsearch</p>
<p>这是因为 elasticsearch 需要读写配置文件，我们需要给予 config 文件夹权限，上面新建了 elsearch 用户，elsearch 用户不具备读写权限，因此还是会报错，解决方法是切换到管理员账户，赋予权限即可：</p>
<p>sudo -i</p>
<p>chmod -R 775 config</p>
<p><strong>2、[WARN ][o.e.b.ElasticsearchUncaughtExceptionHandler] [] uncaught exception in thread [main]</strong><br><strong>org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</strong></p>
<p>原因是elasticsearch默认是不支持用root用户来启动的。</p>
<p>解决方案一：Des.insecure.allow.root=true</p>
<p>修改/usr/local/elasticsearch-2.4.0/bin/elasticsearch，</p>
<p>添加 ES_JAVA_OPTS=”-Des.insecure.allow.root=true”</p>
<p>或执行时添加： sh /usr/local/elasticsearch-2.4.0/bin/elasticsearch -d -Des.insecure.allow.root=true</p>
<p>注意：正式环境用root运行可能会有安全风险，不建议用root来跑。</p>
<p>解决方案二：添加专门的用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">useradd elastic</div><div class="line">chown -R elastic:elastic  elasticsearch-2.4.0</div><div class="line">su elastic</div><div class="line">sh /usr/local/elasticsearch-2.4.0/bin/elasticsearch -d</div></pre></td></tr></table></figure>
<p><strong>3、UnsupportedOperationException: seccomp unavailable: requires kernel 3.5+ with CONFIG_SECCOMP and CONFIG_SECCOMP_FILTER compiled in</strong></p>
<p>只是警告，使用新的linux版本，就不会出现此类问题了。</p>
<p><strong>4、ERROR: [4] bootstrap checks failed</strong><br><strong>[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</strong></p>
<p>原因：无法创建本地文件问题,用户最大可创建文件数太小</p>
<p>解决方案：切换到 root 用户，编辑 limits.conf 配置文件， 添加类似如下内容：</p>
<p>vim /etc/security/limits.conf</p>
<p>添加如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*  soft nofile 65536</div><div class="line">* hard nofile 131072</div><div class="line">* soft nproc 2048</div><div class="line">* hard nproc 4096</div></pre></td></tr></table></figure>
<p><strong>[2]: max number of threads [1024] for user [tzs] is too low, increase to at least [2048]</strong></p>
<p>原因：无法创建本地线程问题,用户最大可创建线程数太小</p>
<p>解决方案：切换到root用户，进入limits.d目录下，修改90-nproc.conf 配置文件。</p>
<p>vim /etc/security/limits.d/90-nproc.conf</p>
<p>找到如下内容：</p>
<ul>
<li>soft nproc 1024</li>
</ul>
<p>修改为</p>
<ul>
<li>soft nproc 2048</li>
</ul>
<p><strong>[3]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</strong></p>
<p>原因：最大虚拟内存太小</p>
<p>root用户执行命令：</p>
<p><code>sysctl -w vm.max_map_count=262144</code></p>
<p>或者修改 /etc/sysctl.conf 文件，添加 “vm.max_map_count”设置<br>设置后，可以使用<br>$ sysctl -p</p>
<p><strong>[4]: system call filters failed to install; check the logs and fix your configuration or disable system call filters at your own risk</strong></p>
<p>原因：Centos6不支持SecComp，而ES5.4.1默认bootstrap.system_call_filter为true进行检测，所以导致检测失败，失败后直接导致ES不能启动。<br>详见 ：<a href="https://github.com/elastic/elasticsearch/issues/22899" target="_blank" rel="external">https://github.com/elastic/elasticsearch/issues/22899</a></p>
<p>解决方法：在elasticsearch.yml中新增配置bootstrap.system_call_filter，设为false，注意要在Memory下面:<br>bootstrap.memory_lock: false<br>bootstrap.system_call_filter: false</p>
<p><strong>5、 java.lang.IllegalArgumentException: property [elasticsearch.version] is missing for plugin [head]</strong></p>
<p>再 es 的配置文件中加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>整个搭建的过程全程自己手动安装，不易，如果安装很多台机器，是否可以写个脚本之类的自动搭建呢？可以去想想的。首发于：<a href="http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/09/09/Elasticsearch-install/</a>   ，转载请注明出处，谢谢配合！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为 Apache 许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。基百科、Stack Overflow、Github 都采用它。&lt;/p&gt;
&lt;p&gt;本文从零开始，讲解如何使用 Elasticsearch 搭建自己的全文搜索引擎。每一步都有详细的说明，大家跟着做就能学会。&lt;br&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 默认分词器和中分分词器之间的比较及使用方法</title>
    <link href="http://yoursite.com/2017/09/07/Elasticsearch-analyzers/"/>
    <id>http://yoursite.com/2017/09/07/Elasticsearch-analyzers/</id>
    <published>2017-09-07T01:50:46.000Z</published>
    <updated>2017-09-08T14:52:31.627Z</updated>
    
    <content type="html"><![CDATA[<p>介绍：ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p>
<p>Elasticsearch中，内置了很多分词器（analyzers）。下面来进行比较下系统默认分词器和常用的中文分词器之间的区别。<br><a id="more"></a></p>
<h2 id="系统默认分词器："><a href="#系统默认分词器：" class="headerlink" title="系统默认分词器："></a>系统默认分词器：</h2><h3 id="1、standard-分词器"><a href="#1、standard-分词器" class="headerlink" title="1、standard 分词器"></a>1、standard 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html</a></p>
<p>如何使用：<a href="http://www.yiibai.com/lucene/lucene_standardanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_standardanalyzer.html</a></p>
<p>英文的处理能力同于StopAnalyzer.支持中文采用的方法为单字切分。他会将词汇单元转换成小写形式，并去除停用词和标点符号。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**StandardAnalyzer分析器*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">standardAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">    StandardAnalyzer analyzer = <span class="keyword">new</span> StandardAnalyzer(Version.LUCENE_36);</div><div class="line">   <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、simple-分词器"><a href="#2、simple-分词器" class="headerlink" title="2、simple 分词器"></a>2、simple 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simple-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-simple-analyzer.html</a></p>
<p>如何使用: <a href="http://www.yiibai.com/lucene/lucene_simpleanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_simpleanalyzer.html</a></p>
<p>功能强于WhitespaceAnalyzer, 首先会通过非字母字符来分割文本信息，然后将词汇单元统一为小写形式。该分析器会去掉数字类型的字符。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**SimpleAnalyzer分析器*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        SimpleAnalyzer analyzer = <span class="keyword">new</span> SimpleAnalyzer(Version.LUCENE_36);</div><div class="line">        <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="3、Whitespace-分词器"><a href="#3、Whitespace-分词器" class="headerlink" title="3、Whitespace 分词器"></a>3、Whitespace 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-whitespace-analyzer.html</a></p>
<p>如何使用：<a href="http://www.yiibai.com/lucene/lucene_whitespaceanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_whitespaceanalyzer.html</a></p>
<p>仅仅是去除空格，对字符没有lowcase化,不支持中文；<br>并且不对生成的词汇单元进行其他的规范化处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**WhitespaceAnalyzer分析器*/</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whitespaceAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        WhitespaceAnalyzer analyzer = <span class="keyword">new</span> WhitespaceAnalyzer(Version.LUCENE_36);</div><div class="line">        <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="4、Stop-分词器"><a href="#4、Stop-分词器" class="headerlink" title="4、Stop 分词器"></a>4、Stop 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-stop-analyzer.html</a></p>
<p>如何使用：<a href="http://www.yiibai.com/lucene/lucene_stopanalyzer.html" target="_blank" rel="external">http://www.yiibai.com/lucene/lucene_stopanalyzer.html</a></p>
<p> StopAnalyzer的功能超越了SimpleAnalyzer，在SimpleAnalyzer的基础上增加了去除英文中的常用单词（如the，a等），也可以更加自己的需要设置常用单词；不支持中文</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**StopAnalyzer分析器*/</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopAnalyzer</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">       StopAnalyzer analyzer = <span class="keyword">new</span> StopAnalyzer(Version.LUCENE_36);</div><div class="line">       <span class="keyword">this</span>.getTokens(analyzer, msg);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="5、keyword-分词器"><a href="#5、keyword-分词器" class="headerlink" title="5、keyword 分词器"></a>5、keyword 分词器</h3><p>KeywordAnalyzer把整个输入作为一个单独词汇单元，方便特殊类型的文本进行索引和检索。针对邮政编码，地址等文本信息使用关键词分词器进行索引项建立非常方便。</p>
<h3 id="6、pattern-分词器"><a href="#6、pattern-分词器" class="headerlink" title="6、pattern 分词器"></a>6、pattern 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-pattern-analyzer.html</a></p>
<p>一个pattern类型的analyzer可以通过正则表达式将文本分成”terms”(经过token Filter 后得到的东西 )。接受如下设置:</p>
<p>一个 pattern analyzer 可以做如下的属性设置:</p>
<table>
<thead>
<tr>
<th>lowercase</th>
<th>terms是否是小写. 默认为 true 小写.</th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td>正则表达式的pattern, 默认是 \W+.</td>
</tr>
<tr>
<td>flags</td>
<td>正则表达式的flags</td>
</tr>
<tr>
<td>stopwords</td>
<td>一个用于初始化stop filter的需要stop 单词的列表.默认单词是空的列表</td>
</tr>
</tbody>
</table>
<h3 id="7、language-分词器"><a href="#7、language-分词器" class="headerlink" title="7、language 分词器"></a>7、language 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html</a></p>
<p>一个用于解析特殊语言文本的analyzer集合。（ arabic,armenian, basque, brazilian, bulgarian, catalan, cjk, czech, danish, dutch, english, finnish, french,galician, german, greek, hindi, hungarian, indonesian, irish, italian, latvian, lithuanian, norwegian,persian, portuguese, romanian, russian, sorani, spanish, swedish, turkish, thai.）可惜没有中文。不予考虑</p>
<h3 id="8、snowball-分词器"><a href="#8、snowball-分词器" class="headerlink" title="8、snowball 分词器"></a>8、snowball 分词器</h3><p>一个snowball类型的analyzer是由standard tokenizer和standard filter、lowercase filter、stop filter、snowball filter这四个filter构成的。</p>
<p>snowball analyzer 在Lucene中通常是不推荐使用的。</p>
<h3 id="9、Custom-分词器"><a href="#9、Custom-分词器" class="headerlink" title="9、Custom 分词器"></a>9、Custom 分词器</h3><p>是自定义的analyzer。允许多个零到多个tokenizer，零到多个 Char Filters. custom analyzer 的名字不能以 “_”开头.</p>
<p>The following are settings that can be set for a custom analyzer type:</p>
<table>
<thead>
<tr>
<th>Setting</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>tokenizer</td>
<td>通用的或者注册的tokenizer.</td>
</tr>
<tr>
<td>filter</td>
<td>通用的或者注册的token filters</td>
</tr>
<tr>
<td>char_filter</td>
<td>通用的或者注册的 character filters</td>
</tr>
<tr>
<td>position_increment_gap</td>
<td>距离查询时，最大允许查询的距离，默认是100</td>
</tr>
</tbody>
</table>
<p>自定义的模板：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">index :</div><div class="line">    analysis :</div><div class="line">        analyzer :</div><div class="line">            myAnalyzer2 :</div><div class="line">                type : custom</div><div class="line">                tokenizer : myTokenizer1</div><div class="line">                filter : [myTokenFilter1, myTokenFilter2]</div><div class="line">                char_filter : [my_html]</div><div class="line">                position_increment_gap: 256</div><div class="line">        tokenizer :</div><div class="line">            myTokenizer1 :</div><div class="line">                type : standard</div><div class="line">                max_token_length : 900</div><div class="line">        filter :</div><div class="line">            myTokenFilter1 :</div><div class="line">                type : stop</div><div class="line">                stopwords : [stop1, stop2, stop3, stop4]</div><div class="line">            myTokenFilter2 :</div><div class="line">                type : length</div><div class="line">                min : 0</div><div class="line">                max : 2000</div><div class="line">        char_filter :</div><div class="line">              my_html :</div><div class="line">                type : html_strip</div><div class="line">                escaped_tags : [xxx, yyy]</div><div class="line">                read_ahead : 1024</div></pre></td></tr></table></figure>
<h3 id="10、fingerprint-分词器"><a href="#10、fingerprint-分词器" class="headerlink" title="10、fingerprint 分词器"></a>10、fingerprint 分词器</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-fingerprint-analyzer.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-fingerprint-analyzer.html</a></p>
<hr>
<h2 id="中文分词器："><a href="#中文分词器：" class="headerlink" title="中文分词器："></a>中文分词器：</h2><h3 id="1、ik-analyzer"><a href="#1、ik-analyzer" class="headerlink" title="1、ik-analyzer"></a>1、ik-analyzer</h3><p><a href="https://github.com/wks/ik-analyzer" target="_blank" rel="external">https://github.com/wks/ik-analyzer</a></p>
<p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。</p>
<p>采用了特有的“正向迭代最细粒度切分算法“，支持细粒度和最大词长两种切分模式；具有83万字/秒（1600KB/S）的高速处理能力。</p>
<p>采用了多子处理器分析模式，支持：英文字母、数字、中文词汇等分词处理，兼容韩文、日文字符</p>
<p>优化的词典存储，更小的内存占用。支持用户词典扩展定义</p>
<p>针对Lucene全文检索优化的查询分析器IKQueryParser(作者吐血推荐)；引入简单搜索表达式，采用歧义分析算法优化查询关键字的搜索排列组合，能极大的提高Lucene检索的命中率。</p>
<p>Maven用法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.wltea.ik-analyzer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ik-analyzer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在IK Analyzer加入Maven Central Repository之前，你需要手动安装，安装到本地的repository，或者上传到自己的Maven repository服务器上。</p>
<p>要安装到本地Maven repository，使用如下命令，将自动编译，打包并安装：<br>mvn install -Dmaven.test.skip=true</p>
<h4 id="Elasticsearch添加中文分词"><a href="#Elasticsearch添加中文分词" class="headerlink" title="Elasticsearch添加中文分词"></a>Elasticsearch添加中文分词</h4><h5 id="安装IK分词插件"><a href="#安装IK分词插件" class="headerlink" title="安装IK分词插件"></a>安装IK分词插件</h5><p><a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-ik</a></p>
<p>进入elasticsearch-analysis-ik-master</p>
<p>更多安装请参考博客：</p>
<p>1、<a href="http://blog.csdn.net/dingzfang/article/details/42776693" target="_blank" rel="external">为elastic添加中文分词</a> ： <a href="http://blog.csdn.net/dingzfang/article/details/42776693" target="_blank" rel="external">http://blog.csdn.net/dingzfang/article/details/42776693</a></p>
<p>2、<a href="http://www.cnblogs.com/xing901022/p/5910139.html" target="_blank" rel="external">如何在Elasticsearch中安装中文分词器(IK+pinyin)</a> ：<a href="http://www.cnblogs.com/xing901022/p/5910139.html" target="_blank" rel="external">http://www.cnblogs.com/xing901022/p/5910139.html</a></p>
<p>3、<a href="http://blog.csdn.net/jam00/article/details/52983056" target="_blank" rel="external">Elasticsearch 中文分词器 IK 配置和使用</a> ： <a href="http://blog.csdn.net/jam00/article/details/52983056" target="_blank" rel="external">http://blog.csdn.net/jam00/article/details/52983056</a></p>
<h4 id="ik-带有两个分词器"><a href="#ik-带有两个分词器" class="headerlink" title="ik 带有两个分词器"></a>ik 带有两个分词器</h4><p><strong>ik_max_word</strong> ：会将文本做最细粒度的拆分；尽可能多的拆分出词语</p>
<p><strong>ik_smart</strong>：会做最粗粒度的拆分；已被分出的词语将不会再次被其它词语占有</p>
<p>区别：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line"># ik_max_word</div><div class="line"></div><div class="line">curl -XGET &apos;http://localhost:9200/_analyze?pretty&amp;analyzer=ik_max_word&apos; -d &apos;联想是全球最大的笔记本厂商&apos;</div><div class="line">#返回</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 10,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;本厂&quot;,</div><div class="line">      &quot;start_offset&quot; : 10,</div><div class="line">      &quot;end_offset&quot; : 12,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 7</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 8</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># ik_smart</div><div class="line"></div><div class="line">curl -XGET &apos;http://localhost:9200/_analyze?pretty&amp;analyzer=ik_smart&apos; -d &apos;联想是全球最大的笔记本厂商&apos;</div><div class="line"></div><div class="line"># 返回</div><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;联想&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;是&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;全球&quot;,</div><div class="line">      &quot;start_offset&quot; : 3,</div><div class="line">      &quot;end_offset&quot; : 5,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;最大&quot;,</div><div class="line">      &quot;start_offset&quot; : 5,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;的&quot;,</div><div class="line">      &quot;start_offset&quot; : 7,</div><div class="line">      &quot;end_offset&quot; : 8,</div><div class="line">      &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;笔记本&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 5</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;厂商&quot;,</div><div class="line">      &quot;start_offset&quot; : 11,</div><div class="line">      &quot;end_offset&quot; : 13,</div><div class="line">      &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">      &quot;position&quot; : 6</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们来创建一个索引，使用 ik<br>创建一个名叫 iktest 的索引，设置它的分析器用 ik ，分词器用 ik_max_word，并创建一个 article 的类型，里面有一个 subject 的字段，指定其使用 ik_max_word 分词器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &apos;http://localhost:9200/iktest?pretty&apos; -d &apos;&#123;</div><div class="line">    &quot;settings&quot; : &#123;</div><div class="line">        &quot;analysis&quot; : &#123;</div><div class="line">            &quot;analyzer&quot; : &#123;</div><div class="line">                &quot;ik&quot; : &#123;</div><div class="line">                    &quot;tokenizer&quot; : &quot;ik_max_word&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;mappings&quot; : &#123;</div><div class="line">        &quot;article&quot; : &#123;</div><div class="line">            &quot;dynamic&quot; : true,</div><div class="line">            &quot;properties&quot; : &#123;</div><div class="line">                &quot;subject&quot; : &#123;</div><div class="line">                    &quot;type&quot; : &quot;string&quot;,</div><div class="line">                    &quot;analyzer&quot; : &quot;ik_max_word&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>批量添加几条数据，这里我指定元数据 _id 方便查看，subject 内容为我随便找的几条新闻的标题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/iktest/article/_bulk?pretty -d &apos;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;1&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;＂闺蜜＂崔顺实被韩检方传唤 韩总统府促彻查真相&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;2&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;韩举行＂护国训练＂ 青瓦台:决不许国家安全出问题&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;3&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;媒体称FBI已经取得搜查令 检视希拉里电邮&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;4&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;村上春树获安徒生奖 演讲中谈及欧洲排外问题&quot; &#125;</div><div class="line">&#123; &quot;index&quot; : &#123; &quot;_id&quot; : &quot;5&quot; &#125; &#125;</div><div class="line">&#123;&quot;subject&quot; : &quot;希拉里团队炮轰FBI 参院民主党领袖批其“违法”&quot; &#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<p>查询 “希拉里和韩国”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/iktest/article/_search?pretty  -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;subject&quot; : &quot;希拉里和韩国&quot; &#125;&#125;,</div><div class="line">    &quot;highlight&quot; : &#123;</div><div class="line">        &quot;pre_tags&quot; : [&quot;&lt;font color=&apos;red&apos;&gt;&quot;],</div><div class="line">        &quot;post_tags&quot; : [&quot;&lt;/font&gt;&quot;],</div><div class="line">        &quot;fields&quot; : &#123;</div><div class="line">            &quot;subject&quot; : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&apos;</div><div class="line">#返回</div><div class="line">&#123;</div><div class="line">  &quot;took&quot; : 113,</div><div class="line">  &quot;timed_out&quot; : false,</div><div class="line">  &quot;_shards&quot; : &#123;</div><div class="line">    &quot;total&quot; : 5,</div><div class="line">    &quot;successful&quot; : 5,</div><div class="line">    &quot;failed&quot; : 0</div><div class="line">  &#125;,</div><div class="line">  &quot;hits&quot; : &#123;</div><div class="line">    &quot;total&quot; : 4,</div><div class="line">    &quot;max_score&quot; : 0.034062363,</div><div class="line">    &quot;hits&quot; : [ &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;2&quot;,</div><div class="line">      &quot;_score&quot; : 0.034062363,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;韩举行＂护国训练＂ 青瓦台:决不许国家安全出问题&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;&lt;font color=red&gt;韩&lt;/font&gt;举行＂护&lt;font color=red&gt;国&lt;/font&gt;训练＂ 青瓦台:决不许国家安全出问题&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;3&quot;,</div><div class="line">      &quot;_score&quot; : 0.0076681254,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;媒体称FBI已经取得搜查令 检视希拉里电邮&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;媒体称FBI已经取得搜查令 检视&lt;font color=red&gt;希拉里&lt;/font&gt;电邮&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;5&quot;,</div><div class="line">      &quot;_score&quot; : 0.006709609,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;希拉里团队炮轰FBI 参院民主党领袖批其“违法”&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;&lt;font color=red&gt;希拉里&lt;/font&gt;团队炮轰FBI 参院民主党领袖批其“违法”&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">      &quot;_index&quot; : &quot;iktest&quot;,</div><div class="line">      &quot;_type&quot; : &quot;article&quot;,</div><div class="line">      &quot;_id&quot; : &quot;1&quot;,</div><div class="line">      &quot;_score&quot; : 0.0021509775,</div><div class="line">      &quot;_source&quot; : &#123;</div><div class="line">        &quot;subject&quot; : &quot;＂闺蜜＂崔顺实被韩检方传唤 韩总统府促彻查真相&quot;</div><div class="line">      &#125;,</div><div class="line">      &quot;highlight&quot; : &#123;</div><div class="line">        &quot;subject&quot; : [ &quot;＂闺蜜＂崔顺实被&lt;font color=red&gt;韩&lt;/font&gt;检方传唤 &lt;font color=red&gt;韩&lt;/font&gt;总统府促彻查真相&quot; ]</div><div class="line">      &#125;</div><div class="line">    &#125; ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里用了高亮属性 highlight，直接显示到 html 中，被匹配到的字或词将以红色突出显示。若要用过滤搜索，直接将 match 改为 term 即可</p>
<h4 id="热词更新配置"><a href="#热词更新配置" class="headerlink" title="热词更新配置"></a>热词更新配置</h4><p>网络词语日新月异，如何让新出的网络热词（或特定的词语）实时的更新到我们的搜索当中呢</p>
<p>先用 ik 测试一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;http://localhost:9200/_analyze?pretty&amp;analyzer=ik_max_word&apos; -d &apos;</div><div class="line">成龙原名陈港生</div><div class="line">&apos;</div><div class="line">#返回</div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [ &#123;</div><div class="line">    &quot;token&quot; : &quot;成龙&quot;,</div><div class="line">    &quot;start_offset&quot; : 1,</div><div class="line">    &quot;end_offset&quot; : 3,</div><div class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">    &quot;position&quot; : 0</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;原名&quot;,</div><div class="line">    &quot;start_offset&quot; : 3,</div><div class="line">    &quot;end_offset&quot; : 5,</div><div class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">    &quot;position&quot; : 1</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;陈&quot;,</div><div class="line">    &quot;start_offset&quot; : 5,</div><div class="line">    &quot;end_offset&quot; : 6,</div><div class="line">    &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">    &quot;position&quot; : 2</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;港&quot;,</div><div class="line">    &quot;start_offset&quot; : 6,</div><div class="line">    &quot;end_offset&quot; : 7,</div><div class="line">    &quot;type&quot; : &quot;CN_WORD&quot;,</div><div class="line">    &quot;position&quot; : 3</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;生&quot;,</div><div class="line">    &quot;start_offset&quot; : 7,</div><div class="line">    &quot;end_offset&quot; : 8,</div><div class="line">    &quot;type&quot; : &quot;CN_CHAR&quot;,</div><div class="line">    &quot;position&quot; : 4</div><div class="line">  &#125; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ik 的主词典中没有”陈港生” 这个词，所以被拆分了。<br>现在我们来配置一下</p>
<p>修改 IK 的配置文件 ：ES 目录/plugins/ik/config/ik/IKAnalyzer.cfg.xml</p>
<p>修改如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE properties SYSTEM &quot;http://java.sun.com/dtd/properties.dtd&quot;&gt;</div><div class="line">&lt;properties&gt;</div><div class="line">    &lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</div><div class="line">    &lt;!--用户可以在这里配置自己的扩展字典 --&gt;</div><div class="line">    &lt;entry key=&quot;ext_dict&quot;&gt;custom/mydict.dic;custom/single_word_low_freq.dic&lt;/entry&gt;</div><div class="line">     &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</div><div class="line">    &lt;entry key=&quot;ext_stopwords&quot;&gt;custom/ext_stopword.dic&lt;/entry&gt;</div><div class="line">    &lt;!--用户可以在这里配置远程扩展字典 --&gt;</div><div class="line">    &lt;entry key=&quot;remote_ext_dict&quot;&gt;http://192.168.1.136/hotWords.php&lt;/entry&gt;</div><div class="line">    &lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</div><div class="line">    &lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure>
<p>这里我是用的是远程扩展字典，因为可以使用其他程序调用更新，且不用重启 ES，很方便；当然使用自定义的 mydict.dic 字典也是很方便的，一行一个词，自己加就可以了</p>
<p>既然是远程词典，那么就要是一个可访问的链接，可以是一个页面，也可以是一个txt的文档，但要保证输出的内容是 utf-8 的格式</p>
<p>hotWords.php 的内容</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$s = <span class="string">&lt;&lt;&lt;'EOF'</span></div><div class="line">陈港生</div><div class="line">元楼</div><div class="line">蓝瘦</div><div class="line">EOF;</div><div class="line">header(<span class="string">'Last-Modified: '</span>.gmdate(<span class="string">'D, d M Y H:i:s'</span>, time()).<span class="string">' GMT'</span>, <span class="keyword">true</span>, <span class="number">200</span>);</div><div class="line">header(<span class="string">'ETag: "5816f349-19"'</span>);</div><div class="line"><span class="keyword">echo</span> $s;</div></pre></td></tr></table></figure>
<p>ik 接收两个返回的头部属性 Last-Modified 和 ETag，只要其中一个有变化，就会触发更新，ik 会每分钟获取一次<br>重启 Elasticsearch ，查看启动记录，看到了三个词已被加载进来</p>
<p>再次执行上面的请求，返回, 就可以看到 ik 分词器已经匹配到了 “陈港生” 这个词，同理一些关于我们公司的专有名字（例如：永辉、永辉超市、永辉云创、云创 …. ）也可以自己手动添加到字典中去。</p>
<h3 id="2、结巴中文分词"><a href="#2、结巴中文分词" class="headerlink" title="2、结巴中文分词"></a>2、结巴中文分词</h3><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1、支持三种分词模式：</p>
<ul>
<li><p>精确模式，试图将句子最精确地切开，适合文本分析；</p>
</li>
<li><p>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</p>
</li>
<li><p>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</p>
</li>
</ul>
<p>2、支持繁体分词</p>
<p>3、支持自定义词典</p>
<h3 id="3、THULAC"><a href="#3、THULAC" class="headerlink" title="3、THULAC"></a>3、THULAC</h3><p>THULAC（THU Lexical Analyzer for Chinese）由清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包，具有中文分词和词性标注功能。THULAC具有如下几个特点：</p>
<p>能力强。利用我们集成的目前世界上规模最大的人工分词和词性标注中文语料库（约含5800万字）训练而成，模型标注能力强大。</p>
<p>准确率高。该工具包在标准数据集Chinese Treebank（CTB5）上分词的F1值可达97.3％，词性标注的F1值可达到92.9％，与该数据集上最好方法效果相当。</p>
<p>速度较快。同时进行分词和词性标注速度为300KB/s，每秒可处理约15万字。只进行分词速度可达到1.3MB/s。</p>
<p>中文分词工具thulac4j发布</p>
<p>1、规范化分词词典，并去掉一些无用词；</p>
<p>2、重写DAT（双数组Trie树）的构造算法，生成的DAT size减少了8%左右，从而节省了内存；</p>
<p>3、优化分词算法，提高了分词速率。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.yizhiru<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thulac4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;thulac4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/en-heng/p/6526598.html" target="_blank" rel="external">http://www.cnblogs.com/en-heng/p/6526598.html</a></p>
<p>thulac4j支持两种分词模式：</p>
<p>SegOnly模式，只分词没有词性标注；</p>
<p>SegPos模式，分词兼有词性标注。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SegOnly mode</span></div><div class="line">String sentence = <span class="string">"滔滔的流水，向着波士顿湾无声逝去"</span>;</div><div class="line">SegOnly seg = <span class="keyword">new</span> SegOnly(<span class="string">"models/seg_only.bin"</span>);</div><div class="line">System.out.println(seg.segment(sentence));</div><div class="line"><span class="comment">// [滔滔, 的, 流水, ，, 向着, 波士顿湾, 无声, 逝去]</span></div><div class="line"></div><div class="line"><span class="comment">// SegPos mode</span></div><div class="line">SegPos pos = <span class="keyword">new</span> SegPos(<span class="string">"models/seg_pos.bin"</span>);</div><div class="line">System.out.println(pos.segment(sentence));</div><div class="line"><span class="comment">//[滔滔/a, 的/u, 流水/n, ，/w, 向着/p, 波士顿湾/ns, 无声/v, 逝去/v]</span></div></pre></td></tr></table></figure>
<h3 id="4、NLPIR"><a href="#4、NLPIR" class="headerlink" title="4、NLPIR"></a>4、NLPIR</h3><p>中科院计算所 NLPIR：<a href="http://ictclas.nlpir.org/nlpir/" target="_blank" rel="external">http://ictclas.nlpir.org/nlpir/</a>  (可直接在线分析中文)</p>
<p>下载地址：<a href="https://github.com/NLPIR-team/NLPIR" target="_blank" rel="external">https://github.com/NLPIR-team/NLPIR</a></p>
<p>中科院分词系统(NLPIR)JAVA简易教程: <a href="http://www.cnblogs.com/wukongjiuwo/p/4092480.html" target="_blank" rel="external">http://www.cnblogs.com/wukongjiuwo/p/4092480.html</a></p>
<h3 id="5、ansj分词器"><a href="#5、ansj分词器" class="headerlink" title="5、ansj分词器"></a>5、ansj分词器</h3><p><a href="https://github.com/NLPchina/ansj_seg" target="_blank" rel="external">https://github.com/NLPchina/ansj_seg</a></p>
<p>这是一个基于n-Gram+CRF+HMM的中文分词的java实现.</p>
<p>分词速度达到每秒钟大约200万字左右（mac air下测试），准确率能达到96%以上</p>
<p>目前实现了.中文分词. 中文姓名识别 .</p>
<p>用户自定义词典,关键字提取，自动摘要，关键字标记等功能<br>可以应用到自然语言处理等方面,适用于对分词效果要求高的各种项目.</p>
<p>maven 引入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ansj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ansj_seg<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>调用demo</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str = <span class="string">"欢迎使用ansj_seg,(ansj中文分词)在这里如果你遇到什么问题都可以联系我.我一定尽我所能.帮助大家.ansj_seg更快,更准,更自由!"</span> ;</div><div class="line"> System.out.println(ToAnalysis.parse(str));</div><div class="line"></div><div class="line"> 欢迎/v,使用/v,ansj/en,_,seg/en,,,(,ansj/en,中文/nz,分词/n,),在/p,这里/r,如果/c,你/r,遇到/v,什么/r,问题/n,都/d,可以/v,联系/v,我/r,./m,我/r,一定/d,尽我所能/l,./m,帮助/v,大家/r,./m,ansj/en,_,seg/en,更快/d,,,更/d,准/a,,,更/d,自由/a,!</div></pre></td></tr></table></figure>
<h3 id="6、哈工大的LTP"><a href="#6、哈工大的LTP" class="headerlink" title="6、哈工大的LTP"></a>6、哈工大的LTP</h3><p><a href="https://link.zhihu.com/?target=https%3A//github.com/HIT-SCIR/ltp" target="_blank" rel="external">https://link.zhihu.com/?target=https%3A//github.com/HIT-SCIR/ltp</a></p>
<p>LTP制定了基于XML的语言处理结果表示，并在此基础上提供了一整套自底向上的丰富而且高效的中文语言处理模块（包括词法、句法、语义等6项中文处理核心技术），以及基于动态链接库（Dynamic Link Library, DLL）的应用程序接口、可视化工具，并且能够以网络服务（Web Service）的形式进行使用。</p>
<p>关于LTP的使用，请参考:  <a href="http://ltp.readthedocs.io/zh_CN/latest/" target="_blank" rel="external">http://ltp.readthedocs.io/zh_CN/latest/</a></p>
<h3 id="7、庖丁解牛"><a href="#7、庖丁解牛" class="headerlink" title="7、庖丁解牛"></a>7、庖丁解牛</h3><p>下载地址：<a href="http://pan.baidu.com/s/1eQ88SZS" target="_blank" rel="external">http://pan.baidu.com/s/1eQ88SZS</a></p>
<p>使用分为如下几步：</p>
<ol>
<li><p>配置dic文件：<br>修改paoding-analysis.jar中的paoding-dic-home.properties文件，将“#paoding.dic.home=dic”的注释去掉，并配置成自己dic文件的本地存放路径。eg：/home/hadoop/work/paoding-analysis-2.0.4-beta/dic</p>
</li>
<li><p>把Jar包导入到项目中：<br>将paoding-analysis.jar、commons-logging.jar、lucene-analyzers-2.2.0.jar和lucene-core-2.2.0.jar四个包导入到项目中，这时就可以在代码片段中使用庖丁解牛工具提供的中文分词技术，例如：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Analyzer analyzer = <span class="keyword">new</span> PaodingAnalyzer(); <span class="comment">//定义一个解析器</span></div><div class="line">String text = <span class="string">"庖丁系统是个完全基于lucene的中文分词系统，它就是重新建了一个analyzer，叫做PaodingAnalyzer，这个analyer的核心任务就是生成一个可以切词TokenStream。"</span>; &lt;span style=<span class="string">"font-family: Arial, Helvetica, sans-serif;"</span>&gt;<span class="comment">//待分词的内容&lt;/span&gt;</span></div><div class="line">TokenStream tokenStream = analyzer.tokenStream(text, <span class="keyword">new</span> StringReader(text)); <span class="comment">//得到token序列的输出流</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    Token t;</div><div class="line">    <span class="keyword">while</span> ((t = tokenStream.next()) != <span class="keyword">null</span>)</div><div class="line">    &#123;</div><div class="line">           System.out.println(t); <span class="comment">//输出每个token</span></div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8、sogo在线分词"><a href="#8、sogo在线分词" class="headerlink" title="8、sogo在线分词"></a>8、sogo在线分词</h3><p>sogo在线分词采用了基于汉字标注的分词方法，主要使用了线性链链CRF（Linear-chain CRF）模型。词性标注模块主要基于结构化线性模型（Structured Linear Model）</p>
<p>在线使用地址为：<br><a href="http://www.sogou.com/labs/webservice/" target="_blank" rel="external">http://www.sogou.com/labs/webservice/</a></p>
<h3 id="9、word分词"><a href="#9、word分词" class="headerlink" title="9、word分词"></a>9、word分词</h3><p>地址： <a href="https://github.com/ysc/word" target="_blank" rel="external">https://github.com/ysc/word</a></p>
<p>word分词是一个Java实现的分布式的中文分词组件，提供了多种基于词典的分词算法，并利用ngram模型来消除歧义。能准确识别英文、数字，以及日期、时间等数量词，能识别人名、地名、组织机构名等未登录词。能通过自定义配置文件来改变组件行为，能自定义用户词库、自动检测词库变化、支持大规模分布式环境，能灵活指定多种分词算法，能使用refine功能灵活控制分词结果，还能使用词频统计、词性标注、同义标注、反义标注、拼音标注等功能。提供了10种分词算法，还提供了10种文本相似度算法，同时还无缝和Lucene、Solr、ElasticSearch、Luke集成。注意：word1.3需要JDK1.8</p>
<p>maven 中引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apdplat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>word<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>ElasticSearch插件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">1、打开命令行并切换到elasticsearch的bin目录</div><div class="line">cd elasticsearch-2.1.1/bin</div><div class="line"></div><div class="line">2、运行plugin脚本安装word分词插件：</div><div class="line">./plugin install http://apdplat.org/word/archive/v1.4.zip</div><div class="line"></div><div class="line">安装的时候注意：</div><div class="line">    如果提示：</div><div class="line">        ERROR: failed to download</div><div class="line">    或者</div><div class="line">        Failed to install word, reason: failed to download</div><div class="line">    或者</div><div class="line">        ERROR: incorrect hash (SHA1)</div><div class="line">    则重新再次运行命令，如果还是不行，多试两次</div><div class="line"></div><div class="line">如果是elasticsearch1.x系列版本，则使用如下命令：</div><div class="line">./plugin -u http://apdplat.org/word/archive/v1.3.1.zip -i word</div><div class="line"></div><div class="line">3、修改文件elasticsearch-2.1.1/config/elasticsearch.yml，新增如下配置：</div><div class="line">index.analysis.analyzer.default.type : &quot;word&quot;</div><div class="line">index.analysis.tokenizer.default.type : &quot;word&quot;</div><div class="line"></div><div class="line">4、启动ElasticSearch测试效果，在Chrome浏览器中访问：</div><div class="line">http://localhost:9200/_analyze?analyzer=word&amp;text=杨尚川是APDPlat应用级产品开发平台的作者</div><div class="line"></div><div class="line">5、自定义配置</div><div class="line">修改配置文件elasticsearch-2.1.1/plugins/word/word.local.conf</div><div class="line"></div><div class="line">6、指定分词算法</div><div class="line">修改文件elasticsearch-2.1.1/config/elasticsearch.yml，新增如下配置：</div><div class="line">index.analysis.analyzer.default.segAlgorithm : &quot;ReverseMinimumMatching&quot;</div><div class="line">index.analysis.tokenizer.default.segAlgorithm : &quot;ReverseMinimumMatching&quot;</div><div class="line"></div><div class="line">这里segAlgorithm可指定的值有：</div><div class="line">正向最大匹配算法：MaximumMatching</div><div class="line">逆向最大匹配算法：ReverseMaximumMatching</div><div class="line">正向最小匹配算法：MinimumMatching</div><div class="line">逆向最小匹配算法：ReverseMinimumMatching</div><div class="line">双向最大匹配算法：BidirectionalMaximumMatching</div><div class="line">双向最小匹配算法：BidirectionalMinimumMatching</div><div class="line">双向最大最小匹配算法：BidirectionalMaximumMinimumMatching</div><div class="line">全切分算法：FullSegmentation</div><div class="line">最少词数算法：MinimalWordCount</div><div class="line">最大Ngram分值算法：MaxNgramScore</div><div class="line">如不指定，默认使用双向最大匹配算法：BidirectionalMaximumMatching</div></pre></td></tr></table></figure>
<h3 id="10、jcseg分词器"><a href="#10、jcseg分词器" class="headerlink" title="10、jcseg分词器"></a>10、jcseg分词器</h3><p><a href="https://code.google.com/archive/p/jcseg/" target="_blank" rel="external">https://code.google.com/archive/p/jcseg/</a></p>
<h3 id="11、stanford分词器"><a href="#11、stanford分词器" class="headerlink" title="11、stanford分词器"></a>11、stanford分词器</h3><p>Stanford大学的一个开源分词工具，目前已支持汉语。</p>
<p>首先，去【1】下载Download Stanford Word Segmenter version 3.5.2，取得里面的 data 文件夹，放在maven project的 src/main/resources 里。</p>
<p>然后，maven依赖添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">corenlp.version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">corenlp.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;corenlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;corenlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>models<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>edu.stanford.nlp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stanford-corenlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;corenlp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>models-chinese<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">import</span> edu.stanford.nlp.ie.crf.CRFClassifier;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoreNLPSegment</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CoreNLPSegment instance;</div><div class="line">    <span class="keyword">private</span> CRFClassifier         classifier;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CoreNLPSegment</span><span class="params">()</span></span>&#123;</div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.setProperty(<span class="string">"sighanCorporaDict"</span>, <span class="string">"data"</span>);</div><div class="line">        props.setProperty(<span class="string">"serDictionary"</span>, <span class="string">"data/dict-chris6.ser.gz"</span>);</div><div class="line">        props.setProperty(<span class="string">"inputEncoding"</span>, <span class="string">"UTF-8"</span>);</div><div class="line">        props.setProperty(<span class="string">"sighanPostProcessing"</span>, <span class="string">"true"</span>);</div><div class="line">        classifier = <span class="keyword">new</span> CRFClassifier(props);</div><div class="line">        classifier.loadClassifierNoExceptions(<span class="string">"data/ctb.gz"</span>, props);</div><div class="line">        classifier.flags.setProperties(props);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoreNLPSegment <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> CoreNLPSegment();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String[] doSegment(String data) &#123;</div><div class="line">        <span class="keyword">return</span> (String[]) classifier.segmentString(data).toArray();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        String sentence = <span class="string">"他和我在学校里常打桌球。"</span>;</div><div class="line">        String ret[] = CoreNLPSegment.getInstance().doSegment(sentence);</div><div class="line">        <span class="keyword">for</span> (String str : ret) &#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>博客</strong>：</p>
<p><a href="https://blog.sectong.com/blog/corenlp_segment.html" target="_blank" rel="external">https://blog.sectong.com/blog/corenlp_segment.html</a></p>
<p><a href="http://blog.csdn.net/lightty/article/details/51766602" target="_blank" rel="external">http://blog.csdn.net/lightty/article/details/51766602</a></p>
<h3 id="12、Smartcn"><a href="#12、Smartcn" class="headerlink" title="12、Smartcn"></a>12、Smartcn</h3><p>Smartcn为Apache2.0协议的开源中文分词系统，Java语言编写，修改的中科院计算所ICTCLAS分词系统。很早以前看到Lucene上多了一个中文分词的contribution，当时只是简单的扫了一下.class文件的文件名，通过文件名可以看得出又是一个改的ICTCLAS的分词系统。</p>
<p><a href="http://lucene.apache.org/core/5_1_0/analyzers-smartcn/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.html" target="_blank" rel="external">http://lucene.apache.org/core/5_1_0/analyzers-smartcn/org/apache/lucene/analysis/cn/smart/SmartChineseAnalyzer.html</a></p>
<h3 id="13、pinyin-分词器"><a href="#13、pinyin-分词器" class="headerlink" title="13、pinyin 分词器"></a>13、pinyin 分词器</h3><p>pinyin分词器可以让用户输入拼音，就能查找到相关的关键词。比如在某个商城搜索中，输入 <code>yonghui</code>，就能匹配到  <code>永辉</code>。这样的体验还是非常好的。</p>
<p>pinyin分词器的安装与IK是一样的。下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p>
<p>一些参数请参考 GitHub 的 readme 文档。</p>
<p>这个分词器在1.8版本中，提供了两种分词规则：</p>
<ul>
<li><p>pinyin,就是普通的把汉字转换成拼音；</p>
</li>
<li><p>pinyin_first_letter，提取汉字的拼音首字母</p>
</li>
</ul>
<p>使用：</p>
<p>1.Create a index with custom pinyin analyzer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">curl -XPUT http://localhost:9200/medcl/ -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;index&quot; : &#123;</div><div class="line">        &quot;analysis&quot; : &#123;</div><div class="line">            &quot;analyzer&quot; : &#123;</div><div class="line">                &quot;pinyin_analyzer&quot; : &#123;</div><div class="line">                    &quot;tokenizer&quot; : &quot;my_pinyin&quot;</div><div class="line">                    &#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;tokenizer&quot; : &#123;</div><div class="line">                &quot;my_pinyin&quot; : &#123;</div><div class="line">                    &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                    &quot;keep_separate_first_letter&quot; : false,</div><div class="line">                    &quot;keep_full_pinyin&quot; : true,</div><div class="line">                    &quot;keep_original&quot; : true,</div><div class="line">                    &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                    &quot;lowercase&quot; : true,</div><div class="line">                    &quot;remove_duplicated_term&quot; : true</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>2.Test Analyzer, analyzing a chinese name, such as 刘德华</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:9200/medcl/_analyze?text=%e5%88%98%e5%be%b7%e5%8d%8e&amp;analyzer=pinyin_analyzer</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;liu&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 1,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;de&quot;,</div><div class="line">      &quot;start_offset&quot; : 1,</div><div class="line">      &quot;end_offset&quot; : 2,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;hua&quot;,</div><div class="line">      &quot;start_offset&quot; : 2,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;刘德华&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;ldh&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.Create mapping</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/medcl/folks/_mapping -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;folks&quot;: &#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">            &quot;name&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;keyword&quot;,</div><div class="line">                &quot;fields&quot;: &#123;</div><div class="line">                    &quot;pinyin&quot;: &#123;</div><div class="line">                        &quot;type&quot;: &quot;text&quot;,</div><div class="line">                        &quot;store&quot;: &quot;no&quot;,</div><div class="line">                        &quot;term_vector&quot;: &quot;with_offsets&quot;,</div><div class="line">                        &quot;analyzer&quot;: &quot;pinyin_analyzer&quot;,</div><div class="line">                        &quot;boost&quot;: 10</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>4.Indexing</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/medcl/folks/andy -d&apos;&#123;&quot;name&quot;:&quot;刘德华&quot;&#125;&apos;</div></pre></td></tr></table></figure>
<p>5.Let’s search</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://localhost:9200/medcl/folks/_search?q=name:%E5%88%98%E5%BE%B7%E5%8D%8E</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:%e5%88%98%e5%be%b7</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:liu</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:ldh</div><div class="line">curl http://localhost:9200/medcl/folks/_search?q=name.pinyin:de+hua</div></pre></td></tr></table></figure>
<p>6.Using Pinyin-TokenFilter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl -XPUT http://localhost:9200/medcl1/ -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;index&quot; : &#123;</div><div class="line">        &quot;analysis&quot; : &#123;</div><div class="line">            &quot;analyzer&quot; : &#123;</div><div class="line">                &quot;user_name_analyzer&quot; : &#123;</div><div class="line">                    &quot;tokenizer&quot; : &quot;whitespace&quot;,</div><div class="line">                    &quot;filter&quot; : &quot;pinyin_first_letter_and_full_pinyin_filter&quot;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &quot;filter&quot; : &#123;</div><div class="line">                &quot;pinyin_first_letter_and_full_pinyin_filter&quot; : &#123;</div><div class="line">                    &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                    &quot;keep_first_letter&quot; : true,</div><div class="line">                    &quot;keep_full_pinyin&quot; : false,</div><div class="line">                    &quot;keep_none_chinese&quot; : true,</div><div class="line">                    &quot;keep_original&quot; : false,</div><div class="line">                    &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                    &quot;lowercase&quot; : true,</div><div class="line">                    &quot;trim_whitespace&quot; : true,</div><div class="line">                    &quot;keep_none_chinese_in_first_letter&quot; : true</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>Token Test:刘德华 张学友 郭富城 黎明 四大天王</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET http://localhost:9200/medcl1/_analyze?text=%e5%88%98%e5%be%b7%e5%8d%8e+%e5%bc%a0%e5%ad%a6%e5%8f%8b+%e9%83%ad%e5%af%8c%e5%9f%8e+%e9%bb%8e%e6%98%8e+%e5%9b%9b%e5%a4%a7%e5%a4%a9%e7%8e%8b&amp;analyzer=user_name_analyzer</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;ldh&quot;,</div><div class="line">      &quot;start_offset&quot; : 0,</div><div class="line">      &quot;end_offset&quot; : 3,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 0</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;zxy&quot;,</div><div class="line">      &quot;start_offset&quot; : 4,</div><div class="line">      &quot;end_offset&quot; : 7,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;gfc&quot;,</div><div class="line">      &quot;start_offset&quot; : 8,</div><div class="line">      &quot;end_offset&quot; : 11,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;lm&quot;,</div><div class="line">      &quot;start_offset&quot; : 12,</div><div class="line">      &quot;end_offset&quot; : 14,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 3</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      &quot;token&quot; : &quot;sdtw&quot;,</div><div class="line">      &quot;start_offset&quot; : 15,</div><div class="line">      &quot;end_offset&quot; : 19,</div><div class="line">      &quot;type&quot; : &quot;word&quot;,</div><div class="line">      &quot;position&quot; : 4</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>7.Used in phrase query</p>
<p>(1)、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PUT /medcl/</div><div class="line"> &#123;</div><div class="line">     &quot;index&quot; : &#123;</div><div class="line">         &quot;analysis&quot; : &#123;</div><div class="line">             &quot;analyzer&quot; : &#123;</div><div class="line">                 &quot;pinyin_analyzer&quot; : &#123;</div><div class="line">                     &quot;tokenizer&quot; : &quot;my_pinyin&quot;</div><div class="line">                     &#125;</div><div class="line">             &#125;,</div><div class="line">             &quot;tokenizer&quot; : &#123;</div><div class="line">                 &quot;my_pinyin&quot; : &#123;</div><div class="line">                     &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                     &quot;keep_first_letter&quot;:false,</div><div class="line">                     &quot;keep_separate_first_letter&quot; : false,</div><div class="line">                     &quot;keep_full_pinyin&quot; : true,</div><div class="line">                     &quot;keep_original&quot; : false,</div><div class="line">                     &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                     &quot;lowercase&quot; : true</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> GET /medcl/folks/_search</div><div class="line"> &#123;</div><div class="line">   &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">     &quot;name.pinyin&quot;: &quot;刘德华&quot;</div><div class="line">   &#125;&#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>(2)、</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">PUT /medcl/</div><div class="line">  &#123;</div><div class="line">      &quot;index&quot; : &#123;</div><div class="line">          &quot;analysis&quot; : &#123;</div><div class="line">              &quot;analyzer&quot; : &#123;</div><div class="line">                  &quot;pinyin_analyzer&quot; : &#123;</div><div class="line">                      &quot;tokenizer&quot; : &quot;my_pinyin&quot;</div><div class="line">                      &#125;</div><div class="line">              &#125;,</div><div class="line">              &quot;tokenizer&quot; : &#123;</div><div class="line">                  &quot;my_pinyin&quot; : &#123;</div><div class="line">                      &quot;type&quot; : &quot;pinyin&quot;,</div><div class="line">                      &quot;keep_first_letter&quot;:false,</div><div class="line">                      &quot;keep_separate_first_letter&quot; : true,</div><div class="line">                      &quot;keep_full_pinyin&quot; : false,</div><div class="line">                      &quot;keep_original&quot; : false,</div><div class="line">                      &quot;limit_first_letter_length&quot; : 16,</div><div class="line">                      &quot;lowercase&quot; : true</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  POST /medcl/folks/andy</div><div class="line">  &#123;&quot;name&quot;:&quot;刘德华&quot;&#125;</div><div class="line"></div><div class="line">  GET /medcl/folks/_search</div><div class="line">  &#123;</div><div class="line">    &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;name.pinyin&quot;: &quot;刘德h&quot;</div><div class="line">    &#125;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  GET /medcl/folks/_search</div><div class="line">  &#123;</div><div class="line">    &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;name.pinyin&quot;: &quot;刘dh&quot;</div><div class="line">    &#125;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  GET /medcl/folks/_search</div><div class="line">  &#123;</div><div class="line">    &quot;query&quot;: &#123;&quot;match_phrase&quot;: &#123;</div><div class="line">      &quot;name.pinyin&quot;: &quot;dh&quot;</div><div class="line">    &#125;&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="14、Mmseg-分词器"><a href="#14、Mmseg-分词器" class="headerlink" title="14、Mmseg 分词器"></a>14、Mmseg 分词器</h3><p>也支持 Elasticsearch</p>
<p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-mmseg/releases" target="_blank" rel="external">https://github.com/medcl/elasticsearch-analysis-mmseg/releases</a>   根据对应的版本进行下载</p>
<p>如何使用：</p>
<p>1、创建索引：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT http://localhost:9200/index</div></pre></td></tr></table></figure>
<p>2、创建 mapping</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/index/fulltext/_mapping -d&apos;</div><div class="line">&#123;</div><div class="line">        &quot;properties&quot;: &#123;</div><div class="line">            &quot;content&quot;: &#123;</div><div class="line">                &quot;type&quot;: &quot;text&quot;,</div><div class="line">                &quot;term_vector&quot;: &quot;with_positions_offsets&quot;,</div><div class="line">                &quot;analyzer&quot;: &quot;mmseg_maxword&quot;,</div><div class="line">                &quot;search_analyzer&quot;: &quot;mmseg_maxword&quot;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure>
<p>3.Indexing some docs</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/index/fulltext/1 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;美国留给伊拉克的是个烂摊子吗&quot;&#125;</div><div class="line">&apos;</div><div class="line"></div><div class="line">curl -XPOST http://localhost:9200/index/fulltext/2 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;公安部：各地校车将享最高路权&quot;&#125;</div><div class="line">&apos;</div><div class="line"></div><div class="line">curl -XPOST http://localhost:9200/index/fulltext/3 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;&#125;</div><div class="line">&apos;</div><div class="line"></div><div class="line">curl -XPOST http://localhost:9200/index/fulltext/4 -d&apos;</div><div class="line">&#123;&quot;content&quot;:&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;&#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<p>4.Query with highlighting(查询高亮)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -XPOST http://localhost:9200/index/fulltext/_search  -d&apos;</div><div class="line">&#123;</div><div class="line">    &quot;query&quot; : &#123; &quot;term&quot; : &#123; &quot;content&quot; : &quot;中国&quot; &#125;&#125;,</div><div class="line">    &quot;highlight&quot; : &#123;</div><div class="line">        &quot;pre_tags&quot; : [&quot;&lt;tag1&gt;&quot;, &quot;&lt;tag2&gt;&quot;],</div><div class="line">        &quot;post_tags&quot; : [&quot;&lt;/tag1&gt;&quot;, &quot;&lt;/tag2&gt;&quot;],</div><div class="line">        &quot;fields&quot; : &#123;</div><div class="line">            &quot;content&quot; : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&apos;</div></pre></td></tr></table></figure>
<p>5、结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;took&quot;: 14,</div><div class="line">    &quot;timed_out&quot;: false,</div><div class="line">    &quot;_shards&quot;: &#123;</div><div class="line">        &quot;total&quot;: 5,</div><div class="line">        &quot;successful&quot;: 5,</div><div class="line">        &quot;failed&quot;: 0</div><div class="line">    &#125;,</div><div class="line">    &quot;hits&quot;: &#123;</div><div class="line">        &quot;total&quot;: 2,</div><div class="line">        &quot;max_score&quot;: 2,</div><div class="line">        &quot;hits&quot;: [</div><div class="line">            &#123;</div><div class="line">                &quot;_index&quot;: &quot;index&quot;,</div><div class="line">                &quot;_type&quot;: &quot;fulltext&quot;,</div><div class="line">                &quot;_id&quot;: &quot;4&quot;,</div><div class="line">                &quot;_score&quot;: 2,</div><div class="line">                &quot;_source&quot;: &#123;</div><div class="line">                    &quot;content&quot;: &quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;</div><div class="line">                &#125;,</div><div class="line">                &quot;highlight&quot;: &#123;</div><div class="line">                    &quot;content&quot;: [</div><div class="line">                        &quot;&lt;tag1&gt;中国&lt;/tag1&gt;驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首 &quot;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                &quot;_index&quot;: &quot;index&quot;,</div><div class="line">                &quot;_type&quot;: &quot;fulltext&quot;,</div><div class="line">                &quot;_id&quot;: &quot;3&quot;,</div><div class="line">                &quot;_score&quot;: 2,</div><div class="line">                &quot;_source&quot;: &#123;</div><div class="line">                    &quot;content&quot;: &quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;</div><div class="line">                &#125;,</div><div class="line">                &quot;highlight&quot;: &#123;</div><div class="line">                    &quot;content&quot;: [</div><div class="line">                        &quot;均每天扣1艘&lt;tag1&gt;中国&lt;/tag1&gt;渔船 &quot;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考博客：</p>
<p>为elastic添加中文分词: <a href="http://blog.csdn.net/dingzfang/article/details/42776693" target="_blank" rel="external">http://blog.csdn.net/dingzfang/article/details/42776693</a></p>
<h3 id="15、bosonnlp-（玻森数据中文分析器）"><a href="#15、bosonnlp-（玻森数据中文分析器）" class="headerlink" title="15、bosonnlp （玻森数据中文分析器）"></a>15、bosonnlp （玻森数据中文分析器）</h3><p>下载地址：<a href="https://github.com/bosondata/elasticsearch-analysis-bosonnlp" target="_blank" rel="external">https://github.com/bosondata/elasticsearch-analysis-bosonnlp</a></p>
<p>如何使用：</p>
<p>运行 ElasticSearch 之前需要在 config 文件夹中修改 elasticsearch.yml 来定义使用玻森中文分析器，并填写玻森 API_TOKEN 以及玻森分词 API 的地址，即在该文件结尾处添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      bosonnlp:</div><div class="line">          type: bosonnlp</div><div class="line">          API_URL: http://api.bosonnlp.com/tag/analysis</div><div class="line">          # You MUST give the API_TOKEN value, otherwise it doesn&apos;t work</div><div class="line">          API_TOKEN: *PUT YOUR API TOKEN HERE*</div><div class="line">          # Please uncomment if you want to specify ANY ONE of the following</div><div class="line">          # areguments, otherwise the DEFAULT value will be used, i.e.,</div><div class="line">          # space_mode is 0,</div><div class="line">          # oov_level is 3,</div><div class="line">          # t2s is 0,</div><div class="line">          # special_char_conv is 0.</div><div class="line">          # More detials can be found in bosonnlp docs:</div><div class="line">          # http://docs.bosonnlp.com/tag.html</div><div class="line">          #</div><div class="line">          #</div><div class="line">          # space_mode: put your value here(range from 0-3)</div><div class="line">          # oov_level: put your value here(range from 0-4)</div><div class="line">          # t2s: put your value here(range from 0-1)</div><div class="line">          # special_char_conv: put your value here(range from 0-1)</div></pre></td></tr></table></figure>
<p>需要注意的是</p>
<p>必须在 API_URL 填写给定的分词地址以及在API_TOKEN：<em>PUT YOUR API TOKEN HERE</em> 中填写给定的玻森数据API_TOKEN，否则无法使用玻森中文分析器。该 API_TOKEN 是注册玻森数据账号所获得。</p>
<p>如果配置文件中已经有配置过其他的 analyzer，请直接在 analyzer 下如上添加 bosonnlp analyzer。</p>
<p>如果有多个 node 并且都需要 BosonNLP 的分词插件，则每个 node 下的 yaml 文件都需要如上安装和设置。</p>
<p>另外，玻森中文分词还提供了4个参数（space_mode，oov_level，t2s，special_char_conv）可满足不同的分词需求。如果取默认值，则无需任何修改；否则，可取消对应参数的注释并赋值。</p>
<p><strong>测试：</strong></p>
<p>建立 index</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XPUT &apos;localhost:9200/test&apos;</div></pre></td></tr></table></figure>
<p>测试分析器是否配置成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -XGET &apos;localhost:9200/test/_analyze?analyzer=bosonnlp&amp;pretty&apos; -d &apos;这是玻森数据分词的测试&apos;</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [ &#123;</div><div class="line">    &quot;token&quot; : &quot;这&quot;,</div><div class="line">    &quot;start_offset&quot; : 0,</div><div class="line">    &quot;end_offset&quot; : 1,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 0</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;是&quot;,</div><div class="line">    &quot;start_offset&quot; : 1,</div><div class="line">    &quot;end_offset&quot; : 2,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 1</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;玻森&quot;,</div><div class="line">    &quot;start_offset&quot; : 2,</div><div class="line">    &quot;end_offset&quot; : 4,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 2</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;数据&quot;,</div><div class="line">    &quot;start_offset&quot; : 4,</div><div class="line">    &quot;end_offset&quot; : 6,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 3</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;分词&quot;,</div><div class="line">    &quot;start_offset&quot; : 6,</div><div class="line">    &quot;end_offset&quot; : 8,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 4</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;的&quot;,</div><div class="line">    &quot;start_offset&quot; : 8,</div><div class="line">    &quot;end_offset&quot; : 9,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 5</div><div class="line">  &#125;, &#123;</div><div class="line">    &quot;token&quot; : &quot;测试&quot;,</div><div class="line">    &quot;start_offset&quot; : 9,</div><div class="line">    &quot;end_offset&quot; : 11,</div><div class="line">    &quot;type&quot; : &quot;word&quot;,</div><div class="line">    &quot;position&quot; : 6</div><div class="line">  &#125; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置 Token Filter</p>
<p>现有的 BosonNLP 分析器没有内置 token filter，如果有过滤 Token 的需求，可以利用 BosonNLP Tokenizer 和 ES 提供的 token filter 搭建定制分析器。</p>
<p>步骤</p>
<p>配置定制的 analyzer 有以下三个步骤：</p>
<p>添加 BosonNLP tokenizer<br>在 elasticsearch.yml 文件中 analysis 下添加 tokenizer， 并在 tokenizer 中添加 BosonNLP tokenizer 的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      ...</div><div class="line">    tokenizer:</div><div class="line">      bosonnlp:</div><div class="line">          type: bosonnlp</div><div class="line">          API_URL: http://api.bosonnlp.com/tag/analysis</div><div class="line">          # You MUST give the API_TOKEN value, otherwise it doesn&apos;t work</div><div class="line">          API_TOKEN: *PUT YOUR API TOKEN HERE*</div><div class="line">          # Please uncomment if you want to specify ANY ONE of the following</div><div class="line">          # areguments, otherwise the DEFAULT value will be used, i.e.,</div><div class="line">          # space_mode is 0,</div><div class="line">          # oov_level is 3,</div><div class="line">          # t2s is 0,</div><div class="line">          # special_char_conv is 0.</div><div class="line">          # More detials can be found in bosonnlp docs:</div><div class="line">          # http://docs.bosonnlp.com/tag.html</div><div class="line">          #</div><div class="line">          #</div><div class="line">          # space_mode: put your value here(range from 0-3)</div><div class="line">          # oov_level: put your value here(range from 0-4)</div><div class="line">          # t2s: put your value here(range from 0-1)</div><div class="line">          # special_char_conv: put your value here(range from 0-1)</div></pre></td></tr></table></figure>
<p>添加 token filter</p>
<p>在 elasticsearch.yml 文件中 analysis 下添加 filter， 并在 filter 中添加所需 filter 的配置（下面例子中，我们以 lowercase filter 为例）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      ...</div><div class="line">    tokenizer:</div><div class="line">      ...</div><div class="line">    filter:</div><div class="line">      lowercase:</div><div class="line">          type: lowercase</div></pre></td></tr></table></figure>
<p>添加定制的 analyzer</p>
<p>在 elasticsearch.yml 文件中 analysis 下添加 analyzer， 并在 analyzer 中添加定制的 analyzer 的配置（下面例子中，我们把定制的 analyzer 命名为 filter_bosonnlp）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">index:</div><div class="line">  analysis:</div><div class="line">    analyzer:</div><div class="line">      ...</div><div class="line">      filter_bosonnlp:</div><div class="line">          type: custom</div><div class="line">          tokenizer: bosonnlp</div><div class="line">          filter: [lowercase]</div></pre></td></tr></table></figure>
<hr>
<h2 id="自定义分词器"><a href="#自定义分词器" class="headerlink" title="自定义分词器"></a>自定义分词器</h2><p>虽然Elasticsearch带有一些现成的分析器，然而在分析器上Elasticsearch真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。</p>
<p><strong>字符过滤器</strong>：</p>
<p>字符过滤器 用来 整理 一个尚未被分词的字符串。例如，如果我们的文本是HTML格式的，它会包含像 <code>&lt;p&gt;</code> 或者 <code>&lt;div&gt;</code> 这样的HTML标签，这些标签是我们不想索引的。我们可以使用 html清除 字符过滤器 来移除掉所有的HTML标签，并且像把 <code>&amp;Aacute;</code> 转换为相对应的Unicode字符 Á 这样，转换HTML实体。</p>
<p>一个分析器可能有0个或者多个字符过滤器。</p>
<p><strong>分词器</strong>:</p>
<p>一个分析器 必须 有一个唯一的分词器。 分词器把字符串分解成单个词条或者词汇单元。 标准 分析器里使用的 标准 分词器 把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p>
<p><strong>词单元过滤器</strong>:</p>
<p>经过分词，作为结果的 词单元流 会按照指定的顺序通过指定的词单元过滤器 。</p>
<p>词单元过滤器可以修改、添加或者移除词单元。我们已经提到过 lowercase 和 stop 词过滤器 ，但是在 Elasticsearch 里面还有很多可供选择的词单元过滤器。 词干过滤器 把单词 遏制 为 词干。 ascii_folding 过滤器移除变音符，把一个像 “très” 这样的词转换为 “tres” 。 ngram 和 edge_ngram 词单元过滤器 可以产生 适合用于部分匹配或者自动补全的词单元。</p>
<h3 id="创建一个自定义分析器"><a href="#创建一个自定义分析器" class="headerlink" title="创建一个自定义分析器"></a>创建一个自定义分析器</h3><p>我们可以在 analysis 下的相应位置设置字符过滤器、分词器和词单元过滤器:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PUT /my_index</div><div class="line">&#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">        &quot;analysis&quot;: &#123;</div><div class="line">            &quot;char_filter&quot;: &#123; ... custom character filters ... &#125;,</div><div class="line">            &quot;tokenizer&quot;:   &#123; ...    custom tokenizers     ... &#125;,</div><div class="line">            &quot;filter&quot;:      &#123; ...   custom token filters   ... &#125;,</div><div class="line">            &quot;analyzer&quot;:    &#123; ...    custom analyzers      ... &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个分析器可以做到下面的这些事:</p>
<p>1、使用 html清除 字符过滤器移除HTML部分。</p>
<p>2、使用一个自定义的 映射 字符过滤器把 &amp; 替换为 “和” ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;char_filter&quot;: &#123;</div><div class="line">    &quot;&amp;_to_and&quot;: &#123;</div><div class="line">        &quot;type&quot;:       &quot;mapping&quot;,</div><div class="line">        &quot;mappings&quot;: [ &quot;&amp;=&gt; and &quot;]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、使用 标准 分词器分词。</p>
<p>4、小写词条，使用 小写 词过滤器处理。</p>
<p>5、使用自定义 停止 词过滤器移除自定义的停止词列表中包含的词：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;filter&quot;: &#123;</div><div class="line">    &quot;my_stopwords&quot;: &#123;</div><div class="line">        &quot;type&quot;:        &quot;stop&quot;,</div><div class="line">        &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们的分析器定义用我们之前已经设置好的自定义过滤器组合了已经定义好的分词器和过滤器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;analyzer&quot;: &#123;</div><div class="line">    &quot;my_analyzer&quot;: &#123;</div><div class="line">        &quot;type&quot;:           &quot;custom&quot;,</div><div class="line">        &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</div><div class="line">        &quot;tokenizer&quot;:      &quot;standard&quot;,</div><div class="line">        &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>汇总起来，完整的 创建索引 请求 看起来应该像这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">PUT /my_index</div><div class="line">&#123;</div><div class="line">    &quot;settings&quot;: &#123;</div><div class="line">        &quot;analysis&quot;: &#123;</div><div class="line">            &quot;char_filter&quot;: &#123;</div><div class="line">                &quot;&amp;_to_and&quot;: &#123;</div><div class="line">                    &quot;type&quot;:       &quot;mapping&quot;,</div><div class="line">                    &quot;mappings&quot;: [ &quot;&amp;=&gt; and &quot;]</div><div class="line">            &#125;&#125;,</div><div class="line">            &quot;filter&quot;: &#123;</div><div class="line">                &quot;my_stopwords&quot;: &#123;</div><div class="line">                    &quot;type&quot;:       &quot;stop&quot;,</div><div class="line">                    &quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</div><div class="line">            &#125;&#125;,</div><div class="line">            &quot;analyzer&quot;: &#123;</div><div class="line">                &quot;my_analyzer&quot;: &#123;</div><div class="line">                    &quot;type&quot;:         &quot;custom&quot;,</div><div class="line">                    &quot;char_filter&quot;:  [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</div><div class="line">                    &quot;tokenizer&quot;:    &quot;standard&quot;,</div><div class="line">                    &quot;filter&quot;:       [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</div><div class="line">            &#125;&#125;</div><div class="line">&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>索引被创建以后，使用 analyze API 来 测试这个新的分析器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GET /my_index/_analyze?analyzer=my_analyzer</div><div class="line">The quick &amp; brown fox</div></pre></td></tr></table></figure>
<p>下面的缩略结果展示出我们的分析器正在正确地运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;tokens&quot; : [</div><div class="line">      &#123; &quot;token&quot; :   &quot;quick&quot;,    &quot;position&quot; : 2 &#125;,</div><div class="line">      &#123; &quot;token&quot; :   &quot;and&quot;,      &quot;position&quot; : 3 &#125;,</div><div class="line">      &#123; &quot;token&quot; :   &quot;brown&quot;,    &quot;position&quot; : 4 &#125;,</div><div class="line">      &#123; &quot;token&quot; :   &quot;fox&quot;,      &quot;position&quot; : 5 &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个分析器现在是没有多大用处的，除非我们告诉 Elasticsearch在哪里用上它。我们可以像下面这样把这个分析器应用在一个 string 字段上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PUT /my_index/_mapping/my_type</div><div class="line">&#123;</div><div class="line">    &quot;properties&quot;: &#123;</div><div class="line">        &quot;title&quot;: &#123;</div><div class="line">            &quot;type&quot;:      &quot;string&quot;,</div><div class="line">            &quot;analyzer&quot;:  &quot;my_analyzer&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>整理参考网上资料，如有不正确的地方还请多多指教！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍：ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。设计用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。&lt;/p&gt;
&lt;p&gt;Elasticsearch中，内置了很多分词器（analyzers）。下面来进行比较下系统默认分词器和常用的中文分词器之间的区别。&lt;br&gt;
    
    </summary>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>那些年我看过的书 —— 致敬我的大学生活 —— Say Good Bye ！</title>
    <link href="http://yoursite.com/2017/08/26/recommend-books/"/>
    <id>http://yoursite.com/2017/08/26/recommend-books/</id>
    <published>2017-08-26T05:38:47.267Z</published>
    <updated>2017-08-28T13:59:39.113Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ohfk1r827.bkt.clouddn.com/learn-2004897_960_720.png-1" alt=""><br><a id="more"></a></p>
<h3 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h3><p>2017.08.21  正式开启我入职的里程，现在已是工作了一个星期了，这个星期算是我入职的过渡期，算是知道了学校生活和工作的差距了，总之，尽快习惯这种生活吧。下面讲下自己的找工作经历和大学阅读的书籍，算是一种书籍推荐，为还在迷茫的你指引方向，同时为我三年的大学生活致敬！也激励我大四在公司实习能更上一层楼！</p>
<h3 id="找工作经历"><a href="#找工作经历" class="headerlink" title="找工作经历"></a>找工作经历</h3><p>这段经历，算是自己很难忘记的经历吧。既辛酸既充实的日子！也很感谢自己在这段时间的系统复习，感觉把自己的基础知识再次聚集在一起了，自己的能力在这一段时间提升的也很快。后面有机会的话我也想写一系列的相关文章，为后来准备工作（面试）的同学提供一些自己的帮助。自己在找工作的这段时间面过的公司也有几家大厂，但是结果都不是很好，对我自己有很大的压力，当时心里真的感觉 ：“自己真的有这么差”，为什么一直被拒，当时很怀疑自己的能力，自己也有总结原因。一是面试的时候自己准备的还不够充分，虽说自己脑子里对这些基础有点印象，但是面试的时候自己稍紧张下就描述不怎么清楚了，导致面试官觉得你可能广度够了，深度还不够（这是阿里面试官电话面试说的）；二是自己的表达能力还是有所欠缺，不能够将自己所要表达的东西说出来，这可能我要在后面加强的地方；三是我的学校问题。在面了几家公司失败后，终于面了家公司要我了，我也确定在这家公司了。很幸运，刚出来，就有一个很好（很负责）的架构师带我，这周就给了我一个很牛逼的项目给我看（虽然自己目前还没有思路改里面的代码），里面新东西很多，说吃透了这个项目，以后绝对可以拿出去吹逼（一脸正经.jpg）。目前我的找工作经历就简短的介绍到这里了，如果感兴趣的话，可以加群：528776268   进来和我讨论交流。</p>
<h3 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h3><p>大学，我不怎么喜欢玩游戏，自己也还算不怎么堕落吧，看了以下的一些书籍，算是对我后面写博客、找工作也有很大的帮助。如果你是大神，请忽略，如果你还是还在大学，和我一样不想把时间浪费在游戏上，可以看看我推荐的一些书籍，有想讨论的请在评论下留下你的评论或者加上面给的群号。</p>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>1、《Java 核心技术》卷一 、卷二              两本书，算是入门比较好的书籍了</p>
<p>2、《疯狂 Java 讲义》                                很厚的一本书，里面的内容也是很注重基础了</p>
<p>3、《Java 并发编程的艺术》——  方腾飞 、魏鹏、程晓明著        方腾飞 是并发编程网的创始人，里面的文章确实还不错，可以多看看里面的文章，收获绝对很大。</p>
<p>4、《 Java多线程编程核心技术》——  高洪岩著   这本书也算是入门多线程编程的不错书籍，我之前还写了一篇读书笔记呢，<a href="http://www.54tianzhisheng.cn/2017/06/04/Java-Thread/" target="_blank" rel="external">《Java 多线程编程核心技术》学习笔记及总结</a>  , 大家如果不想看书的可以去看我的笔记。</p>
<p>5、《Java 并发编程实战》 这本书讲的有点难懂啊，不过确实也是一本很好的书，以上三本书籍如果都弄懂了，我觉得你并发编程这块可能大概就 OK 了，然后再去看看线程池的源码，了解下线程池，我觉得那就更棒了。不想看的话，请看我的博客：<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="external">Java 线程池艺术探索</a>  我个人觉得还是写的很不错，那些大厂面试也几乎都会问线程池的东西，然后大概内容也就是我这博客写的</p>
<p>6、《Effective Java》中文版 第二版       算是 Java 的进阶书籍了，面试好多问题也是从这出来的</p>
<p>7、《深入理解 Java 虚拟机——JVM高级特性与最佳实践》第二版     这算是国内讲 JVM 最清楚的书了吧，目前还是只看了一遍，后面继续啃，大厂面试几乎也是都会考 JVM 的，阿里面 JVM 特别多，想进阿里的同学请一定要买这本书去看。</p>
<p>8、《深入分析Java  Web技术内幕  修订版》许令波著   里面知识很广，每一章都是一个不同的知识，可见作者的优秀，不愧是阿里大神。</p>
<p>9、《大型网站系统与 Java 中间件实践》—— 曽宪杰 著    作者是前淘宝技术总监，见证了淘宝网的发展，里面的讲的内容也是很好，看完能让自己也站在高处去思考问题。</p>
<p>10、《大型网站技术架构 —— 核心原理与案例分析》 —— 李智慧 著   最好和上面那本书籍一起看，效果更好，两本看完了，提升思想的高度！</p>
<p>11、《疯狂Java.突破程序员基本功的16课》 李刚 著       书中很注重 Java 的一些细节，讲的很深入，但是书中的错别字特多，可以看看我的读书笔记：<a href="http://www.54tianzhisheng.cn/2017/05/31/Java-16-lession/" target="_blank" rel="external">《疯狂 Java 突破程序员基本功的 16 课》读书笔记</a></p>
<p>12、《Spring 实战》   Spring 入门书籍</p>
<p>13、《Spring 揭秘》—— 王福强  著   这本书别提多牛了，出版时期为 2009 年，豆瓣评分为 9.0 分，写的是真棒！把 Spring 的 IOC 和 AOP 特性写的很清楚，把 Spring 的来龙去脉讲的很全。墙裂推荐这本书籍，如果你想看 Spring，作者很牛，资深架构师，很有幸和作者有过一次交流，当时因为自己的一篇博客  <a href="http://www.54tianzhisheng.cn/2017/03/27/Pyspider%E6%A1%86%E6%9E%B6%20%E2%80%94%E2%80%94%20Python%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E4%B9%8B%E7%88%AC%E5%8F%96%20V2EX%20%E7%BD%91%E7%AB%99%E5%B8%96%E5%AD%90/" target="_blank" rel="external">Pyspider框架 —— Python爬虫实战之爬取 V2EX 网站帖子</a>，竟然找到我想叫我去实习，可惜了，当时差点就跟着他混了。作者还有一本书  《Spring Boot 揭秘》。</p>
<p>14、《Spring 技术内幕》—— 深入解析 Spring 架构与设计原理     讲解 Spring 源码，深入了内部机制，个人觉得还是不错的。</p>
<p>15、Spring 官方的英文文档          这个别提了，很好，能看英文尽量看英文</p>
<p>16、《跟开涛学 Spring 3》  《跟开涛学 Spring MVC》  京东大神，膜</p>
<p>17、《看透springMvc源代码分析与实践》    算是把 Spring MVC 源码讲的很好的了</p>
<p>见我的笔记：</p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">1、通过源码详解 Servlet</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC01/" target="_blank" rel="external">2 、看透 Spring MVC 源代码分析与实践 —— 网站基础知识</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/14/Spring-MVC02/" target="_blank" rel="external">3 、看透 Spring MVC 源代码分析与实践 —— 俯视 Spring MVC</a></p>
<p><a href="http://www.54tianzhisheng.cn/2017/07/21/Spring-MVC03/" target="_blank" rel="external">4 、看透 Spring MVC 源代码分析与实践 —— Spring MVC 组件分析</a></p>
<p>18、《Spring Boot 实战》</p>
<p>19、Spring Boot 官方 Reference Guide        网上好多写 SpringBoot 的博客，几乎和这个差不多。</p>
<p>20、《JavaEE开发的颠覆者: Spring Boot实战》</p>
<p>21、MyBatis 当然是官方的文档最好了，而且还是中文的。</p>
<p>自己也写过几篇文章，帮助过很多人入门，传送门：</p>
<p>1、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%80" target="_blank" rel="external">通过项目逐步深入了解Mybatis（一）</a>/)</p>
<p>2、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%BA%8C" target="_blank" rel="external">通过项目逐步深入了解Mybatis（二）</a>/)</p>
<p>3、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E4%B8%89" target="_blank" rel="external">通过项目逐步深入了解Mybatis（三）</a>/)</p>
<p>4、<a href="http://www.54tianzhisheng.cn/2017/03/28/%E9%80%9A%E8%BF%87%E9%A1%B9%E7%9B%AE%E9%80%90%E6%AD%A5%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3Mybatis(%E5%9B%9B" target="_blank" rel="external">通过项目逐步深入了解Mybatis（四）</a>/)</p>
<p>22、《深入理解 Java 内存模型》—— 程晓明 著      我觉得每个 Java 程序员都应该了解下 Java 的内存模型，该书籍我看的是电子版的，不多，但是讲的却很清楚，把重排序、顺序一致性、Volatile、锁、final等写的很清楚。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>《鸟哥的Linux私房菜 基础学习篇(第三版)  》</p>
<p>鸟哥的Linux私房菜：服务器架设篇(第3版)    鸟哥的书</p>
<h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><p>《计算机网络第六版——谢希仁 编》</p>
<p>《计算机网络自顶向下方法》</p>
<h4 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h4><p>《代码揭秘：从C／C.的角度探秘计算机系统 —— 左飞》</p>
<p>《深入理解计算机系统》</p>
<p>《计算机科学导论_佛罗赞》</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>《高性能MySQL》</p>
<p>《Mysql技术内幕InnoDB存储引擎》</p>
<h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>这门语言语法很简单，上手快，不过我目前好久没用了，都忘得差不多了。当时是看的廖雪峰的 Python 博客</p>
<p>自己也用 Python 做爬虫写过几篇博客，不过有些是在前人的基础上写的。感谢那些栽树的人！</p>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>Git   ： 廖雪峰的 Git 教程</p>
<p>IDEA：<a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial" target="_blank" rel="external">IntelliJ IDEA 简体中文专题教程</a></p>
<p>Maven：《Maven实战》</p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>《如何高效学习-斯科特杨》   教你怎样高效学习的</p>
<p>《软技能：代码之外的生存指南》    程序员除了写代码，还得懂点其他的软技能。</p>
<p>《提问的智慧“中文版”》</p>
<p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way" target="_blank" rel="external">《How-To-Ask-Questions-The-Smart-Way》</a>   作为程序员的你，一定要学会咋提问，不然别人都不想鸟你。</p>
<h3 id="优秀网站推荐"><a href="#优秀网站推荐" class="headerlink" title="优秀网站推荐"></a>优秀网站推荐</h3><p>1、GitHub     别和我说不知道</p>
<p>2、InfoQ        文章很不错</p>
<p>3、CSDN    经常看博客专家的博客，里面大牛很多，传送门：<a href="http://blog.csdn.net/tzs_1041218129" target="_blank" rel="external">zhisheng</a></p>
<p>4、知乎         多关注些大牛，看他们吹逼</p>
<p>5、掘金        自己也在上面写专栏，粉丝已经超过一万了，传送门 ：<a href="https://juejin.im/user/57510b82128fe10056ca70fc" target="_blank" rel="external">zhisheng</a></p>
<p>6、并发编程网    前面已经介绍</p>
<p>7、developerworks     上面的博客也很好</p>
<p>8、博客园        里面应该大牛也很多，不过自己没在上面写过博客</p>
<p>9、微信公众号    关注了很多人，有些人的文章确实很好。</p>
<p>10、牛客网        刷笔试题不错的地方，里面大牛超多，怀念叶神和左神讲课的时候，还有很有爱的牛妹。</p>
<p>11、优秀博主的博客地址了</p>
<h3 id="优秀博客推荐"><a href="#优秀博客推荐" class="headerlink" title="优秀博客推荐"></a>优秀博客推荐</h3><p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">廖雪峰</a>  Git 和 Python 入门文章就是从他博客看的</p>
<p><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">阮一峰的网络日志</a></p>
<p><a href="https://coolshell.cn/" target="_blank" rel="external">酷壳-陈皓</a></p>
<p><a href="https://www.zhihu.com/people/rednaxelafx/answers" target="_blank" rel="external">RednaxelaFX</a>   R大，牛逼的不得了</p>
<p><a href="http://calvin1978.blogcn.com/" target="_blank" rel="external">江南白衣</a>      老司机</p>
<p><a href="http://stormzhang.com/" target="_blank" rel="external">stormzhang</a>     人称帅逼张，微信公众号写的不错</p>
<p><a href="http://lovestblog.cn/" target="_blank" rel="external">你假笨</a>    阿里搞 JVM 的，很厉害</p>
<p><a href="http://www.jianshu.com/u/90ab66c248e6" target="_blank" rel="external">占小狼</a></p>
<p><a href="http://www.bysocket.com/" target="_blank" rel="external">泥瓦匠BYSocket</a></p>
<p><a href="http://cuiqingcai.com/" target="_blank" rel="external">崔庆才</a>   写了好多 Python 爬虫相关的文章</p>
<p><a href="http://www.ityouknow.com/" target="_blank" rel="external">纯洁的微笑</a>    SpringBoot 系列不错，其他的文章自己看了感觉是自己喜欢的那种文笔</p>
<p><a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a></p>
<p><a href="http://itmuch.com/" target="_blank" rel="external">周立</a></p>
<p><a href="https://www.yunai.me/" target="_blank" rel="external">芋艿V的博客</a>     好多系列的源码分析</p>
<p><a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">zhisheng</a>       这个是我不要脸，竟然把自己博客地址的写上去了</p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>送一句话，<strong>越努力，越幸运，祝早日成为大神！</strong></p>
<hr>
<p>这些地方可以找到我：</p>
<ul>
<li>blog:  <a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">http://www.54tianzhisheng.cn/</a></li>
<li>GitHub: <a href="https://github.com/zhisheng17" target="_blank" rel="external">https://github.com/zhisheng17</a></li>
<li>QQ 群：528776268</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/learn-2004897_960_720.png-1&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.10 安装 Nginx</title>
    <link href="http://yoursite.com/2017/08/18/Ubuntu-install-Nginx/"/>
    <id>http://yoursite.com/2017/08/18/Ubuntu-install-Nginx/</id>
    <published>2017-08-18T05:52:20.764Z</published>
    <updated>2017-08-18T06:02:34.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Nginx-依赖库"><a href="#安装-Nginx-依赖库" class="headerlink" title="安装 Nginx 依赖库"></a>安装 Nginx 依赖库</h2><h3 id="安装-gcc-g-的依赖库"><a href="#安装-gcc-g-的依赖库" class="headerlink" title="安装 gcc g++ 的依赖库"></a>安装 gcc g++ 的依赖库</h3><p>Ubuntu 平台使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apt-get install build-essential</div><div class="line">apt-get install libtool</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>CentOS 平台使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">centos平台编译环境使用如下指令</div><div class="line">安装make：</div><div class="line">yum -y install gcc automake autoconf libtool make</div><div class="line">安装g++:</div><div class="line">yum install gcc gcc-c++</div></pre></td></tr></table></figure>
<h3 id="安装-pcre-依赖库"><a href="#安装-pcre-依赖库" class="headerlink" title="安装 pcre 依赖库"></a>安装 pcre 依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install libpcre3 libpcre3-dev</div></pre></td></tr></table></figure>
<h3 id="安装-zlib-依赖库"><a href="#安装-zlib-依赖库" class="headerlink" title="安装 zlib 依赖库"></a>安装 zlib 依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install zlib1g-dev</div></pre></td></tr></table></figure>
<h3 id="安装-ssl-依赖库"><a href="#安装-ssl-依赖库" class="headerlink" title="安装 ssl 依赖库"></a>安装 ssl 依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apt-get install openssl</div></pre></td></tr></table></figure>
<h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>在网上下载了 nginx-1.8.1.tar.gz 版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#解压：</div><div class="line">tar -zxvf  nginx-1.8.1.tar.gz</div><div class="line">#进入解压目录：</div><div class="line">cd nginx-1.8.1</div><div class="line">#配置：</div><div class="line">./configure --prefix=/usr/local/nginx</div><div class="line">#编辑nginx：</div><div class="line">make</div><div class="line">注意：这里可能会报错，提示“pcre.h No such file or directory”,具体详见：http://stackoverflow.com/questions/22555561/error-building-fatal-error-pcre-h-no-such-file-or-directory</div><div class="line">需要安装 libpcre3-dev,命令为：sudo apt-get install libpcre3-dev</div><div class="line">#安装nginx：</div><div class="line">sudo make install</div><div class="line">#启动nginx：</div><div class="line">sudo /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div><div class="line">注意：-c 指定配置文件的路径，不加的话，nginx会自动加载默认路径的配置文件，可以通过 -h查看帮助命令。</div><div class="line">#查看nginx进程：</div><div class="line">ps -ef|grep nginx</div></pre></td></tr></table></figure>
<h2 id="Nginx-常用命令"><a href="#Nginx-常用命令" class="headerlink" title="Nginx 常用命令"></a>Nginx 常用命令</h2><h3 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h3><p>切换到 /usr/local/nginx/sbin/ 目录下，执行命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx</div></pre></td></tr></table></figure>
<p>查看效果：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/nginx.jpg-1" alt="nginx"></p>
<h3 id="停止-Nginx"><a href="#停止-Nginx" class="headerlink" title="停止 Nginx"></a>停止 Nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./nginx -s stop</div><div class="line">./nginx -s quit</div></pre></td></tr></table></figure>
<p>-s 都是采用向 Nginx 发送信号的方式。</p>
<h3 id="Nginx-重新加载配置文件"><a href="#Nginx-重新加载配置文件" class="headerlink" title="Nginx 重新加载配置文件"></a>Nginx 重新加载配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -s reload</div></pre></td></tr></table></figure>
<h3 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -c /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<p>-c 表示 configuration，指定配置文件</p>
<h3 id="查看-Nginx-版本"><a href="#查看-Nginx-版本" class="headerlink" title="查看 Nginx 版本"></a>查看 Nginx 版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./nginx -v  //查看 Nginx 版本信息的参数</div><div class="line">./nginx -V  //查看 Nginx 详细的版本信息</div></pre></td></tr></table></figure>
<h3 id="检查配置文件是否正确"><a href="#检查配置文件是否正确" class="headerlink" title="检查配置文件是否正确"></a>检查配置文件是否正确</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./nginx -t</div></pre></td></tr></table></figure>
<p>如果出现测试失败，表示没有访问错误日志文件和进程，可以 sudo  一下。配置正确的话会有相关的提示。</p>
<h3 id="显示帮助信息"><a href="#显示帮助信息" class="headerlink" title="显示帮助信息"></a>显示帮助信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./nginx -h</div><div class="line">或者</div><div class="line">./nginx -?</div></pre></td></tr></table></figure>
<h2 id="Nginx-的特点和应用场合"><a href="#Nginx-的特点和应用场合" class="headerlink" title="Nginx 的特点和应用场合"></a>Nginx 的特点和应用场合</h2><p>见文章：<a href="http://www.54tianzhisheng.cn/2017/08/05/Nginx/" target="_blank" rel="external">Nginx 基本知识快速入门</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>文章首发地址：<a href="http://www.54tianzhisheng.cn" target="_blank" rel="external">zhisheng的博客</a> ，转载请注明地址 <a href="http://www.54tianzhisheng.cn/2017/08/18/Ubuntu-install-Nginx/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/08/18/Ubuntu-install-Nginx/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-Nginx-依赖库&quot;&gt;&lt;a href=&quot;#安装-Nginx-依赖库&quot; class=&quot;headerlink&quot; title=&quot;安装 Nginx 依赖库&quot;&gt;&lt;/a&gt;安装 Nginx 依赖库&lt;/h2&gt;&lt;h3 id=&quot;安装-gcc-g-的依赖库&quot;&gt;&lt;a href=&quot;#安装-gcc-g-的依赖库&quot; class=&quot;headerlink&quot; title=&quot;安装 gcc g++ 的依赖库&quot;&gt;&lt;/a&gt;安装 gcc g++ 的依赖库&lt;/h3&gt;&lt;p&gt;Ubuntu 平台使用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;apt-get install build-essential&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;apt-get install libtool&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>马云热血励志演讲《最伟大的成功》</title>
    <link href="http://yoursite.com/2017/08/11/most-success/"/>
    <id>http://yoursite.com/2017/08/11/most-success/</id>
    <published>2017-08-11T13:56:34.713Z</published>
    <updated>2017-08-11T14:05:19.788Z</updated>
    
    <content type="html"><![CDATA[<p>当你乐观的时候，总是会有机会的。那么你可能要问了“机会在哪呢？”你可能没有特别想实现的事，没有迫切要成功的欲望，没有勇攀高峰的决心，没有水滴石穿的毅力，也没有一颗所向披靡的强大心脏。那么，让来自马云的这段演讲来告诉你，你有什么。你有年轻的身体，你有奇妙的想法，你有乐观的心态，你有无限的可能性。<br><a id="more"></a></p>
<iframe height="492" width="798" src="http://qiniu-xpc3.vmoviercdn.com/59883b6633ea6.mp4" frameborder="0" allowfullscreen>  </iframe>

<p>我想，马云的这段励志演讲为我们提供了一面镜子可以用于自照。上面“你有什么”说完了，接下来让我讨论一下“你可能没有什么”。</p>
<p>你总爱抱怨，机会却总是躲在人们抱怨的地方。你没有仔细想想怎么能把事情做得不一样。你没有行动力，你缺少坚持下去的长劲儿。你抗压能力差，你动不动就玻璃心。你不相信自己也不相信别人，你怕犯错。现在是不是觉得这碗鸡汤有点难以下咽了？如果认识到差距，不如从今天开始改变。明天的你只要比今天的你多迈出0.1步，也是进步。</p>
<p>为自己而工作。停止抱怨，用抱怨的时间多做事。把那些夜里冒出来的好点子在白天付诸行动，既然有了设想，那就行动起来。行动是你迈出的第一步，后面可能会更难，历经无数次动摇，面临无数次诱惑，感受无数次失败的苦味和难以为继的辛酸。顶住这一切，比常人更勇敢地去面对，并且坚持下去。排除万难，别被来自世人的非议和质疑影响。相信你自己，相信你的团队。服务好你的客户，之后再想怎么回馈社会。犯足够多的错，年轻时走过的弯路是最棒的收获。</p>
<p>马云还曾经说过“今天很艰难，明天比今天更难，后天可能是美好的，但更多的人死在了明天”。是不是感到膝盖中箭了？不妨干了这碗“毒鸡汤”。<strong>成功的法则本就并非千篇一律，你会有你自己向上的学问。</strong>那不如从明天开始，去摸索，去践行，哪怕只比昨天的你多迈出0.01步。</p>
<p>送给正在找实习工作的自己！加油！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当你乐观的时候，总是会有机会的。那么你可能要问了“机会在哪呢？”你可能没有特别想实现的事，没有迫切要成功的欲望，没有勇攀高峰的决心，没有水滴石穿的毅力，也没有一颗所向披靡的强大心脏。那么，让来自马云的这段演讲来告诉你，你有什么。你有年轻的身体，你有奇妙的想法，你有乐观的心态，你有无限的可能性。&lt;br&gt;
    
    </summary>
    
    
      <category term="励志" scheme="http://yoursite.com/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 基本知识快速入门</title>
    <link href="http://yoursite.com/2017/08/05/Nginx/"/>
    <id>http://yoursite.com/2017/08/05/Nginx/</id>
    <published>2017-08-05T12:41:33.497Z</published>
    <updated>2017-08-05T14:44:29.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Nginx？"><a href="#什么是-Nginx？" class="headerlink" title="什么是 Nginx？"></a>什么是 Nginx？</h2><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，以高稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。</p>
<h2 id="Nginx-特点"><a href="#Nginx-特点" class="headerlink" title="Nginx 特点"></a>Nginx 特点</h2><ul>
<li>处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．</li>
<li>无缓存的反向代理加速，简单的负载均衡和容错．</li>
<li>FastCGI，简单的负载均衡和容错．</li>
<li>模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 FastCGI 或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。</li>
<li>支持 SSL 和 TLSSNI．</li>
</ul>
<a id="more"></a>
<h2 id="主要应用场合"><a href="#主要应用场合" class="headerlink" title="主要应用场合"></a>主要应用场合</h2><h3 id="1、静态-HTTP-服务器"><a href="#1、静态-HTTP-服务器" class="headerlink" title="1、静态 HTTP 服务器"></a>1、静态 HTTP 服务器</h3><p>首先，Nginx是一个 HTTP 服务器，可以将服务器上的静态文件（如 HTML、图片）通过 HTTP 协议展现给客户端。</p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>; <span class="comment"># 端口号</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">root</span> /usr/share/nginx/html; <span class="comment"># 静态文件路径</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2、反向代理服务器"><a href="#2、反向代理服务器" class="headerlink" title="2、反向代理服务器"></a>2、反向代理服务器</h3><p>什么是反向代理？</p>
<p>客户端本来可以直接通过 HTTP 协议访问某网站应用服务器，如果网站管理员在中间加上一个 Nginx，客户端请求Nginx，Nginx 请求应用服务器，然后将结果返回给客户端，此时 Nginx 就是反向代理服务器。</p>
<p><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20150517220513170.png" alt=""></p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://192.168.20.1:8080; <span class="comment"># 应用服务器HTTP地址</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>既然服务器可以直接 HTTP 访问，为什么要在中间加上一个反向代理，不是多此一举吗？反向代理有什么作用？继续往下看，下面的负载均衡、虚拟主机，都基于反向代理实现，当然反向代理的功能也不仅仅是这些。</p>
<h3 id="3、负载均衡"><a href="#3、负载均衡" class="headerlink" title="3、负载均衡"></a>3、负载均衡</h3><p>当网站访问量非常大，网站站长开心赚钱的同时，也摊上事儿了。因为网站越来越慢，一台服务器已经不够用了。于是将相同的应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。同时带来的好处是，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p>
<p>当我们网站进行大的升级更新时，我们不可能直接将所有的服务器都关掉，然后再升级的。通常我们都是批量的关掉一些服务器，去升级网站，当有用户的请求时则分配给其他还在运作的机器处理。当之前关掉的机器更新完成后，再次开启，然后又批量关掉部分机器，如上循环，直到最后全部机器都更新完成。这样就不会影响用户使用。</p>
<p>Nginx 可以通过反向代理来实现负载均衡。</p>
<p><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20150517221003659.jpg" alt=""></p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> myapp &#123;</div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.20.1:8080</span>; <span class="comment"># 应用服务器1</span></div><div class="line">	<span class="attribute">server</span> <span class="number">192.168.20.2:8080</span>; <span class="comment"># 应用服务器2</span></div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://myapp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、虚拟主机"><a href="#4、虚拟主机" class="headerlink" title="4、虚拟主机"></a>4、虚拟主机</h3><p>网站访问量大，需要负载均衡。然而并不是所有网站都如此出色，有的网站，由于访问量太小，需要节省成本，将多个网站部署在同一台服务器上。</p>
<p>例如将 www.aaa.com 和 www.bbb.com 两个网站部署在同一台服务器上，两个域名解析到同一个 IP 地址，但是用户通过两个域名却可以打开两个完全不同的网站，互相不影响，就像访问两个服务器一样，所以叫两个虚拟主机。</p>
<p>配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span> default_server;</div><div class="line">	<span class="attribute">server_name</span> _;</div><div class="line">	<span class="attribute">return</span> <span class="number">444</span>; <span class="comment"># 过滤其他域名的请求，返回444状态码</span></div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> www.aaa.com; <span class="comment"># www.aaa.com域名</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://localhost:8080; <span class="comment"># 对应端口号8080</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">server_name</span> www.bbb.com; <span class="comment"># www.bbb.com域名</span></div><div class="line">	<span class="attribute">location</span> / &#123;</div><div class="line">		<span class="attribute">proxy_pass</span> http://localhost:8081; <span class="comment"># 对应端口号8081</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在服务器 8080 和 8081 两个端口分别开了一个应用，客户端通过不同的域名访问，根据 server_name 可以反向代理到对应的应用服务器。</p>
<p>虚拟主机的原理是通过 HTTP 请求头中的 Host 是否匹配 server_name 来实现的，有兴趣的同学可以研究一下 HTTP 协议。</p>
<p>另外，server_name 配置还可以过滤有人恶意将某些域名指向你的主机服务器。</p>
<h3 id="5、FastCGI"><a href="#5、FastCGI" class="headerlink" title="5、FastCGI"></a>5、FastCGI</h3><p>Nginx 本身不支持 PHP 等语言，但是它可以通过 FastCGI 来将请求扔给某些语言或框架处理（例如 PHP、Python、Perl）。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">	<span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</div><div class="line">		<span class="attribute">include</span> fastcgi_params;</div><div class="line">		<span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /PHP文件路径<span class="variable">$fastcgi_script_name</span>; <span class="comment"># PHP文件路径</span></div><div class="line">		<span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>; <span class="comment"># PHP-FPM地址和端口号</span></div><div class="line">		<span class="comment"># 另一种方式：fastcgi_pass unix:/var/run/php5-fpm.sock;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置中将 .php 结尾的请求通过 FashCGI 交给 PHP-FPM 处理，PHP-FPM 是 PHP 的一个 FastCGI 管理器。有关FashCGI 可以查阅其他资料，本文不再介绍。</p>
<p>fastcgi_pass 和 proxy_pass 有什么区别？下面一张图带你看明白：</p>
<p><img src="http://7xidft.com1.z0.glb.clouddn.com/blog/20150517221800380.jpg" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="http://xxgblog.com/2015/05/17/nginx-start/" target="_blank" rel="external">Nginx基本功能极速入门</a></p>
<p>2、<a href="https://www.gitbook.com/book/skyao/leaning-nginx/details" target="_blank" rel="external">Nginx 学习笔记</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Nginx？&quot;&gt;&lt;a href=&quot;#什么是-Nginx？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Nginx？&quot;&gt;&lt;/a&gt;什么是 Nginx？&lt;/h2&gt;&lt;p&gt;Nginx 是一个高性能的 HTTP 和反向代理服务器，以高稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。&lt;/p&gt;
&lt;h2 id=&quot;Nginx-特点&quot;&gt;&lt;a href=&quot;#Nginx-特点&quot; class=&quot;headerlink&quot; title=&quot;Nginx 特点&quot;&gt;&lt;/a&gt;Nginx 特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;处理静态文件，索引文件以及自动索引；打开文件描述符缓冲．&lt;/li&gt;
&lt;li&gt;无缓存的反向代理加速，简单的负载均衡和容错．&lt;/li&gt;
&lt;li&gt;FastCGI，简单的负载均衡和容错．&lt;/li&gt;
&lt;li&gt;模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 FastCGI 或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。&lt;/li&gt;
&lt;li&gt;支持 SSL 和 TLSSNI．&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>秋招第三站 —— 内推阿里（一面）</title>
    <link href="http://yoursite.com/2017/08/04/alibaba/"/>
    <id>http://yoursite.com/2017/08/04/alibaba/</id>
    <published>2017-08-04T03:36:52.742Z</published>
    <updated>2017-08-04T03:38:20.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）"><a href="#3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）" class="headerlink" title="3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）"></a>3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）</h3><p>2017.08.02   晚上9点21打电话过来，预约明天什么时候有空面试，约好第二天下午两点。</p>
<p>2017.08.03   下午两点10分打过来了。</p>
<p>说看了我的<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，觉得我学的还行，知识广度都还不错，但是还是要问问具体情况，为什么没看到你春招的记录，什么原因没投阿里？非得说一个原因，那就是：我自己太菜了，不敢投。<br><a id="more"></a><br>1、先自我介绍</p>
<p>2、什么是多态？哪里体现了多态的概念？</p>
<p>3、HashMap 源码分析，把里面的东西问了个遍？最后问是不是线程安全？引出 ConcurrentHashMap</p>
<p>4、ConcurrentHashMap 源码分析</p>
<p>5、类加载，双亲委托机制</p>
<p>6、Java内存模型（一开始说的不是他想要的，主要想问我堆和栈的细节）</p>
<p>7、垃圾回收算法</p>
<p>8、线程池，自己之前看过，所以说的比较多，最后面试官说了句：看你对线程池了解还是很深了</p>
<p>9、事务的四种特性</p>
<p>10、什么是死锁？</p>
<p>11、乐观锁和悲观锁的策略</p>
<p>12、高可用网站的设计（有什么技术实现）</p>
<p>13、低耦合高内聚</p>
<p>14、设计模式了解不？你用过哪几种，为什么用，单例模式帮我们做什么东西？有什么好处？</p>
<p>15、你参与什么项目中成长比较快？学到了什么东西，以前是没有学过的？</p>
<p>16、项目中遇到的最大困难是怎样的？是怎么解决的？</p>
<p>17、智力题（两根不均匀的香，点一头烧完要一个小时，怎么确定15分钟）</p>
<p>18、你有什么问题想要问我的？</p>
<p>19、问了菜鸟网络他们部门主要做什么？</p>
<p>20、对我这次面试做个评价：看了你<a href="http://www.54tianzhisheng.cn/" target="_blank" rel="external">博客</a>和 <a href="https://github.com/zhisheng17" target="_blank" rel="external">GitHub</a>，知道你对学习的热情还是很高的，花了不少功夫，但是有些东西还是需要加强深度，阿里需要那种对技术有深度，有自己独到见解的人才。意思就是 GG 了。</p>
<p><strong>总结</strong>：面试总的来说，第一次电话面试，感觉好紧张，好多问题自己会点，但是其中的细节没弄清楚，自己准备的也不够充分。面试官很友好，看到我紧张，也安慰我说不要紧，不管以后出去面试啥的，不需要紧张，公司问的问题可能很广，你只需要把你知道的说出来就行，不会的直接说不会就行。之前一直不敢投阿里，因为自己准备的完全不够充分，但是在朋友磊哥的帮助下，还是试了下，不管结果怎么样，经历过总比没有的好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）&quot;&gt;&lt;a href=&quot;#3、阿里巴巴（菜鸟网络部门）（一面-49-分钟）&quot; class=&quot;headerlink&quot; title=&quot;3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）&quot;&gt;&lt;/a&gt;3、阿里巴巴（菜鸟网络部门）（一面 49 分钟）&lt;/h3&gt;&lt;p&gt;2017.08.02   晚上9点21打电话过来，预约明天什么时候有空面试，约好第二天下午两点。&lt;/p&gt;
&lt;p&gt;2017.08.03   下午两点10分打过来了。&lt;/p&gt;
&lt;p&gt;说看了我的&lt;a href=&quot;http://www.54tianzhisheng.cn/&quot;&gt;博客&lt;/a&gt;和 &lt;a href=&quot;https://github.com/zhisheng17&quot;&gt;GitHub&lt;/a&gt;，觉得我学的还行，知识广度都还不错，但是还是要问问具体情况，为什么没看到你春招的记录，什么原因没投阿里？非得说一个原因，那就是：我自己太菜了，不敢投。&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>秋招第二站 —— 内推爱奇艺（一面二面）</title>
    <link href="http://yoursite.com/2017/08/04/iqiyi/"/>
    <id>http://yoursite.com/2017/08/04/iqiyi/</id>
    <published>2017-08-04T03:34:33.403Z</published>
    <updated>2017-08-04T04:34:52.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第-2-站-、爱奇艺-后端-Java-开发实习生"><a href="#第-2-站-、爱奇艺-后端-Java-开发实习生" class="headerlink" title="第 2 站 、爱奇艺   后端 Java 开发实习生"></a>第 2 站 、爱奇艺   后端 Java 开发实习生</h3><h4 id="笔试（半个小时）"><a href="#笔试（半个小时）" class="headerlink" title="笔试（半个小时）"></a>笔试（半个小时）</h4><p>题目：（记得一些）</p>
<p>1、重载重写的区别？</p>
<p>2、转发和重定向的区别？<br><a id="more"></a><br>3、画下 HashMap 的结构图？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>4、statement 和 preparedstatement 区别？</p>
<p>5、JSP 中一个 <c:value> 中取值与直接取值的区别？会有什么安全问题？</c:value></p>
<p>6、实现一个线程安全的单例模式</p>
<p>7、一个写 sql 语句的题目</p>
<p>8、自己实现一个 List，（主要实现 add等常用方法）</p>
<p>9、Spring 中 IOC 和 AOP 的理解？</p>
<p>10、两个对象的 hashcode 相同，是否对象相同？equal() 相同呢？</p>
<p>11、@RequestBody 和 @ResponseBody 区别？</p>
<p>12、JVM 一个错误，什么情况下会发生？</p>
<p>13、常用的 Linux 命令？</p>
<h4 id="第一轮面试（80-分钟）"><a href="#第一轮面试（80-分钟）" class="headerlink" title="第一轮面试（80 分钟）"></a>第一轮面试（80 分钟）</h4><p>1、自我介绍</p>
<p>2、介绍你最熟悉的一个项目</p>
<p>3、讲下这个 XSS 攻击</p>
<p>4、HashMap 的结构？HashMap 、 HashTable 和 ConcurrentHashMap 的区别？</p>
<p>5、HashMap 中怎么解决冲突的？（要我详细讲下）</p>
<p>6、ConcurrentHashMap 和 HashTable 中线程安全的区别？为啥建议用 ConcurrentHashMap ？能把 ConcurrentHashMap  里面的实现详细的讲下吗？</p>
<p>7、Session 和 Cookie 的区别？</p>
<p>8、你项目中登录是怎样做的，用的 Cookie 和 Session？</p>
<p>9、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>10、问了好几个注解的作用？</p>
<p>11、statement 和 preparedstatement 区别？</p>
<p>12、$ 和 # 的区别？以及这两个在哪些地方用？</p>
<p>13、前面项目介绍了数据是爬虫爬取过来的，那你讲讲你的爬虫是多线程的吧？</p>
<p>14、讲讲 Python 中的多线程和 Java 中的多线程区别？</p>
<p>15、自己刚好前几天在看线程池，立马就把面试官带到我熟悉的线程池，和面试官讲了下 JDK 自带的四种线程池、ThreadPoolExecutor 类中的最重要的构造器里面的七个参数，然后再讲了下线程任务进入线程池和核心线程数、缓冲队列、最大线程数量比较。</p>
<p>16、线程同步，你了解哪几种方式？</p>
<p>17、讲下 Synchronized？</p>
<p>18、讲下 RecentLock 可重入锁？ 什么是可重入锁？为什么要设计可重入锁？</p>
<p>19、讲下 Volatile 吧？他是怎样做到同步的？</p>
<p>20、Volatile 为什么不支持原子性？举个例子</p>
<p>21、Atomic 怎么设计的？（没看过源码，当时回答错了，后来才发现里面全部用 final 修饰的属性和方法）</p>
<p>22、问几个前端的标签吧？（问了一个不会，直接说明我偏后端，前端只是了解，后面就不问了）</p>
<p>23、SpringBoot 的了解？</p>
<p>24、Linux 常用命令？</p>
<p>25、JVM 里的几个问题？</p>
<p>26、事务的特性？</p>
<p>27、隔离级别？</p>
<p>28、网络状态码？以 2、3、4、5 开头的代表什么意思。</p>
<p>29、并发和并行的区别？</p>
<p>30、你有什么问题想问我的？</p>
<p>一面面完后面试官和说这份试卷是用来考 1~3 年开发工作经验的，让我准备一下，接下来的二面。</p>
<h4 id="第二轮面试（半个小时）"><a href="#第二轮面试（半个小时）" class="headerlink" title="第二轮面试（半个小时）"></a>第二轮面试（半个小时）</h4><p>1、一上来就问怎么简历名字都没有，我指了简历第一行的我的名字，还特意大写了，然后就问学校是不是在上海，我回答在南昌（感觉被鄙视了一波，后面我在回答问题的时候面试官就一直在玩手机，估计后面对我的印象就不是很好了）</p>
<p>2、自我介绍</p>
<p>3、说一说数据库建表吧（从范式讲）</p>
<p>4、讲讲多态？（这个我答出来了，可是面试官竟然说不是这样吧，可能面试官没听请，后面还说我是不是平时写多态比较少，感觉这个也让面试官对我印象减分）</p>
<p>5、将两个数转换（不借助第三个参数）</p>
<p>6、手写个插入排序吧（写完了和面试官讲了下执行流程）</p>
<p>7、讲讲你对 Spring 中的 IOC 和 AOP 的理解？</p>
<p>8、问了几个常用的 Linux 命令？</p>
<p>9、也问到多线程？和一面一样把自己最近看的线程池也讲了一遍</p>
<p>10、学 Java 多久了？</p>
<p>11、你有什么想问的？</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>面试题目大概就是这么多了，有些问题自己也忘记了，面试题目顺序不一定是按照上面所写的。再次感谢爱奇艺的第一面面试官了，要不是他帮忙内推的，我可能还没有机会收到面试机会。自己接到爱奇艺面试邀请电话是星期一晚上快7点中的，之后加了面试官微信约好了星期四面试的（时间准备较短，之前没系统的复习过）。星期四一大早（5点就起床了），然后就收拾了下，去等公交车，转了两次车，然后再做地铁去爱奇艺公司的，总共路上花费时间四个多小时。总的来说，这次面试准备的时间不是很充裕，所以准备的个人觉得不是很好，通过这次的面试，发现面试还是比较注重基础和深度的，我也知道了自己的一些弱处，还需要在哪里加强，面试技巧上也要掌握些。为后面的其他公司继续做好充足的准备。加油！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第-2-站-、爱奇艺-后端-Java-开发实习生&quot;&gt;&lt;a href=&quot;#第-2-站-、爱奇艺-后端-Java-开发实习生&quot; class=&quot;headerlink&quot; title=&quot;第 2 站 、爱奇艺   后端 Java 开发实习生&quot;&gt;&lt;/a&gt;第 2 站 、爱奇艺   后端 Java 开发实习生&lt;/h3&gt;&lt;h4 id=&quot;笔试（半个小时）&quot;&gt;&lt;a href=&quot;#笔试（半个小时）&quot; class=&quot;headerlink&quot; title=&quot;笔试（半个小时）&quot;&gt;&lt;/a&gt;笔试（半个小时）&lt;/h4&gt;&lt;p&gt;题目：（记得一些）&lt;/p&gt;
&lt;p&gt;1、重载重写的区别？&lt;/p&gt;
&lt;p&gt;2、转发和重定向的区别？&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>秋招第一站 —— 亚信科技</title>
    <link href="http://yoursite.com/2017/08/04/yaxin/"/>
    <id>http://yoursite.com/2017/08/04/yaxin/</id>
    <published>2017-08-04T03:30:50.681Z</published>
    <updated>2017-08-04T03:31:32.737Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第-1-站、亚信科技-Java-开发"><a href="#第-1-站、亚信科技-Java-开发" class="headerlink" title="第 1 站、亚信科技    Java 开发"></a>第 1 站、亚信科技    Java 开发</h3><p>1）自我介绍（说到一个亮点：长期坚持写博客，面试官觉得这个习惯很好，算加分项吧）</p>
<p>2）看到简历项目中用到 Solr，详细的问了下 Solr（自己介绍了下 Solr 的使用场景和建立索引等东西）<br><a id="more"></a><br>3）项目里面写了一个 “ 敏感词和 JS 标签过滤防 XSS 攻击”，面试官让我讲了下这个 XSS 攻击，并且是怎样实现的</p>
<p>4）项目里写了支持 Markdown，问是不是自己写的解析代码，（回答不是，自己引用的是 GitHub上的一个开源项目解析的）</p>
<p>5）想问我前端的知识，我回复到：自己偏后端开发，前端只是了解，然后面试官就不问了</p>
<p>6）问我考不考研？</p>
<p>7）觉得杭州怎么样？是打算就呆在杭州还是把杭州作为一个跳板？</p>
<p>8）有啥小目标？以后是打算继续技术方向，还是先技术后管理（还开玩笑的说：是不是赚他几个亿，当时我笑了笑）</p>
<p>9）有啥兴趣爱好？</p>
<p>大概就记得这么多了，目前已经拿到 Offer 了。</p>
<p><strong>总结</strong>：面试问的问题不算多，主要是通过简历上项目所涉及的东西提问的，如果自己不太会的切记不要写上去。面试主要考察你回答问题来判断你的逻辑是否很清楚。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第-1-站、亚信科技-Java-开发&quot;&gt;&lt;a href=&quot;#第-1-站、亚信科技-Java-开发&quot; class=&quot;headerlink&quot; title=&quot;第 1 站、亚信科技    Java 开发&quot;&gt;&lt;/a&gt;第 1 站、亚信科技    Java 开发&lt;/h3&gt;&lt;p&gt;1）自我介绍（说到一个亮点：长期坚持写博客，面试官觉得这个习惯很好，算加分项吧）&lt;/p&gt;
&lt;p&gt;2）看到简历项目中用到 Solr，详细的问了下 Solr（自己介绍了下 Solr 的使用场景和建立索引等东西）&lt;br&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 线程池艺术探索</title>
    <link href="http://yoursite.com/2017/07/29/ThreadPool/"/>
    <id>http://yoursite.com/2017/07/29/ThreadPool/</id>
    <published>2017-07-29T14:27:44.446Z</published>
    <updated>2017-07-29T14:45:24.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>Wiki 上是这样解释的：<a href="https://en.wikipedia.org/wiki/Thread_pool" target="_blank" rel="external">Thread Pool</a></p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Thread_pool.svg/400px-Thread_pool.svg.png" alt=""></p>
<p>作用：<strong>利用线程池可以大大减少在创建和销毁线程上所花的时间以及系统资源的开销！</strong></p>
<p>下面主要讲下线程池中最重要的一个类 ThreadPoolExecutor 。<br><a id="more"></a></p>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p><img src="http://ohfk1r827.bkt.clouddn.com/ThreadPoolExecutor1.jpg" alt="ThreadPoolExecutor1"></p>
<p><strong>ThreadPoolExecutor 构造器：</strong></p>
<p>有四个构造器的，挑了参数最长的一个进行讲解。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/constructor.jpg" alt="constructor"></p>
<p><strong>七个参数：</strong></p>
<ul>
<li>corePoolSize：核心池的大小，在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li>
<li>maximumPoolSize：线程池最大线程数；</li>
<li>keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止；</li>
<li>unit：参数keepAliveTime的时间单位（DAYS、HOURS、MINUTES、SECONDS 等）；</li>
<li>workQueue：阻塞队列，用来存储等待执行的任务；<ul>
<li>ArrayBlockingQueue （有界队列）</li>
<li>LinkedBlockingQueue  （无界队列）</li>
<li>SynchronousQueue</li>
</ul>
</li>
<li>threadFactory：线程工厂，主要用来创建线程</li>
<li><p>handler：拒绝处理任务的策略</p>
<ul>
<li>AbortPolicy：丢弃任务并抛出 RejectedExecutionException 异常。（默认这种）</li>
<li>DiscardPolicy：也是丢弃任务，但是不抛出异常</li>
<li>DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</li>
<li>CallerRunsPolicy：由调用线程处理该任务</li>
</ul>
<p><img src="http://ohfk1r827.bkt.clouddn.com/Rejected-method-Thread-Pool.jpg" alt="Rejected-method-Thread-Pool"></p>
</li>
</ul>
<p><strong>重要方法：</strong></p>
<ul>
<li>execute()：通过这个方法可以向线程池提交一个任务，交由线程池去执行；</li>
<li>shutdown()：关闭线程池；</li>
</ul>
<p><strong>execute() 方法：</strong></p>
<p>注：JDK 1.7 和 1.8 这个方法有点区别，下面代码是 1.8 中的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">  <span class="comment">//1、如果当前的线程数小于核心线程池的大小，根据现有的线程作为第一个 Worker 运行的线程，新建一个 Worker，addWorker 自动的检查当前线程池的状态和 Worker 的数量，防止线程池在不能添加线程的状态下添加线程</span></div><div class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            c = ctl.get();</div><div class="line">        &#125;</div><div class="line">   <span class="comment">//2、如果线程入队成功，然后还是要进行 double-check 的，因为线程在入队之后状态是可能会发生变化的</span></div><div class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">            <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">          <span class="comment">// recheck 防止线程池状态的突变，如果突变，那么将 reject 线程，防止 workQueue 中增加新线程</span></div><div class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">                reject(command);</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)<span class="comment">//上下两个操作都有 addWorker 的操作，但是如果在workQueue.offer 的时候 Worker 变为 0，那么将没有 Worker 执行新的 task，所以增加一个 Worker.</span></div><div class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">   <span class="comment">//3、如果 task 不能入队(队列满了)，这时候尝试增加一个新线程，如果增加失败那么当前的线程池状态变化了或者线程池已经满了然后拒绝task</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">            reject(command);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中调用了 addWorker() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;<span class="comment">// firstTask: 新增一个线程并执行这个任务，可空，增加的线程从队列获取任务；core：是否使用 corePoolSize 作为上限，否则使用 maxmunPoolSize</span></div><div class="line">        retry:</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = ctl.get();</div><div class="line">            <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line">            <span class="comment">// Check if queue empty only if necessary.</span></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * rs!=Shutdown || fistTask！=null || workQueue.isEmpty</div><div class="line">    * 如果当前的线程池的状态 &gt; SHUTDOWN 那么拒绝 Worker 的 add 如果 =SHUTDOWN</div><div class="line">    * 那么此时不能新加入不为 null 的 Task，如果在 workQueue 为 empty 的时候不能加入任何类型的 Worker，</div><div class="line">    * 如果不为 empty 可以加入 task 为 null 的 Worker, 增加消费的 Worker</div><div class="line">    */</div><div class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; ! (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span> &amp;&amp;! workQueue.isEmpty()))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">          <span class="comment">//如果当前的数量超过了 CAPACITY，或者超过了 corePoolSize 和 maximumPoolSize（试 core 而定）</span></div><div class="line">                <span class="keyword">if</span> (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">          <span class="comment">//CAS 尝试增加线程数，如果失败，证明有竞争，那么重新到 retry。</span></div><div class="line">                <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))<span class="comment">// AtomicInteger 的 CAS 操作;</span></div><div class="line">                    <span class="keyword">break</span> retry;</div><div class="line">                c = ctl.get();  <span class="comment">// Re-read ctl</span></div><div class="line">               <span class="comment">//判断当前线程池的运行状态,状态发生改变，重试 retry;</span></div><div class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)</div><div class="line">                    <span class="keyword">continue</span> retry;</div><div class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</div><div class="line">        Worker w = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            w = <span class="keyword">new</span> Worker(firstTask);<span class="comment">// Worker 为内部类，封装了线程和任务，通过 ThreadFactory 创建线程，可能失败抛异常或者返回 null</span></div><div class="line">            <span class="keyword">final</span> Thread t = w.thread;</div><div class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">                mainLock.lock();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// Recheck while holding lock.</span></div><div class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></div><div class="line">                    <span class="comment">// shut down before lock acquired.</span></div><div class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</div><div class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</div><div class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</div><div class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></div><div class="line">                         <span class="comment">// SHUTDOWN 以后的状态和 SHUTDOWN 状态下 firstTask 为 null，不可新增线程</span></div><div class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line">                        workers.add(w);</div><div class="line">                        <span class="keyword">int</span> s = workers.size();</div><div class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</div><div class="line">                            largestPoolSize = s;<span class="comment">//记录最大线程数</span></div><div class="line">                        workerAdded = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    mainLock.unlock();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (workerAdded) &#123;</div><div class="line">                    t.start();</div><div class="line">                    workerStarted = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (! workerStarted)</div><div class="line">                addWorkerFailed(w);<span class="comment">//失败回退,从 wokers 移除 w, 线程数减一，尝试结束线程池(调用tryTerminate 方法)</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> workerStarted;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>示意图：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/coreThreadPool.jpg" alt="coreThreadPool"></p>
<p><strong>执行流程：</strong></p>
<p>1、当有任务进入时，线程池创建线程去执行任务，直到核心线程数满为止</p>
<p>2、核心线程数量满了之后，任务就会进入一个缓冲的任务队列中</p>
<ul>
<li>当任务队列为无界队列时，任务就会一直放入缓冲的任务队列中，不会和最大线程数量进行比较</li>
<li>当任务队列为有界队列时，任务先放入缓冲的任务队列中，当任务队列满了之后，才会将任务放入线程池，此时会与线程池中最大的线程数量进行比较，如果超出了，则默认会抛出异常。然后线程池才会执行任务，当任务执行完，又会将缓冲队列中的任务放入线程池中，然后重复此操作。</li>
</ul>
<p><strong>shutdown() 方法：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//判断是否可以操作目标线程</span></div><div class="line">            checkShutdownAccess();</div><div class="line">            <span class="comment">//设置线程池状态为 SHUTDOWN, 此处之后，线程池中不会增加新 Task</span></div><div class="line">            advanceRunState(SHUTDOWN);</div><div class="line">            <span class="comment">//中断所有的空闲线程</span></div><div class="line">            interruptIdleWorkers();</div><div class="line">            onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//转到 Terminate</span></div><div class="line">        tryTerminate();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>参考资料：<a href="http://www.jianshu.com/p/ade771d2c9c0" target="_blank" rel="external">深入理解java线程池—ThreadPoolExecutor</a></p>
<h2 id="JDK-自带四种线程池分析与比较"><a href="#JDK-自带四种线程池分析与比较" class="headerlink" title="JDK 自带四种线程池分析与比较"></a>JDK 自带四种线程池分析与比较</h2><p><img src="http://ohfk1r827.bkt.clouddn.com/four-Thread-Pool.jpg" alt="four-Thread-Pool"></p>
<h3 id="1、newFixedThreadPool"><a href="#1、newFixedThreadPool" class="headerlink" title="1、newFixedThreadPool"></a>1、newFixedThreadPool</h3><p>创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/newFixedThreadPool.jpg" alt="newFixedThreadPool"></p>
<h3 id="2、newSingleThreadExecutor"><a href="#2、newSingleThreadExecutor" class="headerlink" title="2、newSingleThreadExecutor"></a>2、newSingleThreadExecutor</h3><p>创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。<img src="http://ohfk1r827.bkt.clouddn.com/newSingleThreadExecutor.jpg" alt="newSingleThreadExecutor"></p>
<h3 id="3、newCachedThreadPool"><a href="#3、newCachedThreadPool" class="headerlink" title="3、newCachedThreadPool"></a>3、newCachedThreadPool</h3><p>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/newCachedThreadPool.jpg" alt="newCachedThreadPool"></p>
<h3 id="4、newScheduledThreadPool"><a href="#4、newScheduledThreadPool" class="headerlink" title="4、newScheduledThreadPool"></a>4、newScheduledThreadPool</h3><p>创建一个定长线程池，支持定时及周期性任务执行。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/newScheduledThreadPool.jpg" alt="newScheduledThreadPool"></p>
<p>四种线程池其实内部方法都是调用的 ThreadPoolExecutor 类，只不过利用了其不同的构造器方法而已（传入自己需要传入的参数），那么利用这个特性，我们自己也是可以实现自己定义的线程池的。</p>
<h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><p>1、创建任务类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhisheng.thread.threadpool.demo;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/7/24.</div><div class="line"> * 任务</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskId;     <span class="comment">//任务 id</span></div><div class="line">    <span class="keyword">private</span> String taskName;    <span class="comment">//任务名字</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTaskId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> taskId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskId</span><span class="params">(<span class="keyword">int</span> taskId)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskId = taskId;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTaskName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> taskName;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTaskName</span><span class="params">(String taskName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskName = taskName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> taskId, String taskName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.taskId = taskId;</div><div class="line">        <span class="keyword">this</span>.taskName = taskName;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"当前正在执行 ******   线程Id--&gt;"</span> + taskId + <span class="string">",任务名称--&gt;"</span> + taskName);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.currentThread().sleep(<span class="number">5</span> * <span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"线程Id--&gt;"</span> + taskId + <span class="string">",任务名称--&gt;"</span> + taskName + <span class="string">"   -----------   执行完毕！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、自定义拒绝策略，实现 RejectedExecutionHandler 接口，重写 rejectedExecution 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhisheng.thread.threadpool.demo;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionHandler;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/7/24.</div><div class="line"> * 自定义拒绝策略，实现 RejectedExecutionHandler 接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RejectedThreadPoolHandler</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RejectedThreadPoolHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"WARNING 自定义拒绝策略: Task "</span> + r.toString() + <span class="string">" rejected from "</span> + executor.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、创建线程池</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zhisheng.thread.threadpool.demo;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/7/24.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//核心线程数量为 2，最大线程数量 4，空闲线程存活的时间 60s，有界队列长度为 3,</span></div><div class="line">        <span class="comment">//ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 4, 60, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;&gt;(3));</span></div><div class="line"></div><div class="line">        <span class="comment">//核心线程数量为 2，最大线程数量 4，空闲线程存活的时间 60s， 无界队列,</span></div><div class="line">        <span class="comment">//ThreadPoolExecutor pool = new ThreadPoolExecutor(2, 4, 60L, TimeUnit.SECONDS, new LinkedBlockingDeque&lt;&gt;());</span></div><div class="line"></div><div class="line">        <span class="comment">//核心线程数量为 2，最大线程数量 4，空闲线程存活的时间 60s，有界队列长度为 3, 使用自定义拒绝策略</span></div><div class="line">        ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>, <span class="number">4</span>, <span class="number">60</span>, TimeUnit.SECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">3</span>), <span class="keyword">new</span> RejectedThreadPoolHandler());</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="comment">//创建 10 个任务</span></div><div class="line">            MyTask task = <span class="keyword">new</span> MyTask(i, <span class="string">"任务"</span> + i);</div><div class="line">            <span class="comment">//运行</span></div><div class="line">            pool.execute(task);</div><div class="line">            System.out.println(<span class="string">"活跃的线程数："</span>+pool.getActiveCount() + <span class="string">",核心线程数："</span> + pool.getCorePoolSize() + <span class="string">",线程池大小："</span> + pool.getPoolSize() + <span class="string">",队列的大小"</span> + pool.getQueue().size());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//关闭线程池</span></div><div class="line">        pool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里运行结果就不截图了，我在本地测试了代码是没问题的，感兴趣的建议还是自己跑一下，然后分析下结果是不是和前面分析的一样，如有问题，请在我<a href="http://www.54tianzhisheng.cn/2017/07/29/ThreadPool/" target="_blank" rel="external">博客</a>下面评论！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文一开始讲了线程池的介绍和好处，然后分析了线程池中最核心的 ThreadPoolExecutor 类中构造器的七个参数的作用、类中两个重要的方法，然后在对比研究了下 JDK 中自带的四种线程池的用法和内部代码细节，最后写了一个自定义的线程池。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;线程池&quot;&gt;&lt;a href=&quot;#线程池&quot; class=&quot;headerlink&quot; title=&quot;线程池&quot;&gt;&lt;/a&gt;线程池&lt;/h2&gt;&lt;p&gt;Wiki 上是这样解释的：&lt;a href=&quot;https://en.wikipedia.org/wiki/Thread_pool&quot;&gt;Thread Pool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Thread_pool.svg/400px-Thread_pool.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;作用：&lt;strong&gt;利用线程池可以大大减少在创建和销毁线程上所花的时间以及系统资源的开销！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面主要讲下线程池中最重要的一个类 ThreadPoolExecutor 。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>看透 Spring MVC 源代码分析与实践 ——  Spring MVC 组件分析</title>
    <link href="http://yoursite.com/2017/07/21/Spring-MVC03/"/>
    <id>http://yoursite.com/2017/07/21/Spring-MVC03/</id>
    <published>2017-07-21T02:34:05.009Z</published>
    <updated>2017-07-21T02:49:06.077Z</updated>
    
    <content type="html"><![CDATA[<p>由于星期一接到面试通知，和面试官约好了星期四面试，所以这几天没更新完这系列的文章，面完试后立马就把这个解决掉。通过这次面试，也让我懂得了很多，知道了自己的一些不足之处，后面还要继续下功夫好好的深入复习下去。这几篇文章写的我觉得还是不够仔细，感兴趣的还是建议自己去看看源码。</p>
<h3 id="第-11-章-——-组件概览"><a href="#第-11-章-——-组件概览" class="headerlink" title="第 11 章  ——  组件概览"></a>第 11 章  ——  组件概览</h3><p><strong>HandlerMapping</strong></p>
<p>根据 request 找到对应的处理器 Handler 和 Interceptors。内部只有一个方法<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure></p>
<p><strong>HandlerAdapter</strong></p>
<p>Handler 适配器，内部方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;<span class="comment">//判断是否可以使用某个 Handler</span></div><div class="line"><span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//具体使用</span></div><div class="line"><span class="function"><span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span></span>;<span class="comment">//获取资源上一次修改的时间</span></div></pre></td></tr></table></figure>
<p><strong>HandlerExceptionResolver</strong></p>
<p>根据异常设置 ModelAndView ，再交给 render 方法进行渲染。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></div><div class="line">			HttpServletRequest request, HttpServletResponse response, @Nullable Object handler, Exception ex)</div></pre></td></tr></table></figure>
<p><strong>ViewResolver</strong></p>
<p>用来将 String 类型的视图名和 Locale 解析为 View 类型的视图。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure>
<p>它的一个实现类 BeanNameViewResolver，它重写 resolveViewName 方法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Locale locale)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		ApplicationContext context = getApplicationContext();</div><div class="line">		<span class="comment">//如果应用上下文没有找到视图，返回 null</span></div><div class="line">		<span class="keyword">if</span> (!context.containsBean(viewName)) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"No matching bean found for view name '"</span> + viewName + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Allow for ViewResolver chaining...</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//如果找到的视图类型不匹配，也返回 null</span></div><div class="line">		<span class="keyword">if</span> (!context.isTypeMatch(viewName, View.class)) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Found matching bean for view name '"</span> + viewName +</div><div class="line">						<span class="string">"' - to be ignored since it does not implement View"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// Since we're looking into the general ApplicationContext here,</span></div><div class="line">			<span class="comment">// let's accept this as a non-match and allow for chaining as well...</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//根据视图名称从 Spring 容器中查找 Bean，返回找到的 bean</span></div><div class="line">		<span class="keyword">return</span> context.getBean(viewName, View.class);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>RequestToViewNameTranslator</strong></p>
<p>获取 request 中的视图名。接口里面也是只有一个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">getViewName</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//根据 request 查找视图名</span></div></pre></td></tr></table></figure>
<p><strong>LocaleResolver</strong></p>
<p>用于从 request 解析出 Locale。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LocaleResolver</span> </span>&#123;</div><div class="line">  	<span class="comment">//从 request 解析出 Locale</span></div><div class="line">	<span class="function">Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">  	<span class="comment">//根据 request 设置  locale</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @Nullable Locale locale)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ThemeResolver</strong></p>
<p>解析主题</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThemeResolver</span> </span>&#123;</div><div class="line">	<span class="comment">//通过给定的 request 查找主题名</span></div><div class="line">	<span class="function">String <span class="title">resolveThemeName</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">	<span class="comment">//根据给定的 request 设置主题名</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setThemeName</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String themeName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 RequestContext.java 文件中可以获取主题：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getThemeMessage</span><span class="params">(String code, String defaultMessage)</span> </span>&#123;</div><div class="line">		<span class="comment">//获取主题的信息</span></div><div class="line">		<span class="keyword">return</span> getTheme().getMessageSource().getMessage(code, <span class="keyword">null</span>, defaultMessage, <span class="keyword">this</span>.locale);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Theme <span class="title">getTheme</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//判断主题是否为空</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.theme == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="comment">// 通过 RequestContextUtils 获取 request 中的主题名</span></div><div class="line">			<span class="keyword">this</span>.theme = RequestContextUtils.getTheme(<span class="keyword">this</span>.request);</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.theme == <span class="keyword">null</span>) &#123;	<span class="comment">//如果还是为空的话</span></div><div class="line">				<span class="comment">//那就是没有有效的主题解析器和主题</span></div><div class="line">				<span class="keyword">this</span>.theme = getFallbackTheme();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.theme;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>RequestContextUtils.getTheme() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Theme <span class="title">getTheme</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">		ThemeResolver themeResolver = getThemeResolver(request);</div><div class="line">		ThemeSource themeSource = getThemeSource(request);</div><div class="line">		<span class="keyword">if</span> (themeResolver != <span class="keyword">null</span> &amp;&amp; themeSource != <span class="keyword">null</span>) &#123;</div><div class="line">			String themeName = themeResolver.resolveThemeName(request);</div><div class="line">			<span class="keyword">return</span> themeSource.getTheme(themeName);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>MultipartResolver</strong></p>
<p>用于处理上传请求，处理方法：将普通的 request 包装成 MultipartHttpServletRequest</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartResolver</span> </span>&#123;</div><div class="line">	<span class="comment">//根据 request 判断是否是上传请求</span></div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(HttpServletRequest request)</span></span>;</div><div class="line">	<span class="comment">//将 request 包装成 MultipartHttpServletRequest</span></div><div class="line">	<span class="function">MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException</span>;</div><div class="line">	<span class="comment">//清理上传过程中产生的临时资源</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cleanupMultipart</span><span class="params">(MultipartHttpServletRequest request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>FlashMapManager</strong></p>
<p>FlashMap 主要在 redirect 中传递参数，FlashMapManager 用来管理  FlashMap 的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlashMapManager</span> </span>&#123;</div><div class="line">	<span class="comment">//恢复参数，并将恢复过的和超时的参数从保存介质中删除</span></div><div class="line">	<span class="meta">@Nullable</span></div><div class="line">	<span class="function">FlashMap <span class="title">retrieveAndUpdate</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>;</div><div class="line">	<span class="comment">//将参数保存起来</span></div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOutputFlashMap</span><span class="params">(FlashMap flashMap, HttpServletRequest request, HttpServletResponse response)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>介绍 Spring MVC 中九大组件的接口、作用、内部方法实现及作用进行了简单的介绍，详细的还需大家自己去看源码。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="Spring-MVC-原理总结"><a href="#Spring-MVC-原理总结" class="headerlink" title="Spring MVC 原理总结"></a>Spring MVC 原理总结</h3><p>本质是一个 Servlet，这个 Servlet 继承自 HttpServlet。Spring MVC 中提供了三个层次的 Servlet：HttpServletBean、FrameworkServlet 和 DispatcherServlet。他们相互继承， HttpServletBean 直接继承自 Java 的 HttpServlet。HttpServletBean 用于将 Servlet 中的 Servlet 中配置的参数设置到相应的属性中，FrameworkServlet 初始化了 Spring MVC 中所使用的 WebApplicationContext，具体处理请求的 9 大组件是在 DispatcherServlet 中初始化的，整个继承图如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/spring-mvc1.jpg" alt="spring-mvc1"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>文章可转发，但请注明原创地址，谢谢支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于星期一接到面试通知，和面试官约好了星期四面试，所以这几天没更新完这系列的文章，面完试后立马就把这个解决掉。通过这次面试，也让我懂得了很多，知道了自己的一些不足之处，后面还要继续下功夫好好的深入复习下去。这几篇文章写的我觉得还是不够仔细，感兴趣的还是建议自己去看看源码。&lt;/p&gt;
&lt;h3 id=&quot;第-11-章-——-组件概览&quot;&gt;&lt;a href=&quot;#第-11-章-——-组件概览&quot; class=&quot;headerlink&quot; title=&quot;第 11 章  ——  组件概览&quot;&gt;&lt;/a&gt;第 11 章  ——  组件概览&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;HandlerMapping&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;根据 request 找到对应的处理器 Handler 和 Interceptors。内部只有一个方法&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>看透 Spring MVC 源代码分析与实践 ——  俯视 Spring MVC</title>
    <link href="http://yoursite.com/2017/07/14/Spring-MVC02/"/>
    <id>http://yoursite.com/2017/07/14/Spring-MVC02/</id>
    <published>2017-07-14T11:15:25.357Z</published>
    <updated>2017-07-14T11:25:37.314Z</updated>
    
    <content type="html"><![CDATA[<p>Spring MVC</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/spring-mvc.png" alt="spring-mvc"><br><a id="more"></a></p>
<h3 id="Spring-MVC-之初体验"><a href="#Spring-MVC-之初体验" class="headerlink" title="Spring MVC 之初体验"></a>Spring MVC 之初体验</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>在 IDEA 中新建一个 web 项目，用 Maven 管理项目的话，在 pom.xml 中加入 Spring MVC 和 Servlet 依赖即可。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Spring-MVC-简单配置"><a href="#Spring-MVC-简单配置" class="headerlink" title="Spring MVC 简单配置"></a>Spring MVC 简单配置</h4><ul>
<li>在 web.xml 中配置 Servlet</li>
<li>创建 Spring MVC 的 xml 配置文件</li>
<li>创建 Controller 和 View</li>
</ul>
<p>1、web.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring MVC配置 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ====================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 可以自定义servlet.xml配置文件的位置和名称，默认为WEB-INF目录下，名称为[&lt;servlet-name&gt;]-servlet.xml，如spring-servlet.xml</span></div><div class="line">    &lt;init-param&gt;</div><div class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">        &lt;param-value&gt;/WEB-INF/spring-servlet.xml&lt;/param-value&gt;&amp;nbsp; 默认</div><div class="line">    &lt;/init-param&gt;</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring配置 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ====================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">listenerclass</span>&gt;</span></div><div class="line">     org.springframework.web.context.ContextLoaderListener</div><div class="line">   <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 指定Spring Bean的配置文件所在目录。默认配置在WEB-INF目录下 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:config/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、spring-servlet.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">        <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></div><div class="line">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd</div><div class="line">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</div><div class="line">       http://www.springframework.org/schema/context &lt;a href="<span class="attr">http:</span>//<span class="attr">www.springframework.org</span>/<span class="attr">schema</span>/<span class="attr">context</span>/<span class="attr">spring-context-3.0.xsd</span>"&gt;http://www.springframework.org/schema/context/spring-context-3.0.xsd<span class="tag">&lt;/<span class="name">a</span>&gt;</span>"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 启用spring mvc 注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 设置使用注解的类所在的jar包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 完成请求和注解POJO的映射 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span> /&gt;</span></div><div class="line">　　</div><div class="line">    <span class="comment">&lt;!-- 对转向页面的路径解析。prefix：前缀， suffix：后缀 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">p:prefix</span>=<span class="string">"/jsp/"</span> <span class="attr">p:suffix</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> entity.User;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span>  <span class="comment">//类似Struts的Action</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login.do"</span>)  <span class="comment">// 请求url地址映射，类似Struts的action-mapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span>String username, String password, HttpServletRequest request) </span>&#123;</div><div class="line">        <span class="comment">// @RequestParam是指请求url地址映射中必须含有的参数(除非属性 required=false, 默认为 true)</span></div><div class="line">        <span class="comment">// @RequestParam可简写为：@RequestParam("username")</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"loginError"</span>; <span class="comment">// 跳转页面路径（默认为转发），该路径不需要包含spring-servlet配置文件中配置的前缀和后缀</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login2.do"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testLogin2</span><span class="params">(String username, String password, <span class="keyword">int</span> age)</span></span>&#123;</div><div class="line">        <span class="comment">// request和response不必非要出现在方法中，如果用不上的话可以去掉</span></div><div class="line">        <span class="comment">// 参数的名称是与页面控件的name相匹配，参数类型会自动被转换</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password) || age &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"loginError"</span>); <span class="comment">// 手动实例化ModelAndView完成跳转页面（转发），效果等同于上面的方法返回字符串</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> RedirectView(<span class="string">"../index.jsp"</span>));  <span class="comment">// 采用重定向方式跳转页面</span></div><div class="line">        <span class="comment">// 重定向还有一种简单写法</span></div><div class="line">        <span class="comment">// return new ModelAndView("redirect:../index.jsp");</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login3.do"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testLogin3</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="comment">// 同样支持参数为表单对象，类似于Struts的ActionForm，User不需要任何配置，直接写即可</span></div><div class="line">        String username = user.getUsername();</div><div class="line">        String password = user.getPassword();</div><div class="line">        <span class="keyword">int</span> age = user.getAge();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password) || age &lt; <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"loginError"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"loginSuccess"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"loginService"</span>)  <span class="comment">// 获取applicationContext.xml中bean的id为loginService的，并注入</span></div><div class="line">    <span class="keyword">private</span> LoginService loginService;  <span class="comment">//等价于spring传统注入方式写get和set方法，这样的好处是简洁工整，省去了不必要得代码</span></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test/login4.do"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin4</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (loginService.login(user) == <span class="keyword">false</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"loginError"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>@RequestMapping 可以写在方法上，也可以写在类上，上面代码方法上的 RequestMapping 都含有 <code>/test</code> ， 那么我们就可以将其抽出直接写在类上，那么方法里面就不需要写 <code>/test</code> 了。</p>
<p>如下即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login.do"</span>)  <span class="comment">// 请求url地址映射，类似Struts的action-mapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testLogin</span><span class="params">(@RequestParam(value=<span class="string">"username"</span>)</span>String username, String password, HttpServletRequest request) </span>&#123;</div><div class="line">        <span class="comment">// @RequestParam是指请求url地址映射中必须含有的参数(除非属性 required=false, 默认为 true)</span></div><div class="line">        <span class="comment">// @RequestParam可简写为：@RequestParam("username")</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!<span class="string">"admin"</span>.equals(username) || !<span class="string">"admin"</span>.equals(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"loginError"</span>; <span class="comment">// 跳转页面路径（默认为转发），该路径不需要包含spring-servlet配置文件中配置的前缀和后缀</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">"loginSuccess"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//省略其他的</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码方法的参数中可以看到有一个 <code>@RequestParam</code> 注解，其实还有 <code>@PathVariable</code> 。这两个的区别是啥呢？</p>
<ul>
<li><code>@PathVariable</code> 标记在方法的参数上，利用它标记的参数可以利用请求路径传值。</li>
<li>@RequestParam是指请求url地址映射中必须含有的参数(除非属性 required=false, 默认为 true)</li>
</ul>
<p>看如下例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;userId&#125;"</span>)  <span class="comment">// 请求url地址映射</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userinfo</span><span class="params">(Model model, @PathVariable(<span class="string">"userId"</span>)</span> <span class="keyword">int</span> userId,  HttpSession session) </span>&#123;</div><div class="line">         System.out.println(<span class="string">"进入  userinfo  页面"</span>);</div><div class="line">        <span class="comment">//判断是否有用户登录</span></div><div class="line">        User user1 = (User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">        <span class="keyword">if</span> (user1 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"login"</span>;</div><div class="line">        &#125;</div><div class="line">        User user = userService.selectUserById(userId);</div><div class="line">        model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"userinfo"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面例子中如果浏览器请求的是 <code>/user/1</code>  的时候，就表示此时的用户 id 为 1，此时就会先从 session 中查找是否有 “user” 属性，如果有的话，就代表用户此时处于登录的状态，如果没有的话，就会让用户返回到登录页面，这种机制在各种网站经常会使用的，然后根据这个 id = 1 ，去查找用户的信息，然后把查找的 “user” 放在 model 中，然后返回用户详情页面，最后在页面中用 <code>$!{user.name}</code> 获取用户的名字，同样的方式可以获取用户的其他信息，把所有的用户详情信息展示出来。</p>
<h3 id="创建-Spring-MVC-之器"><a href="#创建-Spring-MVC-之器" class="headerlink" title="创建 Spring MVC 之器"></a>创建 Spring MVC 之器</h3><p>Spring MVC 核心 Servlet 架构图如下：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/spring-mvc1.jpg" alt="spring-mvc1"></p>
<p>Java 中常用的 Servlet 我在另外一篇文章写的很清楚了，有兴趣的请看：<a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">通过源码详解 Servlet</a>  ，这里我就不再解释了。</p>
<p>这里主要讲 Spring 中的 HttpServletBean、FrameworkServlet、DispatcherServlet 这三个类的创建过程。</p>
<p>通过上面的图，可以看到这三个类直接实现三个接口：EnvironmentCapable、EnvironmentAware、ApplicationContextAware。下面我们直接看下这三个接口的内部是怎样写的。</p>
<p>EnvironmentCapable.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentCapable</span> </span>&#123;</div><div class="line">    <span class="comment">//返回组件的环境，可能返回 null 或者默认环境</span></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function">Environment <span class="title">getEnvironment</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EnvironmentAware.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EnvironmentAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</div><div class="line">    <span class="comment">//设置组件的运行环境</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ApplicationContextAware.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface ApplicationContextAware extends Aware &#123;</div><div class="line">    //设置运行对象的应用上下文</div><div class="line">    //当类实现这个接口后，这个类可以获取ApplicationContext中所有的bean，也就是说这个类可以直接获取Spring配置文件中所有有引用到的bean对象</div><div class="line">    void setApplicationContext(ApplicationContext applicationContext) throws BeansException;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>怎么使用这个这个接口呢？</p>
<p>参考文章：<a href="http://blog.csdn.net/kaiwii/article/details/6872642" target="_blank" rel="external">org.springframework.context.ApplicationContextAware使用理解</a></p>
<p><strong>HttpServletBean</strong></p>
<p>这里就直接看其中最重要的 init() 方法的代码了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将配置参数映射到此servlet的bean属性，并调用子类初始化。</div><div class="line"> *  如果 bean 配置不合法（或者需要的参数丢失）或者子类初始化发生错误，那么就会抛出 ServletException 异常</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">   <span class="comment">//日志代码删除了</span></div><div class="line"></div><div class="line">   <span class="comment">// 从init参数设置bean属性。</span></div><div class="line">   <span class="comment">//获得web.xml中的contextConfigLocation配置属性，就是spring MVC的配置文件</span></div><div class="line">   PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</div><div class="line">   <span class="keyword">if</span> (!pvs.isEmpty()) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</div><div class="line">         <span class="comment">//获取服务器的各种信息</span></div><div class="line">         ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</div><div class="line">         bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</div><div class="line">         <span class="comment">//模板方法，可以在子类中调用，做一些初始化工作，bw代表DispatcherServelt</span></div><div class="line">         initBeanWrapper(bw);</div><div class="line">         <span class="comment">//将配置的初始化值设置到DispatcherServlet中</span></div><div class="line">         bw.setPropertyValues(pvs, <span class="keyword">true</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">         <span class="comment">//日志代码</span></div><div class="line">         <span class="keyword">throw</span> ex;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Let subclasses do whatever initialization they like.</span></div><div class="line">   <span class="comment">//模板方法，子类初始化的入口方法</span></div><div class="line">   initServletBean();</div><div class="line"></div><div class="line">   <span class="comment">//日志代码删除了</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>FrameworkServlet</strong></p>
<p>其中重要方法如下：里面也就两句关键代码，日志代码我直接删掉了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        <span class="comment">//日志代码删除了</span></div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">        <span class="comment">//就是 try 语句里面有两句关键代码</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//初始化 webApplicationContext</span></div><div class="line">            <span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</div><div class="line">            <span class="comment">//模板方法，</span></div><div class="line">            initFrameworkServlet();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">            <span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">            <span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//日志代码删除了</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>再来看看上面代码中调用的 initWebApplicationContext() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//获取 rootContext</span></div><div class="line">        WebApplicationContext rootContext =</div><div class="line">                WebApplicationContextUtils.getWebApplicationContext(getServletContext());</div><div class="line">        WebApplicationContext wac = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 上下文实例在构造时注入 - &gt;使用它</span></div><div class="line">            wac = <span class="keyword">this</span>.webApplicationContext;</div><div class="line">            <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</div><div class="line">                ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</div><div class="line">                <span class="keyword">if</span> (!cwac.isActive()) &#123;</div><div class="line">                <span class="comment">// 如果上下文尚未刷新 -&gt; 提供诸如设置父上下文，设置应用程序上下文ID等服务</span></div><div class="line">                    <span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 上下文实例被注入没有显式的父类 -&gt; 将根应用程序上下文（如果有的话可能为null）设置为父级</span></div><div class="line">                        cwac.setParent(rootContext);</div><div class="line">                    &#125;</div><div class="line">                    configureAndRefreshWebApplicationContext(cwac);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// 当 WebApplicationContext 已经存在 ServletContext 中时，通过配置在 servlet 中的 ContextAttribute 参数获取</span></div><div class="line">            wac = findWebApplicationContext();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 如果 WebApplicationContext 还没有创建，则创建一个</span></div><div class="line">            wac = createWebApplicationContext(rootContext);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</div><div class="line">            <span class="comment">// 当 ContextRefreshedEvent 事件没有触发时调用此方法，模板方法，可以在子类重写</span></div><div class="line">            onRefresh(wac);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</div><div class="line">            <span class="comment">// 将 ApplicationContext 保存到 ServletContext 中去</span></div><div class="line">            String attrName = getServletContextAttributeName();</div><div class="line">            getServletContext().setAttribute(attrName, wac);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</div><div class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Published WebApplicationContext of servlet '"</span> + getServletName() +</div><div class="line">                        <span class="string">"' as ServletContext attribute with name ["</span> + attrName + <span class="string">"]"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wac;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>initWebApplicationContext 方法做了三件事：</p>
<ul>
<li>获取 Spring 的根容器 rootContext</li>
<li>设置 webApplicationContext 并根据情况调用 onRefresh 方法</li>
<li>将 webApplicationContext 设置到 ServletContext 中</li>
</ul>
<p>这里在讲讲上面代码中的 wac == null 的几种情况：</p>
<p>1）、当 WebApplicationContext 已经存在 ServletContext 中时，通过配置在 servlet 中的 ContextAttribute 参数获取，调用的是 findWebApplicationContext() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">findWebApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        String attrName = getContextAttribute();</div><div class="line">        <span class="keyword">if</span> (attrName == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        WebApplicationContext wac =</div><div class="line">                WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);</div><div class="line">        <span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No WebApplicationContext found: initializer not registered?"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wac;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>2)、如果 WebApplicationContext 还没有创建，调用的是 createWebApplicationContext 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123;</div><div class="line">        <span class="comment">//获取创建类型</span></div><div class="line">        Class&lt;?&gt; contextClass = getContextClass();</div><div class="line">        <span class="comment">//删除了打印日志代码</span></div><div class="line"></div><div class="line">        <span class="comment">//检查创建类型</span></div><div class="line">        <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</div><div class="line">                    <span class="string">"Fatal initialization error in servlet with name '"</span> + getServletName() +</div><div class="line">                    <span class="string">"': custom WebApplicationContext class ["</span> + contextClass.getName() +</div><div class="line">                    <span class="string">"] is not of type ConfigurableWebApplicationContext"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//具体创建</span></div><div class="line">        ConfigurableWebApplicationContext wac =</div><div class="line">                (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</div><div class="line"></div><div class="line">        wac.setEnvironment(getEnvironment());</div><div class="line">        wac.setParent(parent);</div><div class="line">  <span class="comment">//并设置的 contextConfigLocation 参数传给 wac，默认是 WEB-INFO/[ServletName]-Servlet.xml</span></div><div class="line">        wac.setConfigLocation(getContextConfigLocation());</div><div class="line"></div><div class="line">        <span class="comment">//调用的是下面的方法</span></div><div class="line">        configureAndRefreshWebApplicationContext(wac);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> wac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</div><div class="line">            <span class="comment">// The application context id is still set to its original default value</span></div><div class="line">            <span class="comment">// -&gt; assign a more useful id based on available information</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.contextId != <span class="keyword">null</span>) &#123;</div><div class="line">                wac.setId(<span class="keyword">this</span>.contextId);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Generate default id...</span></div><div class="line">                wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</div><div class="line">                        ObjectUtils.getDisplayString(getServletContext().getContextPath()) + <span class="string">'/'</span> + getServletName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        wac.setServletContext(getServletContext());</div><div class="line">        wac.setServletConfig(getServletConfig());</div><div class="line">        wac.setNamespace(getNamespace());</div><div class="line">        wac.addApplicationListener(<span class="keyword">new</span> SourceFilteringListener(wac, <span class="keyword">new</span> ContextRefreshListener()));</div><div class="line"></div><div class="line">        <span class="comment">// The wac environment's #initPropertySources will be called in any case when the context</span></div><div class="line">        <span class="comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span></div><div class="line">        <span class="comment">// use in any post-processing or initialization that occurs below prior to #refresh</span></div><div class="line">        ConfigurableEnvironment env = wac.getEnvironment();</div><div class="line">        <span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</div><div class="line">            ((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        postProcessWebApplicationContext(wac);</div><div class="line">        applyInitializers(wac);</div><div class="line">        wac.refresh();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>里面还有 doXXX() 方法，大家感兴趣的可以去看看。</p>
<p><strong>DispatcherServlet</strong></p>
<p>DispatcherServlet 继承自 FrameworkServlet，onRefresh 方法是 DispatcherServlet 的入口方法，在 initStrategies 方法中调用了 9 个初始化的方法。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/onrefresh.jpg" alt="onrefresh"></p>
<p>这里分析其中一个初始化方法：initLocaleResolver() 方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLocaleResolver</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//在 context 中获取</span></div><div class="line">            <span class="keyword">this</span>.localeResolver = context.getBean(LOCALE_RESOLVER_BEAN_NAME, LocaleResolver.class);</div><div class="line">            <span class="comment">//删除了打印日志的代码</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">            <span class="comment">//使用默认的策略</span></div><div class="line">            <span class="keyword">this</span>.localeResolver = getDefaultStrategy(context, LocaleResolver.class);</div><div class="line">            <span class="comment">//删除了打印日志的代码</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>查看默认策略代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">getDefaultStrategy</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">        <span class="comment">//调用 getDefaultStrategies 方法</span></div><div class="line">        List&lt;T&gt; strategies = getDefaultStrategies(context, strategyInterface);</div><div class="line">        <span class="keyword">if</span> (strategies.size() != <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                    <span class="string">"DispatcherServlet needs exactly 1 strategy for interface ["</span> + strategyInterface.getName() + <span class="string">"]"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> strategies.get(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Create a List of default strategy objects for the given strategy interface.</div><div class="line">     * &lt;p&gt;The default implementation uses the "DispatcherServlet.properties" file (in the same</div><div class="line">     * package as the DispatcherServlet class) to determine the class names. It instantiates</div><div class="line">     * the strategy objects through the context's BeanFactory.</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getDefaultStrategies</span><span class="params">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class="line">        String key = strategyInterface.getName();</div><div class="line">        <span class="comment">//根据策略接口的名字从 defaultStrategies 获取所需策略的类型</span></div><div class="line">        String value = defaultStrategies.getProperty(key);</div><div class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//如果有多个默认值的话，就以逗号分隔为数组</span></div><div class="line">            String[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class="line">            List&lt;T&gt; strategies = <span class="keyword">new</span> ArrayList&lt;&gt;(classNames.length);</div><div class="line">            <span class="comment">//按获取到的类型初始化策略</span></div><div class="line">            <span class="keyword">for</span> (String className : classNames) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Class&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class="line">                    Object strategy = createDefaultStrategy(context, clazz);</div><div class="line">                    strategies.add((T) strategy);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                            <span class="string">"Could not find DispatcherServlet's default strategy class ["</span> + className + <span class="string">"] for interface ["</span> + key + <span class="string">"]"</span>, ex);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (LinkageError err) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(</div><div class="line">                            <span class="string">"Error loading DispatcherServlet's default strategy class ["</span> + className + <span class="string">"] for interface ["</span> + key + <span class="string">"]: problem with class file or dependent class"</span>, err);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> strategies;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其他几个方法大概也类似，我就不再写了。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>主要讲了 Spring MVC 自身创建过程，分析了 Spring MVC 中 Servlet 的三个层次：HttpServletBean、FrameworkServlet 和 DispatcherServlet。HttpServletBean 继承自 Java 的 HttpServlet，其作用是将配置的参数设置到相应的属性上；FrameworkServlet 初始化了 WebApplicationContext；DispatcherServlet 初始化了自身的 9 个组件。</p>
<h3 id="Spring-MVC-之用"><a href="#Spring-MVC-之用" class="headerlink" title="Spring MVC 之用"></a>Spring MVC 之用</h3><p>分析 Spring MVC 是怎么处理请求的。首先分析 HttpServletBean、FrameworkServlet 和 DispatcherServlet 这三个 Servlet 的处理过程，最后分析 doDispatcher 的结构。</p>
<p><strong>HttpServletBean</strong></p>
<p>参与了创建工作，并没有涉及请求的处理。</p>
<p><strong>FrameworkServlet</strong></p>
<p>在类中的 service() 、doGet()、doPost()、doPut()、doDelete()、doOptions()、doTrace() 这些方法中可以看到都调用了一个共同的方法 processRequest() ，它是类在处理请求中最核心的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">        Throwable failureCause = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//获取 LocaleContextHolder 中原来保存的 LocaleContext</span></div><div class="line">        LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</div><div class="line">        <span class="comment">//获取当前请求的 LocaleContext</span></div><div class="line">        LocaleContext localeContext = buildLocaleContext(request);</div><div class="line">        <span class="comment">//获取 RequestContextHolder 中原来保存的 RequestAttributes</span></div><div class="line">        RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">        <span class="comment">//获取当前请求的 ServletRequestAttributes</span></div><div class="line">        ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"></div><div class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">        asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</div><div class="line"><span class="comment">//将当前请求的 LocaleContext 和 ServletRequestAttributes 设置到 LocaleContextHolder 和 RequestContextHolder</span></div><div class="line">        initContextHolders(request, localeContext, requestAttributes);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//实际处理请求的入口，这是一个模板方法，在 Dispatcher 类中才有具体实现</span></div><div class="line">            doService(request, response);</div><div class="line">        &#125;<span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">            failureCause = ex;</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">            failureCause = ex;</div><div class="line">            <span class="keyword">throw</span> ex;</div><div class="line">        &#125;<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            failureCause = ex;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//将 previousLocaleContext，previousAttributes 恢复到 LocaleContextHolder 和 RequestContextHolder 中</span></div><div class="line">            resetContextHolders(request, previousLocaleContext, previousAttributes);</div><div class="line">            <span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">                requestAttributes.requestCompleted();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//删除了日志打印代码</span></div><div class="line">            <span class="comment">//发布了一个 ServletRequestHandledEvent 类型的消息</span></div><div class="line">            publishRequestHandledEvent(request, response, startTime, failureCause);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>DispatcherServlet</strong></p>
<p>上一章中其实还没把该类讲清楚，在这个类中，里面的智行处理的入口方法应该是 doService 方法，方法里面调用了 doDispatch 进行具体的处理，在调用 doDispatch  方法之前  doService 做了一些事情：首先判断是不是 include 请求，如果是则对 request 的 Attribute 做个快照备份，等 doDispatcher 处理完之后（如果不是异步调用且未完成）进行还原 ，在做完快照后又对 request 设置了一些属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></div><div class="line">        <span class="comment">// to be able to restore the original attributes after the include.</span></div><div class="line">        Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</div><div class="line">            attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">            Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</div><div class="line">            <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</div><div class="line">                String attrName = (String) attrNames.nextElement();</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX))&#123;</div><div class="line">                    attributesSnapshot.put(attrName, request.getAttribute(attrName));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Make framework objects available to handlers and view objects.</span></div><div class="line">        request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</div><div class="line">        request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</div><div class="line">        request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</div><div class="line">        request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</div><div class="line"></div><div class="line">        FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</div><div class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</div><div class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</div><div class="line">        &#125;</div><div class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</div><div class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//调用 doDispatch 方法</span></div><div class="line">            doDispatch(request, response);</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">                <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></div><div class="line">                <span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</div><div class="line">                    restoreAttributesAfterInclude(request, attributesSnapshot);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>doDispatch() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HttpServletRequest processedRequest = request;</div><div class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">            Exception dispatchException = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//检查是不是上传请求</span></div><div class="line">                processedRequest = checkMultipart(request);</div><div class="line">                multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">                <span class="comment">// Determine handler for the current request.  根据 request 找到 Handler</span></div><div class="line">                mappedHandler = getHandler(processedRequest);</div><div class="line">                <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</div><div class="line">                    noHandlerFound(processedRequest, response);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Determine handler adapter for the current request.根据 Handler 找到对应的 HandlerAdapter</span></div><div class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line">                <span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">                <span class="comment">//处理 GET 、 HEAD 请求的 LastModified</span></div><div class="line">                String method = request.getMethod();</div><div class="line">                <span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">                <span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">                    <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                        logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//执行相应的 Interceptor 的 preHandle</span></div><div class="line">                <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// Actually invoke the handler. HandlerAdapter 使用 Handler 处理请求</span></div><div class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line">                <span class="comment">//如果需要异步处理，直接返回</span></div><div class="line">                <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//当 view 为空时，根据 request 设置默认 view</span></div><div class="line">                applyDefaultViewName(processedRequest, mv);</div><div class="line">                <span class="comment">//执行相应 Interceptor 的 postHandler</span></div><div class="line">                mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">            &#125;<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                dispatchException = ex;</div><div class="line">            &#125;<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">                <span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></div><div class="line">                <span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></div><div class="line">                dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//调用 processDispatchResult 方法处理上面处理之后的结果（包括处理异常，渲染页面，发出完成通知触发 Interceptor 的 afterCompletion）</span></div><div class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">        &#125;<span class="keyword">catch</span> (Throwable err) &#123;</div><div class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler,</div><div class="line">                    <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//判断是否执行异步请求</span></div><div class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">                <span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">                <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Clean up any resources used by a multipart request. 删除上传请求的资源</span></div><div class="line">                <span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">                    cleanupMultipart(processedRequest);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> Handler，HandlerMapping，HandlerAdapter 三个区别：</p>
<ul>
<li>Handler：处理器，对应 MVC 的 C层，也就是 Controller 层，具体表现形式有很多种，可以是类，方法，它的类型是 Object，只要可以处理实际请求就可以是 Handler。</li>
<li>HandlerMapping：用来查找 Handler 的。</li>
<li>HandlerAdapter ：Handler 适配器，</li>
</ul>
<p>另外 View 和 ViewResolver 的原理与 Handler 和 HandlerMapping 的原理类似。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/doDispatcher.png" alt="doDispatcher"></p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>本章分析了 Spring MVC 的请求处理的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring MVC&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/spring-mvc.png&quot; alt=&quot;spring-mvc&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>看透 Spring MVC 源代码分析与实践 ——  网站基础知识</title>
    <link href="http://yoursite.com/2017/07/14/Spring-MVC01/"/>
    <id>http://yoursite.com/2017/07/14/Spring-MVC01/</id>
    <published>2017-07-14T11:08:14.505Z</published>
    <updated>2017-07-14T11:26:28.978Z</updated>
    
    <content type="html"><![CDATA[<h3 id="网站架构及其演变过程"><a href="#网站架构及其演变过程" class="headerlink" title="网站架构及其演变过程"></a>网站架构及其演变过程</h3><h4 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h4><p>网络传输分解方式：</p>
<ul>
<li>标准的 OSI 参考模型</li>
<li>TCP/IP 参考模型</li>
</ul>
<p><img src="http://ohfk1r827.bkt.clouddn.com/OSI-TCPIP.jpg" alt="OSI-TCPIP"><br><a id="more"></a></p>
<h4 id="海量数据的解决方案"><a href="#海量数据的解决方案" class="headerlink" title="海量数据的解决方案"></a>海量数据的解决方案</h4><ul>
<li><p>缓存和页面静态化</p>
<ul>
<li>缓存<ul>
<li>通过程序直接保存在内存中</li>
<li>使用缓存框架 （Encache、Redis、Memcache）</li>
</ul>
</li>
<li>页面静态化<ul>
<li>使用模板技术生成（Velocity、FreeMaker等）</li>
</ul>
</li>
</ul>
</li>
<li><p>数据库优化</p>
<ul>
<li>表结构优化</li>
<li>SQL 语句优化</li>
<li>分区</li>
<li>分表</li>
<li>索引优化</li>
<li>使用存储过程代替直接操作过程</li>
</ul>
</li>
<li><p>分离活跃数据</p>
</li>
<li><p>批量读取和延迟修改</p>
</li>
<li><p>读写分离</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/read-write.jpg" alt="read-write"></p>
</li>
<li><p>分布式数据库</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/sql-1.jpg" alt="sql-1"></p>
</li>
<li><p>NoSQL 和 Hadoop</p>
</li>
</ul>
<h4 id="高并发的解决方案"><a href="#高并发的解决方案" class="headerlink" title="高并发的解决方案"></a>高并发的解决方案</h4><ul>
<li>应用和静态资源的分离：静态文件（图片、视频、JS、CSS等）放在专门的服务器上</li>
<li>页面缓存（Nginx 服务器、Squid 服务器）</li>
<li>集群与分布式</li>
<li>反向代理</li>
<li>CDN</li>
<li>底层优化：网络传输协议</li>
</ul>
<h3 id="常见协议和标准"><a href="#常见协议和标准" class="headerlink" title="常见协议和标准"></a>常见协议和标准</h3><h4 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h4><p>IP：查找地址，对应着国际互联网</p>
<p>TCP：规范传输规则，对应着传输层</p>
<p>TCP 在传输之前会进行三次沟通，称 “三次握手”，传完数据断开的时候要进行四次沟通，称 “四次挥手”。</p>
<p>TCP 两个序号，三个标志位含义：</p>
<ul>
<li>seq：表示所传数据的序号。TCP 传输时每一个字节都有一个序号，发送数据的时候会将数据的第一个序号发送给对方，接收方会按序号检查是否接收完整了，如果没接收完整就需要重新传送，这样就可以保证数据的完整性。</li>
<li>ack：表示确认号。接收端用它来给发送端反馈已经成功接收到的数据信息，它的值为希望接收的下一个数据包起始序号。</li>
<li>ACK：确认位，只有 ACK = 1 的时候 ack 才起作用。正常通信时 ACK 为 1，第一次发起请求时因为没有需要确认接收的数据所以 ACK 为 0。</li>
<li>SYN：同步位，用于在建立连接时同步序号。刚开始建立连接时并没有历史接收的数据，所以 ack  也就没有办法设置，这是按照正常的机制就无法运行了，SYN 的作用就是解决这个问题的，当接收端接收到 SYN = 1 的报文时就会直接将 ack 设置为接收到的 seq + 1 的值，注意这里的值并不是检验后设置的，而是根据 SYN 直接设置的，这样正常的机制就可以运行了，所以 SYN 叫同步位。SYN 会在前两次握手时都为 1，这是因为通信的双方的 ack 都需要设置一个初始值。</li>
<li>FIN：终止位，用来在数据传输完毕后释放连接。</li>
</ul>
<p><img src="http://ohfk1r827.bkt.clouddn.com/TCP.jpg" alt="TCP"></p>
<h3 id="DNS-的设置"><a href="#DNS-的设置" class="headerlink" title="DNS 的设置"></a>DNS 的设置</h3><h4 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h4><p>参考域名设置，如下是我在腾讯云域名的设置</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/dns.jpg" alt="dns"></p>
<p>记录类型：</p>
<p><strong>A记录：</strong> 将域名指向一个IPv4地址（例如：8.8.8.8）<br><strong>CNAME</strong>：将域名指向另一个域名（例如 www.54tianzhisheng.cn）<br><strong>MX</strong>： 将域名指向邮件服务器地址<br><strong>TXT</strong>： 可任意填写，长度限制255，通常做SPF记录（反垃圾邮件）<br><strong>NS</strong>： 域名服务器记录，将子域名指定其他DNS服务器解析<br><strong>AAAA</strong>：将域名指向一个iPv6地址（例如：ff06:0:0:0:0:0:0:c3）<br><strong>SRV</strong>：记录提供特定服务的服务器（例如_xmpp-server._tcp）<br><strong>显性URL</strong>：将域名301重定向到另一个地址<br><strong>隐性URL</strong>：类似显性URL，但是会隐藏真实目标地址</p>
<p>主机记录：</p>
<p><strong>要解析 www.54tianzhisheng.cn，请填写 www。</strong><br><strong>主机记录就是域名前缀，常见用法有：</strong></p>
<p><strong>www: </strong>解析后的域名为 www.54tianzhisheng.cn。<br><strong>@:</strong> 直接解析主域名 54tianzhisheng.cn。<br><strong>*:</strong> 泛解析，匹配其他所有域名 <em>.54tianzhisheng.cn。<br><strong>mail:</strong> 将域名解析为 mail.54tianzhisheng.cn，通常用于解析邮箱服务器。<br><strong>二级域名:</strong> 如：abc.54tianzhisheng.cn，填写abc。<br><em>*手机网站:</em></em> 如：m.54tianzhisheng.cn，填写m。</p>
<h3 id="Java-中-Socket-的用法"><a href="#Java-中-Socket-的用法" class="headerlink" title="Java 中 Socket 的用法"></a>Java 中 Socket 的用法</h3><h4 id="普通-Soket-的用法"><a href="#普通-Soket-的用法" class="headerlink" title="普通 Soket 的用法"></a>普通 Soket 的用法</h4><p>Socket 分为 ServerSocket 和 Socket 两大类。</p>
<p>ServerSocket 用于服务器端，可以通过 accept 方法监听请求，监听到请求后返回 Socket；</p>
<p>Socket 用户具体完成数据传输，客户端直接使用 Socket 发送请求并传输数据。</p>
<p>随便写了个单方面发送消息的 demo：</p>
<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/5/2.</div><div class="line"> * TCP客户端：</div><div class="line"> ①：建立tcp的socket服务，最好明确具体的地址和端口。这个对象在创建时，就已经可以对指定ip和端口进行连接(三次握手)。</div><div class="line"> ②：如果连接成功，就意味着通道建立了，socket流就已经产生了。只要获取到socket流中的读取流和写入流即可，只要通过getInputStream和getOutputStream就可以获取两个流对象。</div><div class="line"> ③：关闭资源。</div><div class="line"> */</div><div class="line"><span class="comment">//单方面的输入！</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Socket s = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</div><div class="line">            OutputStream o = s.getOutputStream();</div><div class="line">            o.write(<span class="string">"tcp sssss"</span>.getBytes());</div><div class="line">            s.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务器端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 10412 on 2017/5/2.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);<span class="comment">//建立服务端的socket服务</span></div><div class="line">            Socket s = ss.accept();<span class="comment">//获取客户端对象</span></div><div class="line">            String ip = s.getInetAddress().getHostAddress();</div><div class="line">            <span class="keyword">int</span> port = s.getPort();</div><div class="line">            System.out.println(ip + <span class="string">" : "</span> + port + <span class="string">" connected"</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 可以通过获取到的socket对象中的socket流和具体的客户端进行通讯。</span></div><div class="line">            InputStream ins = s.getInputStream();<span class="comment">//读取客户端的数据，使用客户端对象的socket读取流</span></div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len = ins.read(bytes);</div><div class="line">            String text = <span class="keyword">new</span> String(bytes, <span class="number">0</span>, len);</div><div class="line">            System.out.println(text);</div><div class="line">            <span class="comment">//关闭资源</span></div><div class="line">            s.close();</div><div class="line">            ss.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="NioSocket-的用法"><a href="#NioSocket-的用法" class="headerlink" title="NioSocket 的用法"></a>NioSocket 的用法</h4><p>见以前的一篇文章：<a href="http://www.54tianzhisheng.cn/2017/03/28/Java%20NIO%20%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Java NIO 系列教程</a></p>
<p>书中第五章简单的讲了下实现 HTTP 协议。第六章主要讲 Servlet，写了 Servlet 接口和其实现类。第七章把 Tomcat 分析的很不错，如果有读者感兴趣的话，可以去看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;网站架构及其演变过程&quot;&gt;&lt;a href=&quot;#网站架构及其演变过程&quot; class=&quot;headerlink&quot; title=&quot;网站架构及其演变过程&quot;&gt;&lt;/a&gt;网站架构及其演变过程&lt;/h3&gt;&lt;h4 id=&quot;基础结构&quot;&gt;&lt;a href=&quot;#基础结构&quot; class=&quot;headerlink&quot; title=&quot;基础结构&quot;&gt;&lt;/a&gt;基础结构&lt;/h4&gt;&lt;p&gt;网络传输分解方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准的 OSI 参考模型&lt;/li&gt;
&lt;li&gt;TCP/IP 参考模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/OSI-TCPIP.jpg&quot; alt=&quot;OSI-TCPIP&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring MVC" scheme="http://yoursite.com/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>通过源码详解 Servlet</title>
    <link href="http://yoursite.com/2017/07/09/servlet/"/>
    <id>http://yoursite.com/2017/07/09/servlet/</id>
    <published>2017-07-09T05:47:19.553Z</published>
    <updated>2017-07-09T05:54:51.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet-结构"><a href="#Servlet-结构" class="headerlink" title="Servlet 结构"></a>Servlet 结构</h2><p><img src="http://ohfk1r827.bkt.clouddn.com/servlet1.png" alt="servlet1"></p>
<h3 id="1、Servlet"><a href="#1、Servlet" class="headerlink" title="1、Servlet"></a>1、Servlet</h3><p>Servlet 该接口定义了5个方法。<br><a id="more"></a></p>
<ul>
<li>init()，初始化 servlet 对象，完成一些初始化工作。它是由 servlet 容器控制的，该方法只能被调用一次</li>
<li>service()，接受客户端请求对象，执行业务操作，利用响应对象响应客户端请求。</li>
<li>destroy()，当容器监测到一个servlet从服务中被移除时，容器调用该方法，释放资源，该方法只能被调用一次。</li>
<li>getServletConfig()，ServletConfig 是容器向 servlet 传递参数的载体。</li>
<li>getServletInfo()，获取 servlet 相关信息。</li>
</ul>
<p>Servlet 的生命周期：</p>
<blockquote>
<p>1，初始化阶段  调用 init() 方法</p>
<p>2，响应客户请求阶段　　调用 service() 方法</p>
<p>3，终止阶段　　调用 destroy() 方法</p>
</blockquote>
<p>在 Servlet 接口中的五个方法中涉及的接口有三个：ServletConfig 、 ServletRequest、 ServletResponse</p>
<p>这里先讲讲 ServletRequest 和 ServletResponse。</p>
<p>1）ServletRequest  由 Servlet 容器来管理，当客户请求到来时，容器创建一个 ServletRequest 对象，封装请求数据，同时创建一个 ServletResponse 对象，封装响应数据。这两个对象将被容器作为 service（）方法的参数传递给 Servlet，Serlvet 利用 ServletRequest 对象获取客户端发来的请求数据，利用 ServletResponse 对象发送响应数据。</p>
<p>下面是 ServletRequest  中所有的方法，根据方法名大概就可以猜到这些方法到底是干啥用的。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/ServletRequest.png" alt="ServletRequest"></p>
<p>2）ServletResponse 发送响应数据</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/ServletResponse.png" alt="ServletResponse"></p>
<h3 id="2、ServletConfig"><a href="#2、ServletConfig" class="headerlink" title="2、ServletConfig"></a>2、ServletConfig</h3><p>ServletConfig 是容器向 servlet 传递参数的载体。</p>
<p>ServletConfig的4个常用方法：</p>
<p>1）public String getInitParameter（String name）：返回指定名称的初始化参数值；</p>
<p>2）public Enumeration getInitParameterNames（）：返回一个包含所有初始化参数名的 Enumeration 对象；</p>
<p>3）public String getServletName()：返回在 DD 文件中<code>&lt;servlet-name&gt;</code>元素指定的 Servlet 名称；</p>
<p>4）public ServletContext getServletContext（）：返回该 Servlet 所在的上下文对象；</p>
<p>这里详细讲下 ServletContext ：</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/ServletContext.png" alt="ServletContext"></p>
<p>Servlet 上下文对象（ServletContext）：每个Web应用程序在被启动时都会创建一个唯一的上下文对象，Servlet 可通过其获得 Web 应用程序的初始化参数或 Servlet 容器的版本等信息，也可被 Servlet 用来与其他 Servlet 共享数据。</p>
<p>1、获得 ServletContext 应用：</p>
<p>（1）、直接调用 getServletContext（）方法</p>
<p>ServletContext context = getServletContext（）;</p>
<p>（2）、使用 ServletConfig 应用，再调用它的 getServletContext（）方法</p>
<p>ServletContext context = getServletConfig.getServletContext();</p>
<p>2、获得应用程序的初始化参数：</p>
<p>（1）、public String getInitParameter（String name）：返回指定参数名的字符串参数值，没有则返回 null；</p>
<p>（2）、public Enumeration getInitParameterNames()：返回一个包含多有初始化参数名的 Enumeration 对象；</p>
<p>3、通过 ServletContext 对象获得资源</p>
<p>（1）、public URl getResource（String path）:返回由给定路径的资源的 URL 对象，以 “/” 开头，为相对路径，相对于Web 应用程序的文档根目录；</p>
<p>（2）、public InputStream getResourceAsStream（String path）：从资源上获得一个 InputStream 对象，等价于getResource（path）.oprenStream();</p>
<p>（3）、public String getRealPath(String path)：返回给定的虚拟路径的真实路径；</p>
<p>4、登陆日志：使用 log（）方法可以将指定的消息写到服务器的日志文件中</p>
<p>（1）、public void log（String msg）：参数 msg 为写入日志文件消息</p>
<p>（2）、public void log（String msg，Throwable throwable）：将 msg 指定的消息和异常的栈跟踪信息写入日志文件</p>
<p>5、使用 RequestDispatcher 实现请求转发</p>
<p>（1）、RequestDispatcher getRequestDiapatcher(String path)：必须以 “/“ 开头相对于应用程序根目录，而ServletRequest 可以传递一个相对路径</p>
<p>（2）、RequestDipatcher getNamedDiapatcher（String name）：参数 name 为一个命名的 Servlet 对象</p>
<p>6、使用 ServletContext 对象存储数据</p>
<p>（1）、public void serAttribute（String name，Object object）：将给定名称的属性值对象绑定到上下文对象上；</p>
<p>（2）、public Object getAttribute（String name）：返回绑定到上下文对象的给定名称的属性值；</p>
<p>（3）、public Enumeration getAttributeNames()：返回绑定到上下文对象上的所有属性名的 Enumeration 对象；</p>
<p>（4）、public void removeAttribute（String name）：删除绑定到上下文对象指定名称的属性；</p>
<p>ServletRequest 共享的对象仅在请求的生存周期中可以被访问；</p>
<p>HttpSession 共享的对象仅在会话的生存周期中可以被访问；</p>
<p>ServletContext 共享的对象在整个 Web 应用程序启动的生存周期中可以被访问；</p>
<p>7、检索 Servlet 容器的信息</p>
<p>（1）、public String getServletInfo()：返回 Servlet 所运行容器的名称和版本；</p>
<p>（2）、public int getMajorVersion（）：返回容器所支持的 Servlet API 的主版本号；</p>
<p>（3）、public int  getMinorVersion（）：返回容器所支持的 Servlet API 的次版本号；</p>
<p>（4）、public String getServletContext（）：返回 ServletContext 对应的 web 应用程序名称 <code>&lt;display-name&gt;</code>元素定义的名称；</p>
<h3 id="3、GenericServlet-抽象类"><a href="#3、GenericServlet-抽象类" class="headerlink" title="3、GenericServlet 抽象类"></a>3、GenericServlet 抽象类</h3><p>GenericServlet  定义了一个通用的，不依赖具体协议的 Servlet，它实现了 Servlet 接口和 ServletConfig 接口，它的方法在文章的第一张图就给出了。</p>
<h3 id="4、HttpServlet-抽象类"><a href="#4、HttpServlet-抽象类" class="headerlink" title="4、HttpServlet 抽象类"></a>4、HttpServlet 抽象类</h3><h4 id="4-1、HTTP-请求方式"><a href="#4-1、HTTP-请求方式" class="headerlink" title="4.1、HTTP 请求方式"></a>4.1、HTTP 请求方式</h4><p><img src="http://ohfk1r827.bkt.clouddn.com/http-request-method.jpg" alt="http-request-method"></p>
<ol>
<li>GET : 获取由请求 URL 标识的资源</li>
<li>POST : 向 Web 服务器发送无限制长度的数据</li>
<li>PUT : 存储一个资源到请求的 URL</li>
<li>DELETE : 删除由 URL 标识的资源</li>
<li>HEAD : 返回 URL 标识的头信息</li>
<li>OPTIONS : 返回服务器支持的 HTTP 方法</li>
<li>TRACE : 返回 TRACE 请求附带的头字段</li>
</ol>
<h4 id="4-2、对应的服务方法："><a href="#4-2、对应的服务方法：" class="headerlink" title="4.2、对应的服务方法："></a>4.2、对应的服务方法：</h4><ol>
<li>doGet() : 调用服务器的资源, 并将其作为响应返回给客户端.  doGet() 调用在 URL 里显示正在传送给 Servlet 的数据,这在系统的安全方面可能带来一些问题, 比如说, 用户登录时,  表单里的用户名和密码需要发送到服务器端, doGet() 调用会在浏览器的 URL 里显示用户名和密码.</li>
<li>doPost() : 它用于把客户端的数据传给服务端, 使用它可以以隐藏方式给服务器端发送数据. Post 适合发送大量数据.</li>
<li>doPut() : 调用和 doPost() 相似, 并且它允许客户端把真正的文件存放在服务器上, 而不仅仅是传送数据.</li>
<li>doDelete() : 它允许客户端删除服务器端的文件或者 Web 页面．它的使用非常少．</li>
<li>doHead() : 它用于处理客户端的 Head 调用,并且返回一个 response. 当客户端只需要响应的 Header 时,它就发出一个Header 请求.这种情况下客户端往往关心响应的长度和响应的 MIME 类型.</li>
<li>doOptions(): 它用于处理客户端的 Options 调用,通过这个调用, 客户端可以获得此 Servlet 支持的方法.如果 Servlet 覆盖了 doPost() 方法, 那么将返回: Allow: POST, TRACE, OPTIONS, HEAD</li>
<li>doTrace：处理 TRACE 请求</li>
</ol>
<h4 id="4-3、Servlet-Service-方法详解"><a href="#4-3、Servlet-Service-方法详解" class="headerlink" title="4.3、Servlet   Service 方法详解"></a>4.3、Servlet   Service 方法详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException</div><div class="line">    &#123;</div><div class="line">        HttpServletRequest  request;</div><div class="line">        HttpServletResponse response;</div><div class="line">        <span class="comment">// 如果传入的 HTTP 请求和 HTTP 响应不是 HTTP 的领域模型，则抛出 Servlet 异常，这个异常会被 Servlet 容器所处理</span></div><div class="line">        <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp;</div><div class="line">                res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</div><div class="line">        &#125;</div><div class="line">		<span class="comment">// 既然是 HTTP 协议绑定的 Serlvet, 强制转换到 HTTP 的领域模型</span></div><div class="line">        request = (HttpServletRequest) req;</div><div class="line">        response = (HttpServletResponse) res;</div><div class="line">		<span class="comment">// 如果传入的请求和响应是预期的 HTTP 请求和 HTTP 响应，则调用 HttpServlet 的 service() 方法。</span></div><div class="line">        service(request, response);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="4-4、HttpServlet-service-方法详解"><a href="#4-4、HttpServlet-service-方法详解" class="headerlink" title="4.4、HttpServlet   service  方法详解"></a>4.4、HttpServlet   service  方法详解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException</div><div class="line">    &#123;</div><div class="line">    <span class="comment">// 从 HTTP 请求中取得这次请求所使用的 HTTT 方法</span></div><div class="line">        String method = req.getMethod();</div><div class="line">		<span class="comment">// 如果这次请求使用 GET 方法</span></div><div class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</div><div class="line">        	<span class="comment">// 取得这个 Servlet 的最后修改的时间</span></div><div class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</div><div class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">// servlet doesn't support if-modified-since, no reason</span></div><div class="line">                <span class="comment">// to go through further expensive logic</span></div><div class="line">                <span class="comment">//-1 代表这个 Servlet 不支持最后修改操作，直接调用 doGet() 进行处理 HTTP GET 请求</span></div><div class="line">                doGet(req, resp);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            	<span class="comment">// 如果这个 Servlet 支持最后修改操作，取得请求头中包含的请求的最后修改时间</span></div><div class="line">                <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</div><div class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</div><div class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></div><div class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></div><div class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></div><div class="line">                    <span class="comment">// 如果请求头中包含的修改时间早于这个 Servlet 的最后修改时间，说明这个 Servlet 自从客户上一次 HTTP 请求已经被修改了 , 设置最新修改时间到响应头中</span></div><div class="line">                    maybeSetLastModified(resp, lastModified);</div><div class="line">                    <span class="comment">// 调用 doGet 进行进行处理 HTTP GET 请求</span></div><div class="line">                    doGet(req, resp);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 如果请求头中包含修改时间晚于这个 Servlet 的最后修改时间，说明这个 Servlet 自从请求的最后修改时间后没有更改过，这种情况下，仅仅返回一个 HTTP 响应状态 SC_NOT_MODIFIED</span></div><div class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</div><div class="line">        <span class="comment">// 如果这次请求使用 HEAD 方法</span></div><div class="line">         <span class="comment">// 如果这个 Servlet 支持最后修改操作，则设置这个 Servlet 的最后修改时间到响应头中</span></div><div class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</div><div class="line">            maybeSetLastModified(resp, lastModified);</div><div class="line">            <span class="comment">// 和对 HTTP GET 方法处理不同的是，无论请求头中的修改时间是不是早于这个 Sevlet 的最后修改时间，都会发 HEAD 响应给客户，因为 HTTP HEAD 响应是用来查询 Servlet 头信息的操作</span></div><div class="line">            doHead(req, resp);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</div><div class="line">        <span class="comment">// 如果这次请求使用 POST 方法</span></div><div class="line">            doPost(req, resp);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</div><div class="line">        <span class="comment">// 如果这次请求使用 PUT 方法</span></div><div class="line">            doPut(req, resp);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</div><div class="line">        <span class="comment">// 如果这次请求使用 DELETE 方法</span></div><div class="line">            doDelete(req, resp);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</div><div class="line">        <span class="comment">// 如果这次请求使用 OPTIONS 方法</span></div><div class="line">            doOptions(req,resp);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</div><div class="line">        <span class="comment">// 如果这次请求使用 TRACE 方法</span></div><div class="line">            doTrace(req,resp);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></div><div class="line">            <span class="comment">// method was requested, anywhere on this server.</span></div><div class="line">			<span class="comment">// 如果这次请求是其他未知方法，返回错误代码 SC_NOT_IMPLEMENTED 给 HTTP 响应，并且显示一个错误消息，说明这个操作是没有实现的</span></div><div class="line">            String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</div><div class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">            errArgs[<span class="number">0</span>] = method;</div><div class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</div><div class="line"></div><div class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="5、Servlet-的多线程问题"><a href="#5、Servlet-的多线程问题" class="headerlink" title="5、Servlet 的多线程问题"></a>5、Servlet 的多线程问题</h3><p>1、当涉及到 Servlet 需要共享资源是，需保证 Servlet 是线程安全的</p>
<p>2、注意事项：</p>
<p>（1）、用方法的局部变量保持请求中的专有数据；</p>
<p>（2）、只用 Servlet 的成员变量来存放那些不会改变的数据；</p>
<p>（3）、对可能被请求修改的成员变量同步（用 Synchronized 关键字修饰）；</p>
<p>（4）、如果 Servlet 访问外部资源，那么需要同步访问这些资源；</p>
<p>3、实现 SingleThreadModel 接口的 Servlet 在被多个客户请求时一个时刻只能有一个线程运行，不推荐使用。</p>
<p>4、如果必须在 servlet 使用同步代码，应尽量在最小的范围上（代码块）进行同步，同步代码越少，Servlet 执行才能越好，避免对 doGet() 或 doPost() 方法同步。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>全文首先通过一张 Servlet 中的核心 Servlet 类图关系，了解了几种 Servlet 之间的关系及其内部方法。然后在分别介绍这几种 Servlet，通过分析部分重要方法的源码来了解，还介绍了 Servlet 中多线程的问题的解决方法。</p>
<p>注：文章原创，首发于：<a href="http://www.54tianzhisheng.cn" target="_blank" rel="external">zhisheng 的博客</a>，文章可转载但请注明地址为：<a href="http://www.54tianzhisheng.cn/2017/07/09/servlet/" target="_blank" rel="external">http://www.54tianzhisheng.cn/2017/07/09/servlet/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Servlet-结构&quot;&gt;&lt;a href=&quot;#Servlet-结构&quot; class=&quot;headerlink&quot; title=&quot;Servlet 结构&quot;&gt;&lt;/a&gt;Servlet 结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://ohfk1r827.bkt.clouddn.com/servlet1.png&quot; alt=&quot;servlet1&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、Servlet&quot;&gt;&lt;a href=&quot;#1、Servlet&quot; class=&quot;headerlink&quot; title=&quot;1、Servlet&quot;&gt;&lt;/a&gt;1、Servlet&lt;/h3&gt;&lt;p&gt;Servlet 该接口定义了5个方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Velocity 循环指令一种好的解决方法</title>
    <link href="http://yoursite.com/2017/06/25/Velocity-foreach/"/>
    <id>http://yoursite.com/2017/06/25/Velocity-foreach/</id>
    <published>2017-06-25T05:01:16.352Z</published>
    <updated>2017-06-28T02:42:50.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>前台的数据经常是由需要通过 foreach 循环获取。</p>
<h3 id="好的解决方案：（拿我最近做的一个项目做例子）"><a href="#好的解决方案：（拿我最近做的一个项目做例子）" class="headerlink" title="好的解决方案：（拿我最近做的一个项目做例子）"></a>好的解决方案：（拿我最近做的一个项目做例子）</h3><p>购物商城左边的导航栏，商品大分类和小分类（Category）</p>
<p><strong>1、在 model 包下创建一个 ViewObject 类</strong></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class ViewObject</div><div class="line">&#123;</div><div class="line">    private Map&lt;String, Object&gt; objs = new HashMap&lt;&gt;();</div><div class="line">    public void set(String key, Object value) &#123;</div><div class="line">        objs.put(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object get(String key) &#123;</div><div class="line">        return objs.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2、在 controller 包下创建个 BaseController 类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 在每个页面显示图书大分类，抽离出来</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewObject&gt; <span class="title">selectAllCategory</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Category&gt; categories = categoryService.selectAllCategory();</div><div class="line">        List&lt;ViewObject&gt; vos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Category category : categories) &#123;</div><div class="line">            ViewObject vo = <span class="keyword">new</span> ViewObject();</div><div class="line">            vo.set(<span class="string">"category"</span>, category);</div><div class="line">            vo.set(<span class="string">"id"</span>, category.getId());</div><div class="line">            <span class="comment">//System.out.println("category 中的 id 是 "+category.getId());</span></div><div class="line">            vos.add(vo);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> vos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取图书的小分类，在这里将小分类中的大分类id查找出来，保存在 cds.id 中，</div><div class="line">     * 然后在模板引擎中通过将 vos.id 和 cds.id 相比较。然后如果相同的话，就取出来放在对应的大分类下</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewObject&gt; <span class="title">selectAllCategoryDetail</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;CategoryDetail&gt; categoryDetails  = categoryDetailService.selectAllCategoryDetail();</div><div class="line">        List&lt;ViewObject&gt; cds = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (CategoryDetail categoryDetail : categoryDetails) &#123;</div><div class="line">            ViewObject vo = <span class="keyword">new</span> ViewObject();</div><div class="line">            vo.set(<span class="string">"categoryDetail"</span>, categoryDetail);</div><div class="line">            <span class="comment">//System.out.println("categoryDetail 中的 categoryDetail  id  =" + categoryDetail.getId() + "category id = " + categoryDetail.getCategory_id() + " name = " + categoryDetail.getName());</span></div><div class="line">            vo.set(<span class="string">"id"</span>, categoryDetail.getCategory_id());</div><div class="line">            cds.add(vo);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> cds;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>3、在 IndexController 类下，需要继承 BaseController.java 类</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 返回首页</div><div class="line">     * <span class="doctag">@param</span> model</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(path = &#123;<span class="string">"/"</span>, <span class="string">"/index"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        <span class="comment">//模板引擎设置图书分类左边导航栏</span></div><div class="line">        model.addAttribute(<span class="string">"vos"</span>, selectAllCategory());</div><div class="line">        model.addAttribute(<span class="string">"cds"</span>, selectAllCategoryDetail());</div><div class="line">      <span class="comment">//返回主页</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>4、抽离导航部分的代码 left.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--左边图书分类导航栏--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c3_b1_left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">        #foreach($vo in $vos)</div><div class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>$!&#123;vo.category.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">                #foreach($cd in $cds)</div><div class="line">                #if($vo.id == $cd.id)</div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/list"</span>&gt;</span>$!&#123;cd.categoryDetail.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                #end</div><div class="line">                #end</div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">        #end</div><div class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>5、首页中相应的位置引入 left.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#parse("left.html")</div></pre></td></tr></table></figure>
<p>这样就可以解决问题了，可是有时候我们需要控制循环的个数，因为我们网页端可能只需要特定的数据量</p>
<p>那么就需要中断 foreach，可以使用 #break 指令终止循环</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#foreach( $vo in $vos )</div><div class="line">    #if( $foreach.count &gt; 5 )</div><div class="line">        #break</div><div class="line">    #end</div><div class="line">    $!&#123;vo.customer.Name&#125;</div><div class="line">#end</div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://my.oschina.net/u/2000201/blog/539217" target="_blank" rel="external">Velocity入门指南——第七章 循环指令 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;前台的数据经常是由需要通过 foreach 循环获取。&lt;/p&gt;
&lt;h3 id=&quot;好的解决方案：（拿我最近做的一个项目做例子）&quot;&gt;&lt;a href=&quot;#好的解决方案：（拿我最近做的一个项目做例子）&quot; class=&quot;headerlink&quot; title=&quot;好的解决方案：（拿我最近做的一个项目做例子）&quot;&gt;&lt;/a&gt;好的解决方案：（拿我最近做的一个项目做例子）&lt;/h3&gt;&lt;p&gt;购物商城左边的导航栏，商品大分类和小分类（Category）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、在 model 包下创建一个 ViewObject 类&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Velocity" scheme="http://yoursite.com/tags/Velocity/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 学习</title>
    <link href="http://yoursite.com/2017/06/23/AJAX/"/>
    <id>http://yoursite.com/2017/06/23/AJAX/</id>
    <published>2017-06-23T14:00:05.420Z</published>
    <updated>2017-06-23T15:17:44.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>最近的项目中大量地方需要使用 AJAX，无奈，谁叫我既要写前台又要写后台呢，只好学习下这个技术点，主要参考 <a href="http://www.w3school.com.cn/ajax/index.asp" target="_blank" rel="external">W3school 文档</a>，下面记录下这些知识点，便于日后自己查阅，下面的一些测试代码建议在 W3school 中测试。</p>
<h3 id="AJAX-基础："><a href="#AJAX-基础：" class="headerlink" title="AJAX 基础："></a>AJAX 基础：</h3><p> AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p>
<p><strong>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</strong> 在很多网站可以见到使用这种技术。<br><a id="more"></a></p>
<h3 id="AJAX-XMLHttpRequest"><a href="#AJAX-XMLHttpRequest" class="headerlink" title="AJAX -  XMLHttpRequest"></a>AJAX -  XMLHttpRequest</h3><ul>
<li>创建 XMLHttpRequest 对象</li>
</ul>
<p><strong>XMLHttpRequest 是 AJAX 的基础。</strong>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p>
<p>创建 XMLHttpRequest 对象的语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">variable = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>
<p>但是对于老版本的 Internet Explorer （IE5 和 IE6）却是使用 ActiveX 对象，所以在开发中为了适应大多数的浏览器，常使用如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ul>
<li>向服务器发送请求</li>
</ul>
<p>使用 XMLHttpRequest 对象的 open() 和 send() 方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"test1.txt"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>method</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td>open(method, url, async)</td>
<td>规定请求的类型、URL 以及是否异步处理请求。method：请求的类型；GET 或 POST   url：文件在服务器上的位置   async：true（异步）或 false（同步）</td>
</tr>
<tr>
<td>send(string)</td>
<td>将请求发送到服务器。string：仅用于 POST 请求</td>
</tr>
</tbody>
</table>
<p><strong>GET 还是 POST？</strong></p>
<p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p>
<p>然而，在以下情况中，请使用 POST 请求：</p>
<ul>
<li>无法使用缓存文件（更新服务器上的文件或数据库）</li>
<li>向服务器发送大量数据（POST 没有数据量限制）</li>
<li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li>
</ul>
<p>示例：<strong>GET 请求</strong></p>
<p>1、简单的 GET 请求</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/ajax/demo_get.asp?t="</span> + <span class="built_in">Math</span>.random(),<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、通过 GET 方法发送信息</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/ajax/demo_get2.asp?fname=Bill&amp;lname=Gates"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>示例：<strong>POST 请求</strong></p>
<p>1、简单 POST 请求</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/ajax/demo_post.asp"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"/ajax/demo_post2.asp"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line"></div><div class="line">xmlhttp.send(<span class="string">"fname=Bill&amp;lname=Gates"</span>);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：<code>setRequestHeader(header, value)</code>  向请求添加 HTTP 头，<code>header</code>: 规定头的名称,  <code>value</code>: 规定头的值。</p>
<p><strong>url - 服务器上的文件</strong></p>
<p>open() 方法的 <em>url</em> 参数是服务器上文件的地址：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_test.asp"</span>,<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。</p>
<p><strong>异步 - True or False ？</strong></p>
<p>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true，对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p>
<p>通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p>
<ul>
<li>在等待服务器响应时执行其他脚本</li>
<li>当响应就绪后对响应进行处理</li>
</ul>
<p><strong>Async = true</strong></p>
<p>当使用 async = true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/ajax/test1.txt"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Let AJAX change this text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>通过 AJAX 改变内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Async = false</strong></p>
<p>如需使用 async = false，请将 open() 方法中的第三个参数改为 false</p>
<p>不推荐使用 async = false，但是对于一些小型的请求，也是可以的。</p>
<p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</p>
<p>注释：当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/ajax/test1.txt"</span>,<span class="literal">false</span>);</div><div class="line">xmlhttp.send();</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Let AJAX change this text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>通过 AJAX 改变内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>服务器响应</li>
</ul>
<p>使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p>
<ul>
<li>responseText  获得字符串形式的响应数据。</li>
<li>responseXML  获得 XML 形式的响应数据。</li>
</ul>
<p>1、responseText 属性</p>
<p>如果来自服务器的响应并非 XML，请使用 responseText 属性。</p>
<p>responseText 属性返回字符串形式的响应，因此您可以这样使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div></pre></td></tr></table></figure>
<p>2、responseXML 属性</p>
<p>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：</p>
<p>请求 <a href="http://www.w3school.com.cn/example/xmle/books.xml" target="_blank" rel="external">books.xml</a> 文件，并解析响应：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">var</span> txt,x,i;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    xmlDoc=xmlhttp.responseXML;</div><div class="line">    txt=<span class="string">""</span>;</div><div class="line">    x=xmlDoc.getElementsByTagName(<span class="string">"title"</span>);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;x.length;i++)</div><div class="line">      &#123;</div><div class="line">      txt=txt + x[i].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=txt;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/example/xmle/books.xml"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Book Collection:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>获得我的图书收藏列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>onreadystatechange 事件</li>
</ul>
<p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。</p>
<p>下面是 XMLHttpRequest 对象的三个重要的属性：</p>
<blockquote>
<ul>
<li>onreadystatechange  存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数</li>
<li>readyState  存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。<ul>
<li>0: 请求未初始化</li>
<li>1: 服务器连接已建立</li>
<li>2: 请求已接收</li>
<li>3: 请求处理中</li>
<li>4: 请求已完成，且响应已就绪</li>
</ul>
</li>
<li>status<ul>
<li>200:  “OK”</li>
<li>404:  未找到页面</li>
</ul>
</li>
</ul>
</blockquote>
<p>在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</p>
<p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>使用 Callback 函数</strong></p>
<p>callback 函数是一种以参数形式传递给另一个函数的函数。</p>
<p>如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个<em>标准</em> 的函数，并为每个 AJAX 任务调用该函数。</p>
<p>该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line">loadXMLDoc(<span class="string">"ajax_info.txt"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="AJAX-高级"><a href="#AJAX-高级" class="headerlink" title="AJAX - 高级"></a>AJAX - 高级</h3><p><a href="http://www.w3school.com.cn/ajax/ajax_asp_php.asp" target="_blank" rel="external">ASP/PHP 请求实例 - AJAX 用于创造动态性更强的应用程序。</a></p>
<p><a href="http://www.w3school.com.cn/ajax/ajax_database.asp" target="_blank" rel="external">AJAX 可用来与数据库进行动态通信。</a></p>
<p><a href="http://www.w3school.com.cn/ajax/ajax_xmlfile.asp" target="_blank" rel="external">AJAX 可用来与 XML 文件进行交互式通信。</a></p>
<h3 id="AJAX-实例"><a href="#AJAX-实例" class="headerlink" title="AJAX 实例"></a>AJAX 实例</h3><p><a href="http://www.w3school.com.cn/example/ajax_examples.asp" target="_blank" rel="external">使用 XMLHttpRequest 对象的实例</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;最近的项目中大量地方需要使用 AJAX，无奈，谁叫我既要写前台又要写后台呢，只好学习下这个技术点，主要参考 &lt;a href=&quot;http://www.w3school.com.cn/ajax/index.asp&quot;&gt;W3school 文档&lt;/a&gt;，下面记录下这些知识点，便于日后自己查阅，下面的一些测试代码建议在 W3school 中测试。&lt;/p&gt;
&lt;h3 id=&quot;AJAX-基础：&quot;&gt;&lt;a href=&quot;#AJAX-基础：&quot; class=&quot;headerlink&quot; title=&quot;AJAX 基础：&quot;&gt;&lt;/a&gt;AJAX 基础：&lt;/h3&gt;&lt;p&gt; AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。&lt;/strong&gt; 在很多网站可以见到使用这种技术。&lt;br&gt;
    
    </summary>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>java.sql.SQLException Field &#39;id&#39; doesn&#39;t have a default value</title>
    <link href="http://yoursite.com/2017/06/20/Java-error1/"/>
    <id>http://yoursite.com/2017/06/20/Java-error1/</id>
    <published>2017-06-20T07:10:47.405Z</published>
    <updated>2017-06-20T07:15:22.728Z</updated>
    
    <content type="html"><![CDATA[<p>1、错误描述</p>
<p>在做一个电商网站项目时，使用 Mybatis + MySQL 时出现问题 <code>Caused by: java.sql.SQLException: Field &#39;id&#39; doesn&#39;t have a default value</code> ，网上很多人说是 <a href="https://my.oschina.net/boonya/blog/692232" target="_blank" rel="external">MyBatis 插入数据行 ID 没生成自增</a>。但是我尝试好久，没解决该问题。</p>
<p>2、错误原因</p>
<p>后来才发现是因为创建数据库时的建表语句中的 id 是主键的，但是在插入的过程中，没有给予数值，并且没有让 id 自增。</p>
<p>3、解决办法</p>
<p>修改数据库表中的id，让其自增（在插入的过程中，不插入id数据时）。</p>
<p>（我是直接将整个数据库都导出来，然后在每个表的 id 后面加上一个 <code>auto_increment</code>）, 如下 ：<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`d_user`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`zip`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`address`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、错误描述&lt;/p&gt;
&lt;p&gt;在做一个电商网站项目时，使用 Mybatis + MySQL 时出现问题 &lt;code&gt;Caused by: java.sql.SQLException: Field &amp;#39;id&amp;#39; doesn&amp;#39;t have a default value&lt;/code&gt; ，网上很多人说是 &lt;a href=&quot;https://my.oschina.net/boonya/blog/692232&quot;&gt;MyBatis 插入数据行 ID 没生成自增&lt;/a&gt;。但是我尝试好久，没解决该问题。&lt;/p&gt;
&lt;p&gt;2、错误原因&lt;/p&gt;
&lt;p&gt;后来才发现是因为创建数据库时的建表语句中的 id 是主键的，但是在插入的过程中，没有给予数值，并且没有让 id 自增。&lt;/p&gt;
&lt;p&gt;3、解决办法&lt;/p&gt;
&lt;p&gt;修改数据库表中的id，让其自增（在插入的过程中，不插入id数据时）。&lt;/p&gt;
&lt;p&gt;（我是直接将整个数据库都导出来，然后在每个表的 id 后面加上一个 &lt;code&gt;auto_increment&lt;/code&gt;）, 如下 ：&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个博客项目后的碎碎念</title>
    <link href="http://yoursite.com/2017/06/17/blog-talk/"/>
    <id>http://yoursite.com/2017/06/17/blog-talk/</id>
    <published>2017-06-17T14:01:44.007Z</published>
    <updated>2017-06-17T14:02:13.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>以前大二的时候就想一个人独立做一个由 Java 开发的个人博客, 可耐当时还很弱鸡，一个人难以独挡一片，因为要会的东西太多，后来自己看到很多都是由 WordPress 搭建的博客，很多模板很漂亮，可是自己要稍微对 “拍黄片” 了解一点，并且里面的各种插件特特别的多。去年的时候就开始用上了 GitHub Page 搭建静态的博客，因为自己一直习惯用 Markdown 写作，写完后，软件可以直接生成 PDF 和 HTML 文件，这样就很方便了，直接将自己的 HTML、PDF 和 MD 文件一起 push 到 GitHub 上，然后自己在通过域名加上文章链接就可以直接访问我的博客了，这样就省了很多事了。还提供了 PDF 和 MD 版本，对有不同需求的人都可满足了。可是后来觉得这样的逼格还是不够高，就又开始折腾 Hexo 了，发现用 Hexo 也是很非常简单的（其实是看到 Hexo 的 yilia 主题非常漂亮）。于是就换上了 Hexo 了，自己在这上面写博客也很方便。每次用软件写完后，在 Git Bash 下敲一行命令 <code>hexo d -g</code> 就行了，很方便！前段时间看到了一款开源的博客（由 Java 搭建而成）——  Tale，主题比较简洁，符合程序员的范。也刚好符合自己最初的想法，但是我是没打算放弃现在的博客，就是有一个想法，自己也跟着在那个基础山修改下。（因为 Tale 使用的是轻量级 mvc 框架 <code>Blade</code> 开发，我好像不太了解这个框架呢），想着就 SpringBoot 开发比较快，上手也简单。当时就有这个想法，可怜没时间，不过前些天发现有人就是基于那个 Tale 博客重新修改了，用的就是 SpringBoot ，哇，果然是英雄所见略同。当时就和作者邮件联系了，于是蹭这些天的时间赶紧去看看，结果不只是看看，完全自己就全部敲了一遍，终于在今天搞定了，为了庆祝，才写下这篇文章，好好记录这些美好的时刻（博客可以完全发挥，不限题材）。通过自己深入这个项目，才能够很了解内部的实现方式，这点收获很大，这十天时间花的值，再此感谢两位原作者 <a href="https://github.com/ZHENFENG13" target="_blank" rel="external">ZHENFENG13</a> 、<a href="https://github.com/otale" target="_blank" rel="external">otale</a> 。</p>
</blockquote>
<a id="more"></a>
<h3 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h3><p><code>Tale</code> 使用了轻量级 mvc 框架 <code>Blade</code> 开发，默认主题使用了漂亮的 <code>pinghsu</code> 。</p>
<p><code>My-Blog</code> 使用的是 Docker + SpringBoot + Mybatis + thymeleaf 打造的一个个人博客模板。</p>
<p><a href="https://github.com/zhisheng17/blog" target="_blank" rel="external">Blog</a>  是自己花了十天的时间把整个项目的代码都敲了一遍，熟悉了整个项目，做了优化，去除了 Docker， 其中修改了原来的一些 bug，并在原作者的项目中提出了 issue ， 原作者已修复。</p>
<p>: 喜欢该项目的话，可以给项目点个 star，如果你想在这基础上修改，那么建议你 fork 该<a href="https://github.com/zhisheng17/blog" target="_blank" rel="external">项目</a>，然后再修改哦。</p>
<p>博客首页：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/index.png" alt=""></p>
<p>归档：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/metas.png" alt=""></p>
<p>友链：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/links.png" alt=""></p>
<p>关于：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/about.png" alt=""></p>
<p>搜索：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/search.png" alt=""></p>
<p><strong>后台管理</strong></p>
<p>管理登录：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-login.png" alt=""></p>
<p>管理首页：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-index.png" alt=""></p>
<p>发布文章：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-publish.png" alt=""></p>
<p>文章管理：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-article.png" alt=""></p>
<p>页面管理：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-pages.png" alt=""></p>
<p>分类标签：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-category.png" alt=""></p>
<p>文件管理：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-upload.png" alt=""></p>
<p>友链管理：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-links.png" alt=""></p>
<p>系统设置：</p>
<p><img src="https://github.com/zhisheng17/blog/raw/master/img/admin-setting.png" alt=""></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我什么我这么喜欢折腾博客呢，熟悉我的朋友都知道，我再很多平台都写过博客，有些是他们平台的运营人员邀请过去的。可是在这些平台上写博客终究是没有感觉，如今自己在自己的博客网站写文章，比较轻松，而且也符合我的写作风格。在其他的平台都有些大大小小的不适（对程序员来说应该是 bug），虽然目前还是会在这些平台继续发布我新写的文章，但是我保证最新的文章，首发肯定是我自己的博客网站，有些是不会在其他平台发的，有觉得不错的可以 RSS 订阅我的博客，或者是直接收藏网址下来。自从写博客下来遇到很多志同道合的人，这点正是让我觉得有写下去的必要了。自己将会坚持下去，时刻警醒自己：勿忘初心！最后的最后，还是想说一句：如果你想和我一样折腾博客，那么我建议你先在一家平台坚持写下去，等博客数量上来了，在自己折腾自己的博客网站。还有就是你想提高自己的话，还是需要很在意你的基础，然后就是要多练手几个项目，我自己在练手这个项目的时候就收获很多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以前大二的时候就想一个人独立做一个由 Java 开发的个人博客, 可耐当时还很弱鸡，一个人难以独挡一片，因为要会的东西太多，后来自己看到很多都是由 WordPress 搭建的博客，很多模板很漂亮，可是自己要稍微对 “拍黄片” 了解一点，并且里面的各种插件特特别的多。去年的时候就开始用上了 GitHub Page 搭建静态的博客，因为自己一直习惯用 Markdown 写作，写完后，软件可以直接生成 PDF 和 HTML 文件，这样就很方便了，直接将自己的 HTML、PDF 和 MD 文件一起 push 到 GitHub 上，然后自己在通过域名加上文章链接就可以直接访问我的博客了，这样就省了很多事了。还提供了 PDF 和 MD 版本，对有不同需求的人都可满足了。可是后来觉得这样的逼格还是不够高，就又开始折腾 Hexo 了，发现用 Hexo 也是很非常简单的（其实是看到 Hexo 的 yilia 主题非常漂亮）。于是就换上了 Hexo 了，自己在这上面写博客也很方便。每次用软件写完后，在 Git Bash 下敲一行命令 &lt;code&gt;hexo d -g&lt;/code&gt; 就行了，很方便！前段时间看到了一款开源的博客（由 Java 搭建而成）——  Tale，主题比较简洁，符合程序员的范。也刚好符合自己最初的想法，但是我是没打算放弃现在的博客，就是有一个想法，自己也跟着在那个基础山修改下。（因为 Tale 使用的是轻量级 mvc 框架 &lt;code&gt;Blade&lt;/code&gt; 开发，我好像不太了解这个框架呢），想着就 SpringBoot 开发比较快，上手也简单。当时就有这个想法，可怜没时间，不过前些天发现有人就是基于那个 Tale 博客重新修改了，用的就是 SpringBoot ，哇，果然是英雄所见略同。当时就和作者邮件联系了，于是蹭这些天的时间赶紧去看看，结果不只是看看，完全自己就全部敲了一遍，终于在今天搞定了，为了庆祝，才写下这篇文章，好好记录这些美好的时刻（博客可以完全发挥，不限题材）。通过自己深入这个项目，才能够很了解内部的实现方式，这点收获很大，这十天时间花的值，再此感谢两位原作者 &lt;a href=&quot;https://github.com/ZHENFENG13&quot;&gt;ZHENFENG13&lt;/a&gt; 、&lt;a href=&quot;https://github.com/otale&quot;&gt;otale&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + yilia 主题实现文章目录</title>
    <link href="http://yoursite.com/2017/06/13/Hexo-yilia-toc/"/>
    <id>http://yoursite.com/2017/06/13/Hexo-yilia-toc/</id>
    <published>2017-06-13T10:53:33.974Z</published>
    <updated>2017-06-13T11:04:57.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>为了方便查看每篇文章的目录结构，可以定位到想看的地方，特地找了下如何实现这个功能。</p>
<h3 id="添加-CSS-样式"><a href="#添加-CSS-样式" class="headerlink" title="添加 CSS 样式"></a>添加 CSS 样式</h3><p>打开 <code>themes\yilia\source</code> 下的 <code>main.234bc0.css</code> 文件，直接在后面添加如下代码：<br><a id="more"></a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 新添加的 */</span></div><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.show-toc-btn</span>,<span class="selector-id">#container</span> <span class="selector-class">.toc-article</span>&#123;<span class="attribute">display</span>:block&#125;</div><div class="line"><span class="selector-class">.toc-article</span>&#123;<span class="attribute">z-index</span>:<span class="number">100</span>;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;<span class="attribute">max-width</span>:<span class="number">250px</span>;<span class="attribute">min-width</span>:<span class="number">150px</span>;<span class="attribute">max-height</span>:<span class="number">500px</span>;<span class="attribute">overflow-y</span>:auto;<span class="attribute">-webkit-box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;<span class="attribute">box-shadow</span>:<span class="number">5px</span> <span class="number">5px</span> <span class="number">2px</span> <span class="number">#ccc</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">35px</span>;<span class="attribute">top</span>:<span class="number">129px</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span>&#123;<span class="attribute">font-weight</span>:<span class="number">700</span>;<span class="attribute">font-size</span>:<span class="number">20px</span>;<span class="attribute">cursor</span>:pointer;<span class="attribute">float</span>:right;<span class="attribute">color</span>:<span class="number">#ccc</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-close</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">line-height</span>:<span class="number">20px</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-number</span>&#123;<span class="attribute">color</span>:<span class="number">#333</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc</span> <span class="selector-class">.toc-text</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">text-decoration</span>:underline;<span class="attribute">color</span>:<span class="number">#2a6496</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-tag">li</span>&#123;<span class="attribute">list-style-type</span>:none&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-level-1</span>&#123;<span class="attribute">margin</span>:<span class="number">4px</span> <span class="number">0</span>&#125;<span class="selector-class">.toc-article</span> <span class="selector-class">.toc-child</span>&#123;&#125;@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;@-<span class="keyword">o</span>-<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;@<span class="keyword">keyframes</span> cd-bounce-<span class="number">1</span>&#123;0%&#123;<span class="attribute">opacity</span>:<span class="number">0</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;60%&#123;<span class="attribute">opacity</span>:<span class="number">1</span>;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1.01);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1.01)&#125;100%&#123;<span class="attribute">-o-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-webkit-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-moz-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">-ms-transform</span>:<span class="built_in">scale</span>(1);<span class="attribute">transform</span>:<span class="built_in">scale</span>(1)&#125;&#125;<span class="selector-class">.show-toc-btn</span>&#123;<span class="attribute">display</span>:none;<span class="attribute">z-index</span>:<span class="number">10</span>;<span class="attribute">width</span>:<span class="number">30px</span>;<span class="attribute">min-height</span>:<span class="number">14px</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">padding</span>:<span class="number">4px</span> <span class="number">6px</span> <span class="number">8px</span> <span class="number">5px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ddd</span>;<span class="attribute">border-right</span>:none;<span class="attribute">position</span>:fixed;<span class="attribute">right</span>:<span class="number">40px</span>;<span class="attribute">text-align</span>:center;<span class="attribute">background-color</span>:<span class="number">#f9f9f9</span>&#125;<span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-bg</span>&#123;<span class="attribute">margin-top</span>:<span class="number">2px</span>;<span class="attribute">display</span>:block;<span class="attribute">width</span>:<span class="number">16px</span>;<span class="attribute">height</span>:<span class="number">14px</span>;<span class="attribute">background</span>:<span class="built_in">url</span>(http://7xtawy.com1.z0.glb.clouddn.com/show.png) no-repeat;<span class="attribute">-webkit-background-size</span>:<span class="number">100%</span>;<span class="attribute">-moz-background-size</span>:<span class="number">100%</span>;<span class="attribute">background-size</span>:<span class="number">100%</span>&#125;<span class="selector-class">.show-toc-btn</span> <span class="selector-class">.btn-text</span>&#123;<span class="attribute">color</span>:<span class="number">#999</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">cursor</span>:pointer&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-bg</span>&#123;<span class="attribute">background-position</span>:<span class="number">0</span> -<span class="number">16px</span>&#125;<span class="selector-class">.show-toc-btn</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.btn-text</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;<span class="attribute">color</span>:<span class="number">#ea8010</span>&#125;</div><div class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.toc-article</span> <span class="selector-tag">ol</span>, <span class="selector-class">.toc-article</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="修改-article-ejs-文件"><a href="#修改-article-ejs-文件" class="headerlink" title="修改 article.ejs 文件"></a>修改 article.ejs 文件</h3><p>打开 <code>themes\yilia\layout\_partial</code> 文件夹下的 <code>article.ejs</code> 文件,  在 <code>&lt;/header&gt; &lt;% } %&gt;</code> 下面加入如下内容（注意位置）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 目录内容 --&gt;</div><div class="line">&lt;% if (!index &amp;&amp; post.toc)&#123; %&gt;</div><div class="line">    &lt;p class=&quot;show-toc-btn&quot; id=&quot;show-toc-btn&quot; onclick=&quot;showToc();&quot; style=&quot;display:none&quot;&gt;</div><div class="line">          &lt;span class=&quot;btn-bg&quot;&gt;&lt;/span&gt;</div><div class="line">          &lt;span class=&quot;btn-text&quot;&gt;文章导航&lt;/span&gt;</div><div class="line">          &lt;/p&gt;</div><div class="line">	&lt;div id=&quot;toc-article&quot; class=&quot;toc-article&quot;&gt;</div><div class="line">	    &lt;span id=&quot;toc-close&quot; class=&quot;toc-close&quot; title=&quot;隐藏导航&quot; onclick=&quot;showBtn();&quot;&gt;×&lt;/span&gt;</div><div class="line">		&lt;strong class=&quot;toc-title&quot;&gt;文章目录&lt;/strong&gt;</div><div class="line">           &lt;%- toc(post.content) %&gt;</div><div class="line">         &lt;/div&gt;</div><div class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">	function showToc()&#123;</div><div class="line">		var toc_article = document.getElementById(&quot;toc-article&quot;);</div><div class="line">		var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;);</div><div class="line">		toc_article.setAttribute(&quot;style&quot;,&quot;display:block&quot;);</div><div class="line">		show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:none&quot;);</div><div class="line">		&#125;;</div><div class="line">	function showBtn()&#123;</div><div class="line">		var toc_article = document.getElementById(&quot;toc-article&quot;);</div><div class="line">		var show_toc_btn = document.getElementById(&quot;show-toc-btn&quot;);</div><div class="line">		toc_article.setAttribute(&quot;style&quot;,&quot;display:none&quot;);</div><div class="line">		show_toc_btn.setAttribute(&quot;style&quot;,&quot;display:block&quot;);</div><div class="line">		&#125;;</div><div class="line">   &lt;/script&gt;</div><div class="line">      &lt;% &#125; %&gt;</div><div class="line">&lt;!-- 目录内容结束 --&gt;</div></pre></td></tr></table></figure>
<p>然后若想要文章显示目录，在每篇文章开头加入：<code>toc: true</code>  即可。</p>
<p>参考文章：<a href="http://lawlite.me/2017/04/17/Hexo-yilia%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/" target="_blank" rel="external">Hexo+yilia主题实现文章目录和添加视频 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h3&gt;&lt;p&gt;为了方便查看每篇文章的目录结构，可以定位到想看的地方，特地找了下如何实现这个功能。&lt;/p&gt;
&lt;h3 id=&quot;添加-CSS-样式&quot;&gt;&lt;a href=&quot;#添加-CSS-样式&quot; class=&quot;headerlink&quot; title=&quot;添加 CSS 样式&quot;&gt;&lt;/a&gt;添加 CSS 样式&lt;/h3&gt;&lt;p&gt;打开 &lt;code&gt;themes\yilia\source&lt;/code&gt; 下的 &lt;code&gt;main.234bc0.css&lt;/code&gt; 文件，直接在后面添加如下代码：&lt;br&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HashMap、Hashtable、HashSet 和 ConcurrentHashMap 的比较</title>
    <link href="http://yoursite.com/2017/06/10/HashMap-Hashtable/"/>
    <id>http://yoursite.com/2017/06/10/HashMap-Hashtable/</id>
    <published>2017-06-10T14:09:09.072Z</published>
    <updated>2017-06-13T10:37:50.894Z</updated>
    
    <content type="html"><![CDATA[<p>HashMap 和 Hashtable 的比较是 Java 面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap 的工作原理、ArrayList 与 Vector 的比较以及这个问题是有关 Java 集合框架的最经典的问题。Hashtable 是个过时的集合类，存在于 Java API 中很久了。在 Java 4 中被重写了，实现了 Map 接口，所以自此以后也成了 Java 集合框架中的一部分。Hashtable 和 HashMap 在 Java 面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何 Java 面试之前，都不要忘了准备这一题。<br><a id="more"></a><br>这篇文章中，我们不仅将会看到 HashMap 和 Hashtable 的区别，还将看到它们之间的相似之处。</p>
<h3 id="HashMap-和-Hashtable-的区别"><a href="#HashMap-和-Hashtable-的区别" class="headerlink" title="HashMap 和 Hashtable 的区别"></a>HashMap 和 Hashtable 的区别</h3><p>HashMap 和 Hashtable 都实现了 Map 接口，但决定用哪一个之前先要弄清楚它们之间的分别。主要的区别有：线程安全性，同步 (synchronization)，以及速度。</p>
<ol>
<li>HashMap 几乎可以等价于 Hashtable，除了 HashMap 是非 synchronized 的，并可以接受 null(HashMap 可以接受为 null 的键值 (key) 和值 (value)，而 Hashtable 则不行)。</li>
<li>HashMap 是非 synchronized，而 Hashtable 是 synchronized，这意味着 Hashtable 是线程安全的，多个线程可以共享一个 Hashtable；而如果没有正确的同步的话，多个线程是不能共享 HashMap 的。Java 5 提供了 ConcurrentHashMap，它是 HashTable 的替代，比 HashTable 的扩展性更好。</li>
<li>另一个区别是 HashMap 的迭代器 (Iterator) 是 fail-fast 迭代器，而 Hashtable 的 enumerator 迭代器不是 fail-fast 的。所以当有其它线程改变了 HashMap 的结构（增加或者移除元素），将会抛出ConcurrentModificationException，但迭代器本身的 remove() 方法移除元素则不会抛出ConcurrentModificationException 异常。但这并不是一个一定发生的行为，要看 JVM。这条同样也是Enumeration 和 Iterato r的区别。</li>
<li>由于 Hashtable 是线程安全的也是 synchronized，所以在单线程环境下它比 HashMap 要慢。如果你不需要同步，只需要单一线程，那么使用 HashMap 性能要好过 Hashtable。</li>
<li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li>
</ol>
<h3 id="要注意的一些重要术语："><a href="#要注意的一些重要术语：" class="headerlink" title="要注意的一些重要术语："></a>要注意的一些重要术语：</h3><p>1) sychronized 意味着在一次仅有一个线程能够更改 Hashtable。就是说任何线程要更新 Hashtable 时要首先获得同步锁，其它线程要等到同步锁被释放之后才能再次获得同步锁更新 Hashtable。</p>
<p>2) Fail-safe 和 iterator 迭代器相关。如果某个集合对象创建了 Iterator 或者 ListIterator，然后其它的线程试图“结构上”更改集合对象，将会抛出 ConcurrentModificationException 异常。但其它线程可以通过 set() 方法更改集合对象是允许的，因为这并没有从“结构上”更改集合。但是假如已经从结构上进行了更改，再调用 set() 方法，将会抛出 IllegalArgumentException 异常。</p>
<p>3) 结构上的更改指的是删除或者插入一个元素，这样会影响到 map 的结构。</p>
<h3 id="我们能否让-HashMap-同步？"><a href="#我们能否让-HashMap-同步？" class="headerlink" title="我们能否让 HashMap 同步？"></a>我们能否让 HashMap 同步？</h3><p>HashMap 可以通过下面的语句进行同步：<br>Map m = Collections.synchronizeMap(hashMap);</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>Hashtable 和 HashMap 有几个主要的不同：线程安全以及速度。仅在你需要完全的线程安全的时候使用Hashtable，而如果你使用 Java 5 或以上的话，请使用 ConcurrentHashMap 吧。</p>
<p>转载自：<a href="http://www.importnew.com/7010.html" target="_blank" rel="external">HashMap和Hashtable的区别</a></p>
<hr>
<p>关于 HashMap 线程不安全这一点，《Java并发编程的艺术》一书中是这样说的：</p>
<blockquote>
<p>HashMap 在并发执行 put 操作时会引起死循环，导致 CPU 利用率接近 100%。因为多线程会导致 HashMap 的 Node 链表形成环形数据结构，一旦形成环形数据结构，Node 的 next 节点永远不为空，就会在获取 Node 时产生死循环。</p>
</blockquote>
<p>原因：</p>
<ul>
<li><a href="http://coolshell.cn/articles/9606.html" target="_blank" rel="external">疫苗：JAVA HASHMAP的死循环 —— 酷壳</a></li>
<li><a href="http://firezhfox.iteye.com/blog/2241043" target="_blank" rel="external">HashMap在java并发中如何发生死循环</a></li>
<li><a href="http://coding-geek.com/how-does-a-hashmap-work-in-java/" target="_blank" rel="external">How does a HashMap work in JAVA</a></li>
</ul>
<hr>
<p>下面的是自己有道云笔记中记录的：</p>
<p><strong>HashMap ， HashTable 和 HashSet 区别</strong></p>
<ol>
<li>关于 HashMap 的一些说法：</li>
</ol>
<p>a)  HashMap 实际上是一个“链表散列”的数据结构，即数组和链表的结合体。HashMap 的底层结构是一个数组，数组中的每一项是一条链表。</p>
<p>b)  HashMap 的实例有俩个参数影响其性能： “初始容量” 和 装填因子。</p>
<p>c)  HashMap 实现不同步，线程不安全。  HashTable 线程安全</p>
<p>d)  HashMap 中的 key-value 都是存储在 Entry 中的。</p>
<p>e)  HashMap 可以存 null 键和 null 值，不保证元素的顺序恒久不变，它的底层使用的是数组和链表，通过hashCode() 方法和 equals 方法保证键的唯一性</p>
<p>f)  解决冲突主要有三种方法：定址法，拉链法，再散列法。HashMap 是采用拉链法解决哈希冲突的。</p>
<p>注： 链表法是将相同 hash 值的对象组成一个链表放在 hash 值对应的槽位；</p>
<p>用开放定址法解决冲突的做法是：当冲突发生时，使用某种探查(亦称探测)技术在散列表中形成一个探查(测)序列。 沿此序列逐个单元地查找，直到找到给定 的关键字，或者碰到一个开放的地址(即该地址单元为空)为止（若要插入，在探查到开放的地址，则可将待插入的新结点存人该地址单元）。</p>
<p>拉链法解决冲突的做法是： 将所有关键字为同义词的结点链接在同一个单链表中 。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数 组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取α≤1。拉链法适合未规定元素的大小。</p>
<ol>
<li>Hashtable 和 HashMap 的区别：</li>
</ol>
<p>a)   继承不同。</p>
<p> public class Hashtable extends Dictionary implements Map</p>
<p>public class HashMap extends  AbstractMap implements Map</p>
<p>b)  Hashtable 中的方法是同步的，而 HashMap 中的方法在缺省情况下是非同步的。在多线程并发的环境下，可以直接使用 Hashtable，但是要使用 HashMap 的话就要自己增加同步处理了。</p>
<p>c)  Hashtable 中， key 和 value 都不允许出现 null 值。 在 HashMap 中， null 可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为 null 。当 get() 方法返回 null 值时，即可以表示 HashMap 中没有该键，也可以表示该键所对应的值为 null 。因此，在 HashMap 中不能由 get() 方法来判断 HashMap 中是否存在某个键， 而应该用 containsKey() 方法来判断。</p>
<p>d)  两个遍历方式的内部实现上不同。Hashtable、HashMap 都使用了Iterator。而由于历史原因，Hashtable还使用了 Enumeration 的方式 。</p>
<p>e)  哈希值的使用不同，HashTable 直接使用对象的 hashCode。而 HashMap 重新计算 hash 值。</p>
<p>f)  Hashtable 和 HashMap 它们两个内部实现方式的数组的初始大小和扩容的方式。HashTable 中 hash 数组默认大小是11，增加的方式是 old*2+1。HashMap 中 hash 数组的默认大小是 16，而且一定是2的指数。</p>
<p>注：  HashSet 子类依靠 hashCode() 和 equal() 方法来区分重复元素。</p>
<p>HashSet 内部使用 Map 保存数据，即将 HashSet 的数据作为 Map 的 key 值保存，这也是 HashSet 中元素不能重复的原因。而 Map 中保存 key 值的,会去判断当前 Map 中是否含有该 Key 对象，内部是先通过 key 的hashCode, 确定有相同的 hashCode 之后，再通过 equals 方法判断是否相同。</p>
<hr>
<p>《HashMap 的工作原理》</p>
<p>HashMap的工作原理是近年来常见的Java面试题。几乎每个Java程序员都知道HashMap，都知道哪里要用HashMap，知道 Hashtable和HashMap之间的区别，那么为何这道面试题如此特殊呢？是因为这道题考察的深度很深。这题经常出现在高级或中高级面试中。投资银行更喜欢问这个问题，甚至会要求你实现HashMap来考察你的编程能力。ConcurrentHashMap和其它同步集合的引入让这道题变得更加复杂。让我们开始探索的旅程吧！</p>
<h3 id="先来些简单的问题"><a href="#先来些简单的问题" class="headerlink" title="先来些简单的问题"></a>先来些简单的问题</h3><p><strong>“你用过HashMap吗？” “什么是HashMap？你为什么用到它？”</strong></p>
<p>几乎每个人都会回答“是的”，然后回答HashMap的一些特性，譬如HashMap可以接受null键值和值，而Hashtable则不能；HashMap是非synchronized;HashMap很快；以及HashMap储存的是键值对等等。这显示出你已经用过HashMap，而且对它相当的熟悉。但是面试官来个急转直下，从此刻开始问出一些刁钻的问题，关于HashMap的更多基础的细节。面试官可能会问出下面的问题：</p>
<p><strong>“你知道HashMap的工作原理吗？” “你知道HashMap的get()方法的工作原理吗？”</strong></p>
<p>你也许会回答“我没有详查标准的Java API，你可以看看Java源代码或者Open JDK。”“我可以用Google找到答案。”</p>
<p>但一些面试者可能可以给出答案，“HashMap是基于hashing的原理，我们使用put(key, value)存储对象到HashMap中，使用get(key)从HashMap中获取对象。当我们给put()方法传递键和值时，我们先对键调用hashCode()方法，返回的hashCode用于找到bucket位置来储存Entry对象。”这里关键点在于指出，HashMap是在bucket中储存键对象和值对象，作为Map.Entry。这一点有助于理解获取对象的逻辑。如果你没有意识到这一点，或者错误的认为仅仅只在bucket中存储值的话，你将不会回答如何从HashMap中获取对象的逻辑。这个答案相当的正确，也显示出面试者确实知道hashing以及HashMap的工作原理。但是这仅仅是故事的开始，当面试官加入一些Java程序员每天要碰到的实际场景的时候，错误的答案频现。下个问题可能是关于HashMap中的碰撞探测(collision detection)以及碰撞的解决方法：</p>
<p><strong>“当两个对象的hashcode相同会发生什么？”</strong> </p>
<p>从这里开始，真正的困惑开始了，一些面试者会回答因为hashcode相同，所以两个对象是相等的，HashMap将会抛出异常，或者不会存储它们。然后面试官可能会提醒他们有equals()和hashCode()两个方法，并告诉他们两个对象就算hashcode相同，但是它们可能并不相等。一些面试者可能就此放弃，而另外一些还能继续挺进，他们回答“因为hashcode相同，所以它们的bucket位置相同，‘碰撞’会发生。因为HashMap使用链表存储对象，这个Entry(包含有键值对的Map.Entry对象)会存储在链表中。”这个答案非常的合理，虽然有很多种处理碰撞的方法，这种方法是最简单的，也正是HashMap的处理方法。但故事还没有完结，面试官会继续问：</p>
<p><strong>“如果两个键的hashcode相同，你如何获取值对象？”</strong></p>
<p> 面试者会回答：当我们调用get()方法，HashMap会使用键对象的hashcode找到bucket位置，然后获取值对象。面试官提醒他如果有两个值对象储存在同一个bucket，他给出答案:将会遍历链表直到找到值对象。面试官会问因为你并没有值对象去比较，你是如何确定确定找到值对象的？除非面试者直到HashMap在链表中存储的是键值对，否则他们不可能回答出这一题。</p>
<p>其中一些记得这个重要知识点的面试者会说，找到bucket位置之后，会调用keys.equals()方法去找到链表中正确的节点，最终找到要找的值对象。完美的答案！</p>
<p>许多情况下，面试者会在这个环节中出错，因为他们混淆了hashCode()和equals()方法。因为在此之前hashCode()屡屡出现，而equals()方法仅仅在获取值对象的时候才出现。一些优秀的开发者会指出使用不可变的、声明作final的对象，并且采用合适的equals()和hashCode()方法的话，将会减少碰撞的发生，提高效率。不可变性使得能够缓存不同键的hashcode，这将提高整个获取对象的速度，使用String，Interger这样的wrapper类作为键是非常好的选择。</p>
<p>如果你认为到这里已经完结了，那么听到下面这个问题的时候，你会大吃一惊。</p>
<p><strong>“如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办？”</strong></p>
<p>除非你真正知道HashMap的工作原理，否则你将回答不出这道题。默认的负载因子大小为0.75，也就是说，当一个map填满了75%的bucket时候，和其它集合类(如ArrayList等)一样，将会创建原来HashMap大小的两倍的bucket数组，来重新调整map的大小，并将原来的对象放入新的bucket数组中。这个过程叫作rehashing，因为它调用hash方法找到新的bucket位置。</p>
<p>如果你能够回答这道问题，下面的问题来了：</p>
<p><strong>“你了解重新调整HashMap大小存在什么问题吗？”</strong></p>
<p>你可能回答不上来，这时面试官会提醒你当多线程的情况下，可能产生条件竞争(race condition)。</p>
<p>当重新调整HashMap大小的时候，确实存在条件竞争，因为如果两个线程都发现HashMap需要重新调整大小了，它们会同时试着调整大小。在调整大小的过程中，存储在链表中的元素的次序会反过来，因为移动到新的bucket位置的时候，HashMap并不会将元素放在链表的尾部，而是放在头部，这是为了避免尾部遍历(tail traversing)。如果条件竞争发生了，那么就死循环了。这个时候，你可以质问面试官，为什么这么奇怪，要在多线程的环境下使用HashMap呢？：）</p>
<p>热心的读者贡献了更多的关于HashMap的问题：</p>
<ol>
<li><p><strong>为什么String, Interger这样的wrapper类适合作为键？</strong> </p>
<p>String, Interger这样的wrapper类作为HashMap的键是再适合不过了，而且String最为常用。因为String是不可变的，也是final的，而且已经重写了equals()和hashCode()方法了。其他的wrapper类也有这个特点。不可变性是必要的，因为为了要计算hashCode()，就要防止键值改变，如果键值在放入时和获取时返回不同的hashcode的话，那么就不能从HashMap中找到你想要的对象。不可变性还有其他的优点如线程安全。如果你可以仅仅通过将某个field声明成final就能保证hashCode是不变的，那么请这么做吧。因为获取对象的时候要用到equals()和hashCode()方法，那么键对象正确的重写这两个方法是非常重要的。如果两个不相等的对象返回不同的hashcode的话，那么碰撞的几率就会小些，这样就能提高HashMap的性能。</p>
</li>
<li><p><strong>我们可以使用自定义的对象作为键吗？</strong> </p>
<p>这是前一个问题的延伸。当然你可能使用任何对象作为键，只要它遵守了equals()和hashCode()方法的定义规则，并且当对象插入到Map中之后将不会再改变了。如果这个自定义对象时不可变的，那么它已经满足了作为键的条件，因为当它创建之后就已经不能改变了。</p>
</li>
<li><p><strong>我们可以使用CocurrentHashMap来代替Hashtable吗？</strong></p>
<p>这是另外一个很热门的面试题，因为ConcurrentHashMap越来越多人用了。我们知道Hashtable是synchronized的，但是ConcurrentHashMap同步性能更好，因为它仅仅根据同步级别对map的一部分进行上锁。ConcurrentHashMap当然可以代替HashTable，但是HashTable提供更强的线程安全性。看看 <a href="http://javarevisited.blogspot.sg/2011/04/difference-between-concurrenthashmap.html" target="_blank" rel="external">这篇博客</a> 查看Hashtable和ConcurrentHashMap的区别。</p>
</li>
</ol>
<p>我个人很喜欢这个问题，因为这个问题的深度和广度，也不直接的涉及到不同的概念。让我们再来看看这些问题设计哪些知识点：</p>
<ul>
<li>hashing的概念</li>
<li>HashMap中解决碰撞的方法</li>
<li>equals()和hashCode()的应用，以及它们在HashMap中的重要性</li>
<li>不可变对象的好处</li>
<li>HashMap多线程的条件竞争</li>
<li>重新调整HashMap的大小</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="HashMap的工作原理"><a href="#HashMap的工作原理" class="headerlink" title="HashMap的工作原理"></a>HashMap的工作原理</h4><p>HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会储存在链表的下一个节点中。 HashMap在每个链表节点中储存键值对对象。</p>
<p>当两个不同的键对象的hashcode相同时会发生什么？ 它们会储存在同一个bucket位置的链表中。键对象的equals()方法用来找到键值对。</p>
<p>因为HashMap的好处非常多，我曾经在电子商务的应用中使用HashMap作为缓存。因为金融领域非常多的运用Java，也出于性能的考虑，我们会经常用到HashMap和ConcurrentHashMap。你可以查看更多的关于HashMap的文章:</p>
<ul>
<li><a href="http://www.importnew.com/7010.html" target="_blank" rel="external">HashMap和Hashtable的区别</a></li>
<li><a href="http://www.importnew.com/6931.html" target="_blank" rel="external">HashMap和HashSet的区别</a></li>
</ul>
<p>转载自：<a href="http://www.importnew.com/7099.html" target="_blank" rel="external">HashMap的工作原理</a></p>
<hr>
<p>其他的 HashMap 学习资料：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000003617333" target="_blank" rel="external">jdk7中HashMap知识点整理</a></li>
<li><a href="http://blog.csdn.net/q291611265/article/details/46797557" target="_blank" rel="external">HashMap源码分析（四）put-jdk8-红黑树的引入</a></li>
<li><a href="https://my.oschina.net/hosee/blog/618953" target="_blank" rel="external">JDK7与JDK8中HashMap的实现</a></li>
<li><a href="https://wenku.baidu.com/view/6e1035943968011ca30091cd.html" target="_blank" rel="external">JDK1.8HashMap原理和源码分析(java面试收藏)</a></li>
<li><a href="http://www.jianshu.com/p/e694f1e868ec" target="_blank" rel="external">谈谈ConcurrentHashMap1.7和1.8的不同实现</a></li>
<li><a href="https://my.oschina.net/pingpangkuangmo/blog/817973" target="_blank" rel="external">jdk1.8的HashMap和ConcurrentHashMap</a></li>
<li><a href="http://blog.csdn.net/u010723709/article/details/48007881" target="_blank" rel="external">ConcurrentHashMap源码分析（JDK8版本）</a></li>
</ul>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>谢谢阅读，如果可以的话欢迎大家转发和点赞。如需转载注明<a href="www.54tianzhisheng.cn/2017/06/10/HashMap-Hashtable/">原地址</a>就行。</p>
<p>群 528776268 欢迎各位大牛进群一起讨论。</p>
<p><img src="http://ohfk1r827.bkt.clouddn.com/1473414112000.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HashMap 和 Hashtable 的比较是 Java 面试中的常见问题，用来考验程序员是否能够正确使用集合类以及是否可以随机应变使用多种思路解决问题。HashMap 的工作原理、ArrayList 与 Vector 的比较以及这个问题是有关 Java 集合框架的最经典的问题。Hashtable 是个过时的集合类，存在于 Java API 中很久了。在 Java 4 中被重写了，实现了 Map 接口，所以自此以后也成了 Java 集合框架中的一部分。Hashtable 和 HashMap 在 Java 面试中相当容易被问到，甚至成为了集合框架面试题中最常被考的问题，所以在参加任何 Java 面试之前，都不要忘了准备这一题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
